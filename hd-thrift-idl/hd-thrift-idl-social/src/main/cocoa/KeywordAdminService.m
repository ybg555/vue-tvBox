/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TObjective-C.h"
#import "TBase.h"


#import "KeywordAdminService.h"


@implementation KeywordAdminServiceConstants
+ (void) initialize {
}
@end

@interface getKeywordList_args : NSObject <TBase, NSCoding> {
  NSString * __params;

  BOOL __params_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=params, setter=setParams:) NSString * params;
#endif

- (id) init;
- (id) initWithParams: (NSString *) params;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) params;
- (void) setParams: (NSString *) params;
#endif
- (BOOL) paramsIsSet;

@end

@implementation getKeywordList_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithParams: (NSString *) params
{
  self = [super init];
  __params = [params retain_stub];
  __params_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"params"])
  {
    __params = [[decoder decodeObjectForKey: @"params"] retain_stub];
    __params_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__params_isset)
  {
    [encoder encodeObject: __params forKey: @"params"];
  }
}

- (void) dealloc
{
  [__params release_stub];
  [super dealloc_stub];
}

- (NSString *) params {
  return [[__params retain_stub] autorelease_stub];
}

- (void) setParams: (NSString *) params {
  [params retain_stub];
  [__params release_stub];
  __params = params;
  __params_isset = YES;
}

- (BOOL) paramsIsSet {
  return __params_isset;
}

- (void) unsetParams {
  [__params release_stub];
  __params = nil;
  __params_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setParams: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getKeywordList_args"];
  if (__params_isset) {
    if (__params != nil) {
      [outProtocol writeFieldBeginWithName: @"params" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __params];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getKeywordList_args("];
  [ms appendString: @"params:"];
  [ms appendFormat: @"\"%@\"", __params];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetKeywordList_result : NSObject <TBase, NSCoding> {
  NSString * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSString * success;
#endif

- (id) init;
- (id) initWithSuccess: (NSString *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) success;
- (void) setSuccess: (NSString *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation GetKeywordList_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NSString *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (NSString *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSString *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetKeywordList_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRING fieldID: 0];
      [outProtocol writeString: __success];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetKeywordList_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"\"%@\"", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation IKeywordAdminServiceGetKeywordListClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
  return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
  self = [super init];
  inProtocol = [anInProtocol retain_stub];
  outProtocol = [anOutProtocol retain_stub];
  return self;
}

- (void) dealloc
{
  [inProtocol release_stub];
  [outProtocol release_stub];
  [super dealloc_stub];
}

- (void) send_getKeywordList: (NSString *) params
{
  [outProtocol writeMessageBeginWithName: @"getKeywordList" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getKeywordList_args"];
  if (params != nil)  {
    [outProtocol writeFieldBeginWithName: @"params" type: TType_STRING fieldID: 1];
    [outProtocol writeString: params];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSString *) recv_getKeywordList
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GetKeywordList_result * result = [[[GetKeywordList_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getKeywordList failed: unknown result"];
}

- (NSString *) getKeywordList: (NSString *) params
{
  [self send_getKeywordList : params];
  return [self recv_getKeywordList];
}

@end

@implementation IKeywordAdminServiceGetKeywordListProcessor

- (id) initWithIKeywordAdminServiceGetKeywordList: (id <IKeywordAdminServiceGetKeywordList>) service
{
  self = [super init];
  if (!self) {
    return nil;
  }
  mService = [service retain_stub];
  mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
  {
    SEL s = @selector(process_getKeywordList_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getKeywordList"];
  }
  return self;
}

- (id<IKeywordAdminServiceGetKeywordList>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_getKeywordList_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  getKeywordList_args * args = [[getKeywordList_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GetKeywordList_result * result = [[GetKeywordList_result alloc] init];
  [result setSuccess: [mService getKeywordList: [args params]]];
  [outProtocol writeMessageBeginWithName: @"getKeywordList"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) dealloc
{
  [mService release_stub];
  [mMethodMap release_stub];
  [super dealloc_stub];
}

@end

@interface addKeyword_args : NSObject <TBase, NSCoding> {
NSString * __params;

BOOL __params_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=params, setter=setParams:) NSString * params;
#endif

- (id) init;
- (id) initWithParams: (NSString *) params;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) params;
- (void) setParams: (NSString *) params;
#endif
- (BOOL) paramsIsSet;

@end

@implementation addKeyword_args

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithParams: (NSString *) params
{
self = [super init];
__params = [params retain_stub];
__params_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"params"])
{
  __params = [[decoder decodeObjectForKey: @"params"] retain_stub];
  __params_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__params_isset)
{
  [encoder encodeObject: __params forKey: @"params"];
}
}

- (void) dealloc
{
[__params release_stub];
[super dealloc_stub];
}

- (NSString *) params {
return [[__params retain_stub] autorelease_stub];
}

- (void) setParams: (NSString *) params {
[params retain_stub];
[__params release_stub];
__params = params;
__params_isset = YES;
}

- (BOOL) paramsIsSet {
return __params_isset;
}

- (void) unsetParams {
[__params release_stub];
__params = nil;
__params_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
  [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
  if (fieldType == TType_STOP) { 
    break;
  }
  switch (fieldID)
  {
    case 1:
      if (fieldType == TType_STRING) {
        NSString * fieldValue = [inProtocol readString];
        [self setParams: fieldValue];
      } else { 
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      }
      break;
    default:
      [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      break;
  }
  [inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"addKeyword_args"];
if (__params_isset) {
  if (__params != nil) {
    [outProtocol writeFieldBeginWithName: @"params" type: TType_STRING fieldID: 1];
    [outProtocol writeString: __params];
    [outProtocol writeFieldEnd];
  }
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"addKeyword_args("];
[ms appendString: @"params:"];
[ms appendFormat: @"\"%@\"", __params];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@interface AddKeyword_result : NSObject <TBase, NSCoding> {
NSString * __success;

BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSString * success;
#endif

- (id) init;
- (id) initWithSuccess: (NSString *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) success;
- (void) setSuccess: (NSString *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation AddKeyword_result

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithSuccess: (NSString *) success
{
self = [super init];
__success = [success retain_stub];
__success_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"success"])
{
  __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
  __success_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__success_isset)
{
  [encoder encodeObject: __success forKey: @"success"];
}
}

- (void) dealloc
{
[__success release_stub];
[super dealloc_stub];
}

- (NSString *) success {
return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSString *) success {
[success retain_stub];
[__success release_stub];
__success = success;
__success_isset = YES;
}

- (BOOL) successIsSet {
return __success_isset;
}

- (void) unsetSuccess {
[__success release_stub];
__success = nil;
__success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
  [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
  if (fieldType == TType_STOP) { 
    break;
  }
  switch (fieldID)
  {
    case 0:
      if (fieldType == TType_STRING) {
        NSString * fieldValue = [inProtocol readString];
        [self setSuccess: fieldValue];
      } else { 
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      }
      break;
    default:
      [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      break;
  }
  [inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"AddKeyword_result"];

if (__success_isset) {
  if (__success != nil) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_STRING fieldID: 0];
    [outProtocol writeString: __success];
    [outProtocol writeFieldEnd];
  }
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"AddKeyword_result("];
[ms appendString: @"success:"];
[ms appendFormat: @"\"%@\"", __success];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@implementation IKeywordAdminServiceAddKeywordClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
self = [super init];
inProtocol = [anInProtocol retain_stub];
outProtocol = [anOutProtocol retain_stub];
return self;
}

- (void) dealloc
{
[inProtocol release_stub];
[outProtocol release_stub];
[super dealloc_stub];
}

- (void) send_addKeyword: (NSString *) params
{
[outProtocol writeMessageBeginWithName: @"addKeyword" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"addKeyword_args"];
if (params != nil){
  [outProtocol writeFieldBeginWithName: @"params" type: TType_STRING fieldID: 1];
  [outProtocol writeString: params];
  [outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
}

- (NSString *) recv_addKeyword
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
AddKeyword_result * result = [[[AddKeyword_result alloc] init] autorelease_stub];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"addKeyword failed: unknown result"];
}

- (NSString *) addKeyword: (NSString *) params
{
[self send_addKeyword : params];
return [self recv_addKeyword];
}

@end

@implementation IKeywordAdminServiceAddKeywordProcessor

- (id) initWithIKeywordAdminServiceAddKeyword: (id <IKeywordAdminServiceAddKeyword>) service
{
self = [super init];
if (!self) {
  return nil;
}
mService = [service retain_stub];
mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
{
  SEL s = @selector(process_addKeyword_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"addKeyword"];
}
return self;
}

- (id<IKeywordAdminServiceAddKeyword>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_addKeyword_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
addKeyword_args * args = [[addKeyword_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
AddKeyword_result * result = [[AddKeyword_result alloc] init];
[result setSuccess: [mService addKeyword: [args params]]];
[outProtocol writeMessageBeginWithName: @"addKeyword"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) dealloc
{
[mService release_stub];
[mMethodMap release_stub];
[super dealloc_stub];
}

@end

@interface updateKeyword_args : NSObject <TBase, NSCoding> {
NSString * __params;

BOOL __params_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=params, setter=setParams:) NSString * params;
#endif

- (id) init;
- (id) initWithParams: (NSString *) params;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) params;
- (void) setParams: (NSString *) params;
#endif
- (BOOL) paramsIsSet;

@end

@implementation updateKeyword_args

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithParams: (NSString *) params
{
self = [super init];
__params = [params retain_stub];
__params_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"params"])
{
__params = [[decoder decodeObjectForKey: @"params"] retain_stub];
__params_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__params_isset)
{
[encoder encodeObject: __params forKey: @"params"];
}
}

- (void) dealloc
{
[__params release_stub];
[super dealloc_stub];
}

- (NSString *) params {
return [[__params retain_stub] autorelease_stub];
}

- (void) setParams: (NSString *) params {
[params retain_stub];
[__params release_stub];
__params = params;
__params_isset = YES;
}

- (BOOL) paramsIsSet {
return __params_isset;
}

- (void) unsetParams {
[__params release_stub];
__params = nil;
__params_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
  break;
}
switch (fieldID)
{
  case 1:
    if (fieldType == TType_STRING) {
      NSString * fieldValue = [inProtocol readString];
      [self setParams: fieldValue];
    } else { 
      [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
    }
    break;
  default:
    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
    break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"updateKeyword_args"];
if (__params_isset) {
if (__params != nil) {
  [outProtocol writeFieldBeginWithName: @"params" type: TType_STRING fieldID: 1];
  [outProtocol writeString: __params];
  [outProtocol writeFieldEnd];
}
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"updateKeyword_args("];
[ms appendString: @"params:"];
[ms appendFormat: @"\"%@\"", __params];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@interface UpdateKeyword_result : NSObject <TBase, NSCoding> {
NSString * __success;

BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSString * success;
#endif

- (id) init;
- (id) initWithSuccess: (NSString *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) success;
- (void) setSuccess: (NSString *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation UpdateKeyword_result

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithSuccess: (NSString *) success
{
self = [super init];
__success = [success retain_stub];
__success_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"success"])
{
__success = [[decoder decodeObjectForKey: @"success"] retain_stub];
__success_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__success_isset)
{
[encoder encodeObject: __success forKey: @"success"];
}
}

- (void) dealloc
{
[__success release_stub];
[super dealloc_stub];
}

- (NSString *) success {
return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSString *) success {
[success retain_stub];
[__success release_stub];
__success = success;
__success_isset = YES;
}

- (BOOL) successIsSet {
return __success_isset;
}

- (void) unsetSuccess {
[__success release_stub];
__success = nil;
__success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
  break;
}
switch (fieldID)
{
  case 0:
    if (fieldType == TType_STRING) {
      NSString * fieldValue = [inProtocol readString];
      [self setSuccess: fieldValue];
    } else { 
      [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
    }
    break;
  default:
    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
    break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"UpdateKeyword_result"];

if (__success_isset) {
if (__success != nil) {
  [outProtocol writeFieldBeginWithName: @"success" type: TType_STRING fieldID: 0];
  [outProtocol writeString: __success];
  [outProtocol writeFieldEnd];
}
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"UpdateKeyword_result("];
[ms appendString: @"success:"];
[ms appendFormat: @"\"%@\"", __success];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@implementation IKeywordAdminServiceUpdateKeywordClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
self = [super init];
inProtocol = [anInProtocol retain_stub];
outProtocol = [anOutProtocol retain_stub];
return self;
}

- (void) dealloc
{
[inProtocol release_stub];
[outProtocol release_stub];
[super dealloc_stub];
}

- (void) send_updateKeyword: (NSString *) params
{
[outProtocol writeMessageBeginWithName: @"updateKeyword" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"updateKeyword_args"];
if (params != nil){
[outProtocol writeFieldBeginWithName: @"params" type: TType_STRING fieldID: 1];
[outProtocol writeString: params];
[outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
}

- (NSString *) recv_updateKeyword
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
UpdateKeyword_result * result = [[[UpdateKeyword_result alloc] init] autorelease_stub];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"updateKeyword failed: unknown result"];
}

- (NSString *) updateKeyword: (NSString *) params
{
[self send_updateKeyword : params];
return [self recv_updateKeyword];
}

@end

@implementation IKeywordAdminServiceUpdateKeywordProcessor

- (id) initWithIKeywordAdminServiceUpdateKeyword: (id <IKeywordAdminServiceUpdateKeyword>) service
{
self = [super init];
if (!self) {
  return nil;
}
mService = [service retain_stub];
mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
{
SEL s = @selector(process_updateKeyword_withSequenceID:inProtocol:outProtocol:);
NSMethodSignature * sig = [self methodSignatureForSelector: s];
NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
[invocation setSelector: s];
[invocation retainArguments];
[mMethodMap setValue: invocation forKey: @"updateKeyword"];
}
return self;
}

- (id<IKeywordAdminServiceUpdateKeyword>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_updateKeyword_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
updateKeyword_args * args = [[updateKeyword_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
UpdateKeyword_result * result = [[UpdateKeyword_result alloc] init];
[result setSuccess: [mService updateKeyword: [args params]]];
[outProtocol writeMessageBeginWithName: @"updateKeyword"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) dealloc
{
[mService release_stub];
[mMethodMap release_stub];
[super dealloc_stub];
}

@end

@interface updateKeywordStatus_args : NSObject <TBase, NSCoding> {
NSString * __params;

BOOL __params_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=params, setter=setParams:) NSString * params;
#endif

- (id) init;
- (id) initWithParams: (NSString *) params;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) params;
- (void) setParams: (NSString *) params;
#endif
- (BOOL) paramsIsSet;

@end

@implementation updateKeywordStatus_args

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithParams: (NSString *) params
{
self = [super init];
__params = [params retain_stub];
__params_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"params"])
{
__params = [[decoder decodeObjectForKey: @"params"] retain_stub];
__params_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__params_isset)
{
[encoder encodeObject: __params forKey: @"params"];
}
}

- (void) dealloc
{
[__params release_stub];
[super dealloc_stub];
}

- (NSString *) params {
return [[__params retain_stub] autorelease_stub];
}

- (void) setParams: (NSString *) params {
[params retain_stub];
[__params release_stub];
__params = params;
__params_isset = YES;
}

- (BOOL) paramsIsSet {
return __params_isset;
}

- (void) unsetParams {
[__params release_stub];
__params = nil;
__params_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 1:
  if (fieldType == TType_STRING) {
    NSString * fieldValue = [inProtocol readString];
    [self setParams: fieldValue];
  } else { 
    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  }
  break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"updateKeywordStatus_args"];
if (__params_isset) {
if (__params != nil) {
[outProtocol writeFieldBeginWithName: @"params" type: TType_STRING fieldID: 1];
[outProtocol writeString: __params];
[outProtocol writeFieldEnd];
}
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"updateKeywordStatus_args("];
[ms appendString: @"params:"];
[ms appendFormat: @"\"%@\"", __params];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@interface UpdateKeywordStatus_result : NSObject <TBase, NSCoding> {
NSString * __success;

BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSString * success;
#endif

- (id) init;
- (id) initWithSuccess: (NSString *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) success;
- (void) setSuccess: (NSString *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation UpdateKeywordStatus_result

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithSuccess: (NSString *) success
{
self = [super init];
__success = [success retain_stub];
__success_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"success"])
{
__success = [[decoder decodeObjectForKey: @"success"] retain_stub];
__success_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__success_isset)
{
[encoder encodeObject: __success forKey: @"success"];
}
}

- (void) dealloc
{
[__success release_stub];
[super dealloc_stub];
}

- (NSString *) success {
return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSString *) success {
[success retain_stub];
[__success release_stub];
__success = success;
__success_isset = YES;
}

- (BOOL) successIsSet {
return __success_isset;
}

- (void) unsetSuccess {
[__success release_stub];
__success = nil;
__success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 0:
  if (fieldType == TType_STRING) {
    NSString * fieldValue = [inProtocol readString];
    [self setSuccess: fieldValue];
  } else { 
    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  }
  break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"UpdateKeywordStatus_result"];

if (__success_isset) {
if (__success != nil) {
[outProtocol writeFieldBeginWithName: @"success" type: TType_STRING fieldID: 0];
[outProtocol writeString: __success];
[outProtocol writeFieldEnd];
}
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"UpdateKeywordStatus_result("];
[ms appendString: @"success:"];
[ms appendFormat: @"\"%@\"", __success];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@implementation IKeywordAdminServiceUpdateKeywordStatusClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
self = [super init];
inProtocol = [anInProtocol retain_stub];
outProtocol = [anOutProtocol retain_stub];
return self;
}

- (void) dealloc
{
[inProtocol release_stub];
[outProtocol release_stub];
[super dealloc_stub];
}

- (void) send_updateKeywordStatus: (NSString *) params
{
[outProtocol writeMessageBeginWithName: @"updateKeywordStatus" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"updateKeywordStatus_args"];
if (params != nil){
[outProtocol writeFieldBeginWithName: @"params" type: TType_STRING fieldID: 1];
[outProtocol writeString: params];
[outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
}

- (NSString *) recv_updateKeywordStatus
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
UpdateKeywordStatus_result * result = [[[UpdateKeywordStatus_result alloc] init] autorelease_stub];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"updateKeywordStatus failed: unknown result"];
}

- (NSString *) updateKeywordStatus: (NSString *) params
{
[self send_updateKeywordStatus : params];
return [self recv_updateKeywordStatus];
}

@end

@implementation IKeywordAdminServiceUpdateKeywordStatusProcessor

- (id) initWithIKeywordAdminServiceUpdateKeywordStatus: (id <IKeywordAdminServiceUpdateKeywordStatus>) service
{
self = [super init];
if (!self) {
  return nil;
}
mService = [service retain_stub];
mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
{
SEL s = @selector(process_updateKeywordStatus_withSequenceID:inProtocol:outProtocol:);
NSMethodSignature * sig = [self methodSignatureForSelector: s];
NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
[invocation setSelector: s];
[invocation retainArguments];
[mMethodMap setValue: invocation forKey: @"updateKeywordStatus"];
}
return self;
}

- (id<IKeywordAdminServiceUpdateKeywordStatus>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_updateKeywordStatus_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
updateKeywordStatus_args * args = [[updateKeywordStatus_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
UpdateKeywordStatus_result * result = [[UpdateKeywordStatus_result alloc] init];
[result setSuccess: [mService updateKeywordStatus: [args params]]];
[outProtocol writeMessageBeginWithName: @"updateKeywordStatus"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) dealloc
{
[mService release_stub];
[mMethodMap release_stub];
[super dealloc_stub];
}

@end

@interface deleteKeyword_args : NSObject <TBase, NSCoding> {
NSString * __params;

BOOL __params_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=params, setter=setParams:) NSString * params;
#endif

- (id) init;
- (id) initWithParams: (NSString *) params;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) params;
- (void) setParams: (NSString *) params;
#endif
- (BOOL) paramsIsSet;

@end

@implementation deleteKeyword_args

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithParams: (NSString *) params
{
self = [super init];
__params = [params retain_stub];
__params_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"params"])
{
__params = [[decoder decodeObjectForKey: @"params"] retain_stub];
__params_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__params_isset)
{
[encoder encodeObject: __params forKey: @"params"];
}
}

- (void) dealloc
{
[__params release_stub];
[super dealloc_stub];
}

- (NSString *) params {
return [[__params retain_stub] autorelease_stub];
}

- (void) setParams: (NSString *) params {
[params retain_stub];
[__params release_stub];
__params = params;
__params_isset = YES;
}

- (BOOL) paramsIsSet {
return __params_isset;
}

- (void) unsetParams {
[__params release_stub];
__params = nil;
__params_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 1:
if (fieldType == TType_STRING) {
  NSString * fieldValue = [inProtocol readString];
  [self setParams: fieldValue];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"deleteKeyword_args"];
if (__params_isset) {
if (__params != nil) {
[outProtocol writeFieldBeginWithName: @"params" type: TType_STRING fieldID: 1];
[outProtocol writeString: __params];
[outProtocol writeFieldEnd];
}
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"deleteKeyword_args("];
[ms appendString: @"params:"];
[ms appendFormat: @"\"%@\"", __params];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@interface DeleteKeyword_result : NSObject <TBase, NSCoding> {
NSString * __success;

BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSString * success;
#endif

- (id) init;
- (id) initWithSuccess: (NSString *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) success;
- (void) setSuccess: (NSString *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation DeleteKeyword_result

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithSuccess: (NSString *) success
{
self = [super init];
__success = [success retain_stub];
__success_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"success"])
{
__success = [[decoder decodeObjectForKey: @"success"] retain_stub];
__success_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__success_isset)
{
[encoder encodeObject: __success forKey: @"success"];
}
}

- (void) dealloc
{
[__success release_stub];
[super dealloc_stub];
}

- (NSString *) success {
return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSString *) success {
[success retain_stub];
[__success release_stub];
__success = success;
__success_isset = YES;
}

- (BOOL) successIsSet {
return __success_isset;
}

- (void) unsetSuccess {
[__success release_stub];
__success = nil;
__success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 0:
if (fieldType == TType_STRING) {
  NSString * fieldValue = [inProtocol readString];
  [self setSuccess: fieldValue];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"DeleteKeyword_result"];

if (__success_isset) {
if (__success != nil) {
[outProtocol writeFieldBeginWithName: @"success" type: TType_STRING fieldID: 0];
[outProtocol writeString: __success];
[outProtocol writeFieldEnd];
}
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"DeleteKeyword_result("];
[ms appendString: @"success:"];
[ms appendFormat: @"\"%@\"", __success];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@implementation IKeywordAdminServiceDeleteKeywordClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
self = [super init];
inProtocol = [anInProtocol retain_stub];
outProtocol = [anOutProtocol retain_stub];
return self;
}

- (void) dealloc
{
[inProtocol release_stub];
[outProtocol release_stub];
[super dealloc_stub];
}

- (void) send_deleteKeyword: (NSString *) params
{
[outProtocol writeMessageBeginWithName: @"deleteKeyword" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"deleteKeyword_args"];
if (params != nil){
[outProtocol writeFieldBeginWithName: @"params" type: TType_STRING fieldID: 1];
[outProtocol writeString: params];
[outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
}

- (NSString *) recv_deleteKeyword
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
DeleteKeyword_result * result = [[[DeleteKeyword_result alloc] init] autorelease_stub];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"deleteKeyword failed: unknown result"];
}

- (NSString *) deleteKeyword: (NSString *) params
{
[self send_deleteKeyword : params];
return [self recv_deleteKeyword];
}

@end

@implementation IKeywordAdminServiceDeleteKeywordProcessor

- (id) initWithIKeywordAdminServiceDeleteKeyword: (id <IKeywordAdminServiceDeleteKeyword>) service
{
self = [super init];
if (!self) {
  return nil;
}
mService = [service retain_stub];
mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
{
SEL s = @selector(process_deleteKeyword_withSequenceID:inProtocol:outProtocol:);
NSMethodSignature * sig = [self methodSignatureForSelector: s];
NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
[invocation setSelector: s];
[invocation retainArguments];
[mMethodMap setValue: invocation forKey: @"deleteKeyword"];
}
return self;
}

- (id<IKeywordAdminServiceDeleteKeyword>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_deleteKeyword_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
deleteKeyword_args * args = [[deleteKeyword_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
DeleteKeyword_result * result = [[DeleteKeyword_result alloc] init];
[result setSuccess: [mService deleteKeyword: [args params]]];
[outProtocol writeMessageBeginWithName: @"deleteKeyword"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) dealloc
{
[mService release_stub];
[mMethodMap release_stub];
[super dealloc_stub];
}

@end

@interface deleteKeywordBatch_args : NSObject <TBase, NSCoding> {
NSString * __params;

BOOL __params_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=params, setter=setParams:) NSString * params;
#endif

- (id) init;
- (id) initWithParams: (NSString *) params;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) params;
- (void) setParams: (NSString *) params;
#endif
- (BOOL) paramsIsSet;

@end

@implementation deleteKeywordBatch_args

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithParams: (NSString *) params
{
self = [super init];
__params = [params retain_stub];
__params_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"params"])
{
__params = [[decoder decodeObjectForKey: @"params"] retain_stub];
__params_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__params_isset)
{
[encoder encodeObject: __params forKey: @"params"];
}
}

- (void) dealloc
{
[__params release_stub];
[super dealloc_stub];
}

- (NSString *) params {
return [[__params retain_stub] autorelease_stub];
}

- (void) setParams: (NSString *) params {
[params retain_stub];
[__params release_stub];
__params = params;
__params_isset = YES;
}

- (BOOL) paramsIsSet {
return __params_isset;
}

- (void) unsetParams {
[__params release_stub];
__params = nil;
__params_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 1:
if (fieldType == TType_STRING) {
NSString * fieldValue = [inProtocol readString];
[self setParams: fieldValue];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"deleteKeywordBatch_args"];
if (__params_isset) {
if (__params != nil) {
[outProtocol writeFieldBeginWithName: @"params" type: TType_STRING fieldID: 1];
[outProtocol writeString: __params];
[outProtocol writeFieldEnd];
}
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"deleteKeywordBatch_args("];
[ms appendString: @"params:"];
[ms appendFormat: @"\"%@\"", __params];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@interface DeleteKeywordBatch_result : NSObject <TBase, NSCoding> {
NSString * __success;

BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSString * success;
#endif

- (id) init;
- (id) initWithSuccess: (NSString *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) success;
- (void) setSuccess: (NSString *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation DeleteKeywordBatch_result

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithSuccess: (NSString *) success
{
self = [super init];
__success = [success retain_stub];
__success_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"success"])
{
__success = [[decoder decodeObjectForKey: @"success"] retain_stub];
__success_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__success_isset)
{
[encoder encodeObject: __success forKey: @"success"];
}
}

- (void) dealloc
{
[__success release_stub];
[super dealloc_stub];
}

- (NSString *) success {
return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSString *) success {
[success retain_stub];
[__success release_stub];
__success = success;
__success_isset = YES;
}

- (BOOL) successIsSet {
return __success_isset;
}

- (void) unsetSuccess {
[__success release_stub];
__success = nil;
__success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 0:
if (fieldType == TType_STRING) {
NSString * fieldValue = [inProtocol readString];
[self setSuccess: fieldValue];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"DeleteKeywordBatch_result"];

if (__success_isset) {
if (__success != nil) {
[outProtocol writeFieldBeginWithName: @"success" type: TType_STRING fieldID: 0];
[outProtocol writeString: __success];
[outProtocol writeFieldEnd];
}
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"DeleteKeywordBatch_result("];
[ms appendString: @"success:"];
[ms appendFormat: @"\"%@\"", __success];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@implementation IKeywordAdminServiceDeleteKeywordBatchClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
self = [super init];
inProtocol = [anInProtocol retain_stub];
outProtocol = [anOutProtocol retain_stub];
return self;
}

- (void) dealloc
{
[inProtocol release_stub];
[outProtocol release_stub];
[super dealloc_stub];
}

- (void) send_deleteKeywordBatch: (NSString *) params
{
[outProtocol writeMessageBeginWithName: @"deleteKeywordBatch" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"deleteKeywordBatch_args"];
if (params != nil){
[outProtocol writeFieldBeginWithName: @"params" type: TType_STRING fieldID: 1];
[outProtocol writeString: params];
[outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
}

- (NSString *) recv_deleteKeywordBatch
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
DeleteKeywordBatch_result * result = [[[DeleteKeywordBatch_result alloc] init] autorelease_stub];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"deleteKeywordBatch failed: unknown result"];
}

- (NSString *) deleteKeywordBatch: (NSString *) params
{
[self send_deleteKeywordBatch : params];
return [self recv_deleteKeywordBatch];
}

@end

@implementation IKeywordAdminServiceDeleteKeywordBatchProcessor

- (id) initWithIKeywordAdminServiceDeleteKeywordBatch: (id <IKeywordAdminServiceDeleteKeywordBatch>) service
{
self = [super init];
if (!self) {
  return nil;
}
mService = [service retain_stub];
mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
{
SEL s = @selector(process_deleteKeywordBatch_withSequenceID:inProtocol:outProtocol:);
NSMethodSignature * sig = [self methodSignatureForSelector: s];
NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
[invocation setSelector: s];
[invocation retainArguments];
[mMethodMap setValue: invocation forKey: @"deleteKeywordBatch"];
}
return self;
}

- (id<IKeywordAdminServiceDeleteKeywordBatch>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_deleteKeywordBatch_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
deleteKeywordBatch_args * args = [[deleteKeywordBatch_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
DeleteKeywordBatch_result * result = [[DeleteKeywordBatch_result alloc] init];
[result setSuccess: [mService deleteKeywordBatch: [args params]]];
[outProtocol writeMessageBeginWithName: @"deleteKeywordBatch"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) dealloc
{
[mService release_stub];
[mMethodMap release_stub];
[super dealloc_stub];
}

@end

@interface getKeywordById_args : NSObject <TBase, NSCoding> {
NSString * __params;

BOOL __params_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=params, setter=setParams:) NSString * params;
#endif

- (id) init;
- (id) initWithParams: (NSString *) params;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) params;
- (void) setParams: (NSString *) params;
#endif
- (BOOL) paramsIsSet;

@end

@implementation getKeywordById_args

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithParams: (NSString *) params
{
self = [super init];
__params = [params retain_stub];
__params_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"params"])
{
__params = [[decoder decodeObjectForKey: @"params"] retain_stub];
__params_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__params_isset)
{
[encoder encodeObject: __params forKey: @"params"];
}
}

- (void) dealloc
{
[__params release_stub];
[super dealloc_stub];
}

- (NSString *) params {
return [[__params retain_stub] autorelease_stub];
}

- (void) setParams: (NSString *) params {
[params retain_stub];
[__params release_stub];
__params = params;
__params_isset = YES;
}

- (BOOL) paramsIsSet {
return __params_isset;
}

- (void) unsetParams {
[__params release_stub];
__params = nil;
__params_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 1:
if (fieldType == TType_STRING) {
NSString * fieldValue = [inProtocol readString];
[self setParams: fieldValue];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"getKeywordById_args"];
if (__params_isset) {
if (__params != nil) {
[outProtocol writeFieldBeginWithName: @"params" type: TType_STRING fieldID: 1];
[outProtocol writeString: __params];
[outProtocol writeFieldEnd];
}
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"getKeywordById_args("];
[ms appendString: @"params:"];
[ms appendFormat: @"\"%@\"", __params];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@interface GetKeywordById_result : NSObject <TBase, NSCoding> {
NSString * __success;

BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSString * success;
#endif

- (id) init;
- (id) initWithSuccess: (NSString *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) success;
- (void) setSuccess: (NSString *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation GetKeywordById_result

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithSuccess: (NSString *) success
{
self = [super init];
__success = [success retain_stub];
__success_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"success"])
{
__success = [[decoder decodeObjectForKey: @"success"] retain_stub];
__success_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__success_isset)
{
[encoder encodeObject: __success forKey: @"success"];
}
}

- (void) dealloc
{
[__success release_stub];
[super dealloc_stub];
}

- (NSString *) success {
return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSString *) success {
[success retain_stub];
[__success release_stub];
__success = success;
__success_isset = YES;
}

- (BOOL) successIsSet {
return __success_isset;
}

- (void) unsetSuccess {
[__success release_stub];
__success = nil;
__success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 0:
if (fieldType == TType_STRING) {
NSString * fieldValue = [inProtocol readString];
[self setSuccess: fieldValue];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"GetKeywordById_result"];

if (__success_isset) {
if (__success != nil) {
[outProtocol writeFieldBeginWithName: @"success" type: TType_STRING fieldID: 0];
[outProtocol writeString: __success];
[outProtocol writeFieldEnd];
}
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"GetKeywordById_result("];
[ms appendString: @"success:"];
[ms appendFormat: @"\"%@\"", __success];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@implementation IKeywordAdminServiceGetKeywordByIdClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
self = [super init];
inProtocol = [anInProtocol retain_stub];
outProtocol = [anOutProtocol retain_stub];
return self;
}

- (void) dealloc
{
[inProtocol release_stub];
[outProtocol release_stub];
[super dealloc_stub];
}

- (void) send_getKeywordById: (NSString *) params
{
[outProtocol writeMessageBeginWithName: @"getKeywordById" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"getKeywordById_args"];
if (params != nil){
[outProtocol writeFieldBeginWithName: @"params" type: TType_STRING fieldID: 1];
[outProtocol writeString: params];
[outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
}

- (NSString *) recv_getKeywordById
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
GetKeywordById_result * result = [[[GetKeywordById_result alloc] init] autorelease_stub];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"getKeywordById failed: unknown result"];
}

- (NSString *) getKeywordById: (NSString *) params
{
[self send_getKeywordById : params];
return [self recv_getKeywordById];
}

@end

@implementation IKeywordAdminServiceGetKeywordByIdProcessor

- (id) initWithIKeywordAdminServiceGetKeywordById: (id <IKeywordAdminServiceGetKeywordById>) service
{
self = [super init];
if (!self) {
  return nil;
}
mService = [service retain_stub];
mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
{
SEL s = @selector(process_getKeywordById_withSequenceID:inProtocol:outProtocol:);
NSMethodSignature * sig = [self methodSignatureForSelector: s];
NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
[invocation setSelector: s];
[invocation retainArguments];
[mMethodMap setValue: invocation forKey: @"getKeywordById"];
}
return self;
}

- (id<IKeywordAdminServiceGetKeywordById>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_getKeywordById_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
getKeywordById_args * args = [[getKeywordById_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
GetKeywordById_result * result = [[GetKeywordById_result alloc] init];
[result setSuccess: [mService getKeywordById: [args params]]];
[outProtocol writeMessageBeginWithName: @"getKeywordById"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) dealloc
{
[mService release_stub];
[mMethodMap release_stub];
[super dealloc_stub];
}

@end

@interface importKeyword_args : NSObject <TBase, NSCoding> {
NSString * __params;

BOOL __params_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=params, setter=setParams:) NSString * params;
#endif

- (id) init;
- (id) initWithParams: (NSString *) params;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) params;
- (void) setParams: (NSString *) params;
#endif
- (BOOL) paramsIsSet;

@end

@implementation importKeyword_args

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithParams: (NSString *) params
{
self = [super init];
__params = [params retain_stub];
__params_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"params"])
{
__params = [[decoder decodeObjectForKey: @"params"] retain_stub];
__params_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__params_isset)
{
[encoder encodeObject: __params forKey: @"params"];
}
}

- (void) dealloc
{
[__params release_stub];
[super dealloc_stub];
}

- (NSString *) params {
return [[__params retain_stub] autorelease_stub];
}

- (void) setParams: (NSString *) params {
[params retain_stub];
[__params release_stub];
__params = params;
__params_isset = YES;
}

- (BOOL) paramsIsSet {
return __params_isset;
}

- (void) unsetParams {
[__params release_stub];
__params = nil;
__params_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 1:
if (fieldType == TType_STRING) {
NSString * fieldValue = [inProtocol readString];
[self setParams: fieldValue];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"importKeyword_args"];
if (__params_isset) {
if (__params != nil) {
[outProtocol writeFieldBeginWithName: @"params" type: TType_STRING fieldID: 1];
[outProtocol writeString: __params];
[outProtocol writeFieldEnd];
}
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"importKeyword_args("];
[ms appendString: @"params:"];
[ms appendFormat: @"\"%@\"", __params];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@interface ImportKeyword_result : NSObject <TBase, NSCoding> {
NSString * __success;

BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSString * success;
#endif

- (id) init;
- (id) initWithSuccess: (NSString *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) success;
- (void) setSuccess: (NSString *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation ImportKeyword_result

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithSuccess: (NSString *) success
{
self = [super init];
__success = [success retain_stub];
__success_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"success"])
{
__success = [[decoder decodeObjectForKey: @"success"] retain_stub];
__success_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__success_isset)
{
[encoder encodeObject: __success forKey: @"success"];
}
}

- (void) dealloc
{
[__success release_stub];
[super dealloc_stub];
}

- (NSString *) success {
return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSString *) success {
[success retain_stub];
[__success release_stub];
__success = success;
__success_isset = YES;
}

- (BOOL) successIsSet {
return __success_isset;
}

- (void) unsetSuccess {
[__success release_stub];
__success = nil;
__success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 0:
if (fieldType == TType_STRING) {
NSString * fieldValue = [inProtocol readString];
[self setSuccess: fieldValue];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"ImportKeyword_result"];

if (__success_isset) {
if (__success != nil) {
[outProtocol writeFieldBeginWithName: @"success" type: TType_STRING fieldID: 0];
[outProtocol writeString: __success];
[outProtocol writeFieldEnd];
}
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"ImportKeyword_result("];
[ms appendString: @"success:"];
[ms appendFormat: @"\"%@\"", __success];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@implementation IKeywordAdminServiceImportKeywordClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
self = [super init];
inProtocol = [anInProtocol retain_stub];
outProtocol = [anOutProtocol retain_stub];
return self;
}

- (void) dealloc
{
[inProtocol release_stub];
[outProtocol release_stub];
[super dealloc_stub];
}

- (void) send_importKeyword: (NSString *) params
{
[outProtocol writeMessageBeginWithName: @"importKeyword" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"importKeyword_args"];
if (params != nil){
[outProtocol writeFieldBeginWithName: @"params" type: TType_STRING fieldID: 1];
[outProtocol writeString: params];
[outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
}

- (NSString *) recv_importKeyword
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
ImportKeyword_result * result = [[[ImportKeyword_result alloc] init] autorelease_stub];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"importKeyword failed: unknown result"];
}

- (NSString *) importKeyword: (NSString *) params
{
[self send_importKeyword : params];
return [self recv_importKeyword];
}

@end

@implementation IKeywordAdminServiceImportKeywordProcessor

- (id) initWithIKeywordAdminServiceImportKeyword: (id <IKeywordAdminServiceImportKeyword>) service
{
self = [super init];
if (!self) {
  return nil;
}
mService = [service retain_stub];
mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
{
SEL s = @selector(process_importKeyword_withSequenceID:inProtocol:outProtocol:);
NSMethodSignature * sig = [self methodSignatureForSelector: s];
NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
[invocation setSelector: s];
[invocation retainArguments];
[mMethodMap setValue: invocation forKey: @"importKeyword"];
}
return self;
}

- (id<IKeywordAdminServiceImportKeyword>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_importKeyword_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
importKeyword_args * args = [[importKeyword_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
ImportKeyword_result * result = [[ImportKeyword_result alloc] init];
[result setSuccess: [mService importKeyword: [args params]]];
[outProtocol writeMessageBeginWithName: @"importKeyword"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) dealloc
{
[mService release_stub];
[mMethodMap release_stub];
[super dealloc_stub];
}

@end

