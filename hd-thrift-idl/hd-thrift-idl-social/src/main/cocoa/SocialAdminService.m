/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TObjective-C.h"
#import "TBase.h"

#import "TAdminLabel.h"
#import "TAdminLabelQueryData.h"
#import "TAdminPost.h"
#import "TAdminActivityApply.h"
#import "TAdminComment.h"
#import "TAdminCommentQueryData.h"
#import "TAdminReason.h"
#import "TAdminCityPost.h"
#import "TAdminPostQueryData.h"
#import "TAdminPostInform.h"

#import "SocialAdminService.h"


@implementation SocialAdminServiceConstants
+ (void) initialize {
}
@end

@interface getAdminLabelList_args : NSObject <TBase, NSCoding> {
  NSString * __params;

  BOOL __params_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=params, setter=setParams:) NSString * params;
#endif

- (id) init;
- (id) initWithParams: (NSString *) params;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) params;
- (void) setParams: (NSString *) params;
#endif
- (BOOL) paramsIsSet;

@end

@implementation getAdminLabelList_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithParams: (NSString *) params
{
  self = [super init];
  __params = [params retain_stub];
  __params_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"params"])
  {
    __params = [[decoder decodeObjectForKey: @"params"] retain_stub];
    __params_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__params_isset)
  {
    [encoder encodeObject: __params forKey: @"params"];
  }
}

- (void) dealloc
{
  [__params release_stub];
  [super dealloc_stub];
}

- (NSString *) params {
  return [[__params retain_stub] autorelease_stub];
}

- (void) setParams: (NSString *) params {
  [params retain_stub];
  [__params release_stub];
  __params = params;
  __params_isset = YES;
}

- (BOOL) paramsIsSet {
  return __params_isset;
}

- (void) unsetParams {
  [__params release_stub];
  __params = nil;
  __params_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setParams: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getAdminLabelList_args"];
  if (__params_isset) {
    if (__params != nil) {
      [outProtocol writeFieldBeginWithName: @"params" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __params];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getAdminLabelList_args("];
  [ms appendString: @"params:"];
  [ms appendFormat: @"\"%@\"", __params];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetAdminLabelList_result : NSObject <TBase, NSCoding> {
  TAdminLabelQueryData * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) TAdminLabelQueryData * success;
#endif

- (id) init;
- (id) initWithSuccess: (TAdminLabelQueryData *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (TAdminLabelQueryData *) success;
- (void) setSuccess: (TAdminLabelQueryData *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation GetAdminLabelList_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (TAdminLabelQueryData *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (TAdminLabelQueryData *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (TAdminLabelQueryData *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          TAdminLabelQueryData *fieldValue = [[TAdminLabelQueryData alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetAdminLabelList_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetAdminLabelList_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ISocialAdminServiceGetAdminLabelListClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
  return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
  self = [super init];
  inProtocol = [anInProtocol retain_stub];
  outProtocol = [anOutProtocol retain_stub];
  return self;
}

- (void) dealloc
{
  [inProtocol release_stub];
  [outProtocol release_stub];
  [super dealloc_stub];
}

- (void) send_getAdminLabelList: (NSString *) params
{
  [outProtocol writeMessageBeginWithName: @"getAdminLabelList" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getAdminLabelList_args"];
  if (params != nil)  {
    [outProtocol writeFieldBeginWithName: @"params" type: TType_STRING fieldID: 1];
    [outProtocol writeString: params];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (TAdminLabelQueryData *) recv_getAdminLabelList
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GetAdminLabelList_result * result = [[[GetAdminLabelList_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getAdminLabelList failed: unknown result"];
}

- (TAdminLabelQueryData *) getAdminLabelList: (NSString *) params
{
  [self send_getAdminLabelList : params];
  return [self recv_getAdminLabelList];
}

@end

@implementation ISocialAdminServiceGetAdminLabelListProcessor

- (id) initWithISocialAdminServiceGetAdminLabelList: (id <ISocialAdminServiceGetAdminLabelList>) service
{
  self = [super init];
  if (!self) {
    return nil;
  }
  mService = [service retain_stub];
  mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
  {
    SEL s = @selector(process_getAdminLabelList_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getAdminLabelList"];
  }
  return self;
}

- (id<ISocialAdminServiceGetAdminLabelList>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_getAdminLabelList_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  getAdminLabelList_args * args = [[getAdminLabelList_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GetAdminLabelList_result * result = [[GetAdminLabelList_result alloc] init];
  [result setSuccess: [mService getAdminLabelList: [args params]]];
  [outProtocol writeMessageBeginWithName: @"getAdminLabelList"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) dealloc
{
  [mService release_stub];
  [mMethodMap release_stub];
  [super dealloc_stub];
}

@end

@interface addAdminLabel_args : NSObject <TBase, NSCoding> {
TAdminLabel * __label;

BOOL __label_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=label, setter=setLabel:) TAdminLabel * label;
#endif

- (id) init;
- (id) initWithLabel: (TAdminLabel *) label;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (TAdminLabel *) label;
- (void) setLabel: (TAdminLabel *) label;
#endif
- (BOOL) labelIsSet;

@end

@implementation addAdminLabel_args

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithLabel: (TAdminLabel *) label
{
self = [super init];
__label = [label retain_stub];
__label_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"label"])
{
  __label = [[decoder decodeObjectForKey: @"label"] retain_stub];
  __label_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__label_isset)
{
  [encoder encodeObject: __label forKey: @"label"];
}
}

- (void) dealloc
{
[__label release_stub];
[super dealloc_stub];
}

- (TAdminLabel *) label {
return [[__label retain_stub] autorelease_stub];
}

- (void) setLabel: (TAdminLabel *) label {
[label retain_stub];
[__label release_stub];
__label = label;
__label_isset = YES;
}

- (BOOL) labelIsSet {
return __label_isset;
}

- (void) unsetLabel {
[__label release_stub];
__label = nil;
__label_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
  [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
  if (fieldType == TType_STOP) { 
    break;
  }
  switch (fieldID)
  {
    case 1:
      if (fieldType == TType_STRUCT) {
        TAdminLabel *fieldValue = [[TAdminLabel alloc] init];
        [fieldValue read: inProtocol];
        [self setLabel: fieldValue];
        [fieldValue release_stub];
      } else { 
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      }
      break;
    default:
      [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      break;
  }
  [inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"addAdminLabel_args"];
if (__label_isset) {
  if (__label != nil) {
    [outProtocol writeFieldBeginWithName: @"label" type: TType_STRUCT fieldID: 1];
    [__label write: outProtocol];
    [outProtocol writeFieldEnd];
  }
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"addAdminLabel_args("];
[ms appendString: @"label:"];
[ms appendFormat: @"%@", __label];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@interface AddAdminLabel_result : NSObject <TBase, NSCoding> {
BOOL __success;

BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) init;
- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BOOL) success;
- (void) setSuccess: (BOOL) success;
#endif
- (BOOL) successIsSet;

@end

@implementation AddAdminLabel_result

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithSuccess: (BOOL) success
{
self = [super init];
__success = success;
__success_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"success"])
{
  __success = [decoder decodeBoolForKey: @"success"];
  __success_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__success_isset)
{
  [encoder encodeBool: __success forKey: @"success"];
}
}

- (void) dealloc
{
[super dealloc_stub];
}

- (BOOL) success {
return __success;
}

- (void) setSuccess: (BOOL) success {
__success = success;
__success_isset = YES;
}

- (BOOL) successIsSet {
return __success_isset;
}

- (void) unsetSuccess {
__success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
  [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
  if (fieldType == TType_STOP) { 
    break;
  }
  switch (fieldID)
  {
    case 0:
      if (fieldType == TType_BOOL) {
        BOOL fieldValue = [inProtocol readBool];
        [self setSuccess: fieldValue];
      } else { 
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      }
      break;
    default:
      [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      break;
  }
  [inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"AddAdminLabel_result"];

if (__success_isset) {
  [outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
  [outProtocol writeBool: __success];
  [outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"AddAdminLabel_result("];
[ms appendString: @"success:"];
[ms appendFormat: @"%i", __success];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@implementation ISocialAdminServiceAddAdminLabelClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
self = [super init];
inProtocol = [anInProtocol retain_stub];
outProtocol = [anOutProtocol retain_stub];
return self;
}

- (void) dealloc
{
[inProtocol release_stub];
[outProtocol release_stub];
[super dealloc_stub];
}

- (void) send_addAdminLabel: (TAdminLabel *) label
{
[outProtocol writeMessageBeginWithName: @"addAdminLabel" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"addAdminLabel_args"];
if (label != nil){
  [outProtocol writeFieldBeginWithName: @"label" type: TType_STRUCT fieldID: 1];
  [label write: outProtocol];
  [outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
}

- (BOOL) recv_addAdminLabel
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
AddAdminLabel_result * result = [[[AddAdminLabel_result alloc] init] autorelease_stub];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"addAdminLabel failed: unknown result"];
}

- (BOOL) addAdminLabel: (TAdminLabel *) label
{
[self send_addAdminLabel : label];
return [self recv_addAdminLabel];
}

@end

@implementation ISocialAdminServiceAddAdminLabelProcessor

- (id) initWithISocialAdminServiceAddAdminLabel: (id <ISocialAdminServiceAddAdminLabel>) service
{
self = [super init];
if (!self) {
  return nil;
}
mService = [service retain_stub];
mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
{
  SEL s = @selector(process_addAdminLabel_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"addAdminLabel"];
}
return self;
}

- (id<ISocialAdminServiceAddAdminLabel>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_addAdminLabel_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
addAdminLabel_args * args = [[addAdminLabel_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
AddAdminLabel_result * result = [[AddAdminLabel_result alloc] init];
[result setSuccess: [mService addAdminLabel: [args label]]];
[outProtocol writeMessageBeginWithName: @"addAdminLabel"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) dealloc
{
[mService release_stub];
[mMethodMap release_stub];
[super dealloc_stub];
}

@end

@interface editAdminLabel_args : NSObject <TBase, NSCoding> {
TAdminLabel * __label;

BOOL __label_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=label, setter=setLabel:) TAdminLabel * label;
#endif

- (id) init;
- (id) initWithLabel: (TAdminLabel *) label;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (TAdminLabel *) label;
- (void) setLabel: (TAdminLabel *) label;
#endif
- (BOOL) labelIsSet;

@end

@implementation editAdminLabel_args

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithLabel: (TAdminLabel *) label
{
self = [super init];
__label = [label retain_stub];
__label_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"label"])
{
__label = [[decoder decodeObjectForKey: @"label"] retain_stub];
__label_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__label_isset)
{
[encoder encodeObject: __label forKey: @"label"];
}
}

- (void) dealloc
{
[__label release_stub];
[super dealloc_stub];
}

- (TAdminLabel *) label {
return [[__label retain_stub] autorelease_stub];
}

- (void) setLabel: (TAdminLabel *) label {
[label retain_stub];
[__label release_stub];
__label = label;
__label_isset = YES;
}

- (BOOL) labelIsSet {
return __label_isset;
}

- (void) unsetLabel {
[__label release_stub];
__label = nil;
__label_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
  break;
}
switch (fieldID)
{
  case 1:
    if (fieldType == TType_STRUCT) {
      TAdminLabel *fieldValue = [[TAdminLabel alloc] init];
      [fieldValue read: inProtocol];
      [self setLabel: fieldValue];
      [fieldValue release_stub];
    } else { 
      [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
    }
    break;
  default:
    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
    break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"editAdminLabel_args"];
if (__label_isset) {
if (__label != nil) {
  [outProtocol writeFieldBeginWithName: @"label" type: TType_STRUCT fieldID: 1];
  [__label write: outProtocol];
  [outProtocol writeFieldEnd];
}
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"editAdminLabel_args("];
[ms appendString: @"label:"];
[ms appendFormat: @"%@", __label];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@interface EditAdminLabel_result : NSObject <TBase, NSCoding> {
BOOL __success;

BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) init;
- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BOOL) success;
- (void) setSuccess: (BOOL) success;
#endif
- (BOOL) successIsSet;

@end

@implementation EditAdminLabel_result

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithSuccess: (BOOL) success
{
self = [super init];
__success = success;
__success_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"success"])
{
__success = [decoder decodeBoolForKey: @"success"];
__success_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__success_isset)
{
[encoder encodeBool: __success forKey: @"success"];
}
}

- (void) dealloc
{
[super dealloc_stub];
}

- (BOOL) success {
return __success;
}

- (void) setSuccess: (BOOL) success {
__success = success;
__success_isset = YES;
}

- (BOOL) successIsSet {
return __success_isset;
}

- (void) unsetSuccess {
__success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
  break;
}
switch (fieldID)
{
  case 0:
    if (fieldType == TType_BOOL) {
      BOOL fieldValue = [inProtocol readBool];
      [self setSuccess: fieldValue];
    } else { 
      [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
    }
    break;
  default:
    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
    break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"EditAdminLabel_result"];

if (__success_isset) {
[outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
[outProtocol writeBool: __success];
[outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"EditAdminLabel_result("];
[ms appendString: @"success:"];
[ms appendFormat: @"%i", __success];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@implementation ISocialAdminServiceEditAdminLabelClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
self = [super init];
inProtocol = [anInProtocol retain_stub];
outProtocol = [anOutProtocol retain_stub];
return self;
}

- (void) dealloc
{
[inProtocol release_stub];
[outProtocol release_stub];
[super dealloc_stub];
}

- (void) send_editAdminLabel: (TAdminLabel *) label
{
[outProtocol writeMessageBeginWithName: @"editAdminLabel" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"editAdminLabel_args"];
if (label != nil){
[outProtocol writeFieldBeginWithName: @"label" type: TType_STRUCT fieldID: 1];
[label write: outProtocol];
[outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
}

- (BOOL) recv_editAdminLabel
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
EditAdminLabel_result * result = [[[EditAdminLabel_result alloc] init] autorelease_stub];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"editAdminLabel failed: unknown result"];
}

- (BOOL) editAdminLabel: (TAdminLabel *) label
{
[self send_editAdminLabel : label];
return [self recv_editAdminLabel];
}

@end

@implementation ISocialAdminServiceEditAdminLabelProcessor

- (id) initWithISocialAdminServiceEditAdminLabel: (id <ISocialAdminServiceEditAdminLabel>) service
{
self = [super init];
if (!self) {
  return nil;
}
mService = [service retain_stub];
mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
{
SEL s = @selector(process_editAdminLabel_withSequenceID:inProtocol:outProtocol:);
NSMethodSignature * sig = [self methodSignatureForSelector: s];
NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
[invocation setSelector: s];
[invocation retainArguments];
[mMethodMap setValue: invocation forKey: @"editAdminLabel"];
}
return self;
}

- (id<ISocialAdminServiceEditAdminLabel>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_editAdminLabel_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
editAdminLabel_args * args = [[editAdminLabel_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
EditAdminLabel_result * result = [[EditAdminLabel_result alloc] init];
[result setSuccess: [mService editAdminLabel: [args label]]];
[outProtocol writeMessageBeginWithName: @"editAdminLabel"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) dealloc
{
[mService release_stub];
[mMethodMap release_stub];
[super dealloc_stub];
}

@end

@interface getAdminLabelById_args : NSObject <TBase, NSCoding> {
int32_t __id;

BOOL __id_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=id, setter=setId:) int32_t id;
#endif

- (id) init;
- (id) initWithId: (int32_t) id;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (int32_t) id;
- (void) setId: (int32_t) id;
#endif
- (BOOL) idIsSet;

@end

@implementation getAdminLabelById_args

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithId: (int32_t) id
{
self = [super init];
__id = id;
__id_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"id"])
{
__id = [decoder decodeInt32ForKey: @"id"];
__id_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__id_isset)
{
[encoder encodeInt32: __id forKey: @"id"];
}
}

- (void) dealloc
{
[super dealloc_stub];
}

- (int32_t) id {
return __id;
}

- (void) setId: (int32_t) id {
__id = id;
__id_isset = YES;
}

- (BOOL) idIsSet {
return __id_isset;
}

- (void) unsetId {
__id_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 1:
  if (fieldType == TType_I32) {
    int32_t fieldValue = [inProtocol readI32];
    [self setId: fieldValue];
  } else { 
    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  }
  break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"getAdminLabelById_args"];
if (__id_isset) {
[outProtocol writeFieldBeginWithName: @"id" type: TType_I32 fieldID: 1];
[outProtocol writeI32: __id];
[outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"getAdminLabelById_args("];
[ms appendString: @"id:"];
[ms appendFormat: @"%i", __id];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@interface GetAdminLabelById_result : NSObject <TBase, NSCoding> {
TAdminLabel * __success;

BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) TAdminLabel * success;
#endif

- (id) init;
- (id) initWithSuccess: (TAdminLabel *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (TAdminLabel *) success;
- (void) setSuccess: (TAdminLabel *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation GetAdminLabelById_result

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithSuccess: (TAdminLabel *) success
{
self = [super init];
__success = [success retain_stub];
__success_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"success"])
{
__success = [[decoder decodeObjectForKey: @"success"] retain_stub];
__success_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__success_isset)
{
[encoder encodeObject: __success forKey: @"success"];
}
}

- (void) dealloc
{
[__success release_stub];
[super dealloc_stub];
}

- (TAdminLabel *) success {
return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (TAdminLabel *) success {
[success retain_stub];
[__success release_stub];
__success = success;
__success_isset = YES;
}

- (BOOL) successIsSet {
return __success_isset;
}

- (void) unsetSuccess {
[__success release_stub];
__success = nil;
__success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 0:
  if (fieldType == TType_STRUCT) {
    TAdminLabel *fieldValue = [[TAdminLabel alloc] init];
    [fieldValue read: inProtocol];
    [self setSuccess: fieldValue];
    [fieldValue release_stub];
  } else { 
    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  }
  break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"GetAdminLabelById_result"];

if (__success_isset) {
if (__success != nil) {
[outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
[__success write: outProtocol];
[outProtocol writeFieldEnd];
}
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"GetAdminLabelById_result("];
[ms appendString: @"success:"];
[ms appendFormat: @"%@", __success];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@implementation ISocialAdminServiceGetAdminLabelByIdClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
self = [super init];
inProtocol = [anInProtocol retain_stub];
outProtocol = [anOutProtocol retain_stub];
return self;
}

- (void) dealloc
{
[inProtocol release_stub];
[outProtocol release_stub];
[super dealloc_stub];
}

- (void) send_getAdminLabelById: (int32_t) id
{
[outProtocol writeMessageBeginWithName: @"getAdminLabelById" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"getAdminLabelById_args"];
[outProtocol writeFieldBeginWithName: @"id" type: TType_I32 fieldID: 1];
[outProtocol writeI32: id];
[outProtocol writeFieldEnd];
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
}

- (TAdminLabel *) recv_getAdminLabelById
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
GetAdminLabelById_result * result = [[[GetAdminLabelById_result alloc] init] autorelease_stub];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"getAdminLabelById failed: unknown result"];
}

- (TAdminLabel *) getAdminLabelById: (int32_t) id
{
[self send_getAdminLabelById : id];
return [self recv_getAdminLabelById];
}

@end

@implementation ISocialAdminServiceGetAdminLabelByIdProcessor

- (id) initWithISocialAdminServiceGetAdminLabelById: (id <ISocialAdminServiceGetAdminLabelById>) service
{
self = [super init];
if (!self) {
  return nil;
}
mService = [service retain_stub];
mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
{
SEL s = @selector(process_getAdminLabelById_withSequenceID:inProtocol:outProtocol:);
NSMethodSignature * sig = [self methodSignatureForSelector: s];
NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
[invocation setSelector: s];
[invocation retainArguments];
[mMethodMap setValue: invocation forKey: @"getAdminLabelById"];
}
return self;
}

- (id<ISocialAdminServiceGetAdminLabelById>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_getAdminLabelById_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
getAdminLabelById_args * args = [[getAdminLabelById_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
GetAdminLabelById_result * result = [[GetAdminLabelById_result alloc] init];
[result setSuccess: [mService getAdminLabelById: [args id]]];
[outProtocol writeMessageBeginWithName: @"getAdminLabelById"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) dealloc
{
[mService release_stub];
[mMethodMap release_stub];
[super dealloc_stub];
}

@end

@interface updateAdminLabelStatus_args : NSObject <TBase, NSCoding> {
TAdminLabel * __label;

BOOL __label_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=label, setter=setLabel:) TAdminLabel * label;
#endif

- (id) init;
- (id) initWithLabel: (TAdminLabel *) label;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (TAdminLabel *) label;
- (void) setLabel: (TAdminLabel *) label;
#endif
- (BOOL) labelIsSet;

@end

@implementation updateAdminLabelStatus_args

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithLabel: (TAdminLabel *) label
{
self = [super init];
__label = [label retain_stub];
__label_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"label"])
{
__label = [[decoder decodeObjectForKey: @"label"] retain_stub];
__label_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__label_isset)
{
[encoder encodeObject: __label forKey: @"label"];
}
}

- (void) dealloc
{
[__label release_stub];
[super dealloc_stub];
}

- (TAdminLabel *) label {
return [[__label retain_stub] autorelease_stub];
}

- (void) setLabel: (TAdminLabel *) label {
[label retain_stub];
[__label release_stub];
__label = label;
__label_isset = YES;
}

- (BOOL) labelIsSet {
return __label_isset;
}

- (void) unsetLabel {
[__label release_stub];
__label = nil;
__label_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 1:
if (fieldType == TType_STRUCT) {
  TAdminLabel *fieldValue = [[TAdminLabel alloc] init];
  [fieldValue read: inProtocol];
  [self setLabel: fieldValue];
  [fieldValue release_stub];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"updateAdminLabelStatus_args"];
if (__label_isset) {
if (__label != nil) {
[outProtocol writeFieldBeginWithName: @"label" type: TType_STRUCT fieldID: 1];
[__label write: outProtocol];
[outProtocol writeFieldEnd];
}
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"updateAdminLabelStatus_args("];
[ms appendString: @"label:"];
[ms appendFormat: @"%@", __label];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@interface UpdateAdminLabelStatus_result : NSObject <TBase, NSCoding> {
BOOL __success;

BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) init;
- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BOOL) success;
- (void) setSuccess: (BOOL) success;
#endif
- (BOOL) successIsSet;

@end

@implementation UpdateAdminLabelStatus_result

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithSuccess: (BOOL) success
{
self = [super init];
__success = success;
__success_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"success"])
{
__success = [decoder decodeBoolForKey: @"success"];
__success_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__success_isset)
{
[encoder encodeBool: __success forKey: @"success"];
}
}

- (void) dealloc
{
[super dealloc_stub];
}

- (BOOL) success {
return __success;
}

- (void) setSuccess: (BOOL) success {
__success = success;
__success_isset = YES;
}

- (BOOL) successIsSet {
return __success_isset;
}

- (void) unsetSuccess {
__success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 0:
if (fieldType == TType_BOOL) {
  BOOL fieldValue = [inProtocol readBool];
  [self setSuccess: fieldValue];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"UpdateAdminLabelStatus_result"];

if (__success_isset) {
[outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
[outProtocol writeBool: __success];
[outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"UpdateAdminLabelStatus_result("];
[ms appendString: @"success:"];
[ms appendFormat: @"%i", __success];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@implementation ISocialAdminServiceUpdateAdminLabelStatusClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
self = [super init];
inProtocol = [anInProtocol retain_stub];
outProtocol = [anOutProtocol retain_stub];
return self;
}

- (void) dealloc
{
[inProtocol release_stub];
[outProtocol release_stub];
[super dealloc_stub];
}

- (void) send_updateAdminLabelStatus: (TAdminLabel *) label
{
[outProtocol writeMessageBeginWithName: @"updateAdminLabelStatus" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"updateAdminLabelStatus_args"];
if (label != nil){
[outProtocol writeFieldBeginWithName: @"label" type: TType_STRUCT fieldID: 1];
[label write: outProtocol];
[outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
}

- (BOOL) recv_updateAdminLabelStatus
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
UpdateAdminLabelStatus_result * result = [[[UpdateAdminLabelStatus_result alloc] init] autorelease_stub];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"updateAdminLabelStatus failed: unknown result"];
}

- (BOOL) updateAdminLabelStatus: (TAdminLabel *) label
{
[self send_updateAdminLabelStatus : label];
return [self recv_updateAdminLabelStatus];
}

@end

@implementation ISocialAdminServiceUpdateAdminLabelStatusProcessor

- (id) initWithISocialAdminServiceUpdateAdminLabelStatus: (id <ISocialAdminServiceUpdateAdminLabelStatus>) service
{
self = [super init];
if (!self) {
  return nil;
}
mService = [service retain_stub];
mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
{
SEL s = @selector(process_updateAdminLabelStatus_withSequenceID:inProtocol:outProtocol:);
NSMethodSignature * sig = [self methodSignatureForSelector: s];
NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
[invocation setSelector: s];
[invocation retainArguments];
[mMethodMap setValue: invocation forKey: @"updateAdminLabelStatus"];
}
return self;
}

- (id<ISocialAdminServiceUpdateAdminLabelStatus>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_updateAdminLabelStatus_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
updateAdminLabelStatus_args * args = [[updateAdminLabelStatus_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
UpdateAdminLabelStatus_result * result = [[UpdateAdminLabelStatus_result alloc] init];
[result setSuccess: [mService updateAdminLabelStatus: [args label]]];
[outProtocol writeMessageBeginWithName: @"updateAdminLabelStatus"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) dealloc
{
[mService release_stub];
[mMethodMap release_stub];
[super dealloc_stub];
}

@end

@interface deleteAdminLabel_args : NSObject <TBase, NSCoding> {
int32_t __id;

BOOL __id_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=id, setter=setId:) int32_t id;
#endif

- (id) init;
- (id) initWithId: (int32_t) id;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (int32_t) id;
- (void) setId: (int32_t) id;
#endif
- (BOOL) idIsSet;

@end

@implementation deleteAdminLabel_args

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithId: (int32_t) id
{
self = [super init];
__id = id;
__id_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"id"])
{
__id = [decoder decodeInt32ForKey: @"id"];
__id_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__id_isset)
{
[encoder encodeInt32: __id forKey: @"id"];
}
}

- (void) dealloc
{
[super dealloc_stub];
}

- (int32_t) id {
return __id;
}

- (void) setId: (int32_t) id {
__id = id;
__id_isset = YES;
}

- (BOOL) idIsSet {
return __id_isset;
}

- (void) unsetId {
__id_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 1:
if (fieldType == TType_I32) {
int32_t fieldValue = [inProtocol readI32];
[self setId: fieldValue];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"deleteAdminLabel_args"];
if (__id_isset) {
[outProtocol writeFieldBeginWithName: @"id" type: TType_I32 fieldID: 1];
[outProtocol writeI32: __id];
[outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"deleteAdminLabel_args("];
[ms appendString: @"id:"];
[ms appendFormat: @"%i", __id];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@interface DeleteAdminLabel_result : NSObject <TBase, NSCoding> {
BOOL __success;

BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) init;
- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BOOL) success;
- (void) setSuccess: (BOOL) success;
#endif
- (BOOL) successIsSet;

@end

@implementation DeleteAdminLabel_result

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithSuccess: (BOOL) success
{
self = [super init];
__success = success;
__success_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"success"])
{
__success = [decoder decodeBoolForKey: @"success"];
__success_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__success_isset)
{
[encoder encodeBool: __success forKey: @"success"];
}
}

- (void) dealloc
{
[super dealloc_stub];
}

- (BOOL) success {
return __success;
}

- (void) setSuccess: (BOOL) success {
__success = success;
__success_isset = YES;
}

- (BOOL) successIsSet {
return __success_isset;
}

- (void) unsetSuccess {
__success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 0:
if (fieldType == TType_BOOL) {
BOOL fieldValue = [inProtocol readBool];
[self setSuccess: fieldValue];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"DeleteAdminLabel_result"];

if (__success_isset) {
[outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
[outProtocol writeBool: __success];
[outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"DeleteAdminLabel_result("];
[ms appendString: @"success:"];
[ms appendFormat: @"%i", __success];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@implementation ISocialAdminServiceDeleteAdminLabelClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
self = [super init];
inProtocol = [anInProtocol retain_stub];
outProtocol = [anOutProtocol retain_stub];
return self;
}

- (void) dealloc
{
[inProtocol release_stub];
[outProtocol release_stub];
[super dealloc_stub];
}

- (void) send_deleteAdminLabel: (int32_t) id
{
[outProtocol writeMessageBeginWithName: @"deleteAdminLabel" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"deleteAdminLabel_args"];
[outProtocol writeFieldBeginWithName: @"id" type: TType_I32 fieldID: 1];
[outProtocol writeI32: id];
[outProtocol writeFieldEnd];
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
}

- (BOOL) recv_deleteAdminLabel
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
DeleteAdminLabel_result * result = [[[DeleteAdminLabel_result alloc] init] autorelease_stub];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"deleteAdminLabel failed: unknown result"];
}

- (BOOL) deleteAdminLabel: (int32_t) id
{
[self send_deleteAdminLabel : id];
return [self recv_deleteAdminLabel];
}

@end

@implementation ISocialAdminServiceDeleteAdminLabelProcessor

- (id) initWithISocialAdminServiceDeleteAdminLabel: (id <ISocialAdminServiceDeleteAdminLabel>) service
{
self = [super init];
if (!self) {
  return nil;
}
mService = [service retain_stub];
mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
{
SEL s = @selector(process_deleteAdminLabel_withSequenceID:inProtocol:outProtocol:);
NSMethodSignature * sig = [self methodSignatureForSelector: s];
NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
[invocation setSelector: s];
[invocation retainArguments];
[mMethodMap setValue: invocation forKey: @"deleteAdminLabel"];
}
return self;
}

- (id<ISocialAdminServiceDeleteAdminLabel>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_deleteAdminLabel_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
deleteAdminLabel_args * args = [[deleteAdminLabel_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
DeleteAdminLabel_result * result = [[DeleteAdminLabel_result alloc] init];
[result setSuccess: [mService deleteAdminLabel: [args id]]];
[outProtocol writeMessageBeginWithName: @"deleteAdminLabel"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) dealloc
{
[mService release_stub];
[mMethodMap release_stub];
[super dealloc_stub];
}

@end

@interface addAdminPost_args : NSObject <TBase, NSCoding> {
TAdminPost * __post;
NSMutableArray * __cityPosts;

BOOL __post_isset;
BOOL __cityPosts_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=post, setter=setPost:) TAdminPost * post;
@property (nonatomic, retain, getter=cityPosts, setter=setCityPosts:) NSMutableArray * cityPosts;
#endif

- (id) init;
- (id) initWithPost: (TAdminPost *) post cityPosts: (NSMutableArray *) cityPosts;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (TAdminPost *) post;
- (void) setPost: (TAdminPost *) post;
#endif
- (BOOL) postIsSet;

#if !__has_feature(objc_arc)
- (NSMutableArray *) cityPosts;
- (void) setCityPosts: (NSMutableArray *) cityPosts;
#endif
- (BOOL) cityPostsIsSet;

@end

@implementation addAdminPost_args

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithPost: (TAdminPost *) post cityPosts: (NSMutableArray *) cityPosts
{
self = [super init];
__post = [post retain_stub];
__post_isset = YES;
__cityPosts = [cityPosts retain_stub];
__cityPosts_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"post"])
{
__post = [[decoder decodeObjectForKey: @"post"] retain_stub];
__post_isset = YES;
}
if ([decoder containsValueForKey: @"cityPosts"])
{
__cityPosts = [[decoder decodeObjectForKey: @"cityPosts"] retain_stub];
__cityPosts_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__post_isset)
{
[encoder encodeObject: __post forKey: @"post"];
}
if (__cityPosts_isset)
{
[encoder encodeObject: __cityPosts forKey: @"cityPosts"];
}
}

- (void) dealloc
{
[__post release_stub];
[__cityPosts release_stub];
[super dealloc_stub];
}

- (TAdminPost *) post {
return [[__post retain_stub] autorelease_stub];
}

- (void) setPost: (TAdminPost *) post {
[post retain_stub];
[__post release_stub];
__post = post;
__post_isset = YES;
}

- (BOOL) postIsSet {
return __post_isset;
}

- (void) unsetPost {
[__post release_stub];
__post = nil;
__post_isset = NO;
}

- (NSMutableArray *) cityPosts {
return [[__cityPosts retain_stub] autorelease_stub];
}

- (void) setCityPosts: (NSMutableArray *) cityPosts {
[cityPosts retain_stub];
[__cityPosts release_stub];
__cityPosts = cityPosts;
__cityPosts_isset = YES;
}

- (BOOL) cityPostsIsSet {
return __cityPosts_isset;
}

- (void) unsetCityPosts {
[__cityPosts release_stub];
__cityPosts = nil;
__cityPosts_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 1:
if (fieldType == TType_STRUCT) {
TAdminPost *fieldValue = [[TAdminPost alloc] init];
[fieldValue read: inProtocol];
[self setPost: fieldValue];
[fieldValue release_stub];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
case 2:
if (fieldType == TType_LIST) {
int _size0;
[inProtocol readListBeginReturningElementType: NULL size: &_size0];
NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size0];
int _i1;
for (_i1 = 0; _i1 < _size0; ++_i1)
{
TAdminCityPost *_elem2 = [[TAdminCityPost alloc] init];
[_elem2 read: inProtocol];
[fieldValue addObject: _elem2];
[_elem2 release_stub];
}
[inProtocol readListEnd];
[self setCityPosts: fieldValue];
[fieldValue release_stub];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"addAdminPost_args"];
if (__post_isset) {
if (__post != nil) {
[outProtocol writeFieldBeginWithName: @"post" type: TType_STRUCT fieldID: 1];
[__post write: outProtocol];
[outProtocol writeFieldEnd];
}
}
if (__cityPosts_isset) {
if (__cityPosts != nil) {
[outProtocol writeFieldBeginWithName: @"cityPosts" type: TType_LIST fieldID: 2];
{
[outProtocol writeListBeginWithElementType: TType_STRUCT size: [__cityPosts count]];
int idx4;
for (idx4 = 0; idx4 < [__cityPosts count]; idx4++)
{
[[__cityPosts objectAtIndex: idx4] write: outProtocol];
}
[outProtocol writeListEnd];
}
[outProtocol writeFieldEnd];
}
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"addAdminPost_args("];
[ms appendString: @"post:"];
[ms appendFormat: @"%@", __post];
[ms appendString: @",cityPosts:"];
[ms appendFormat: @"%@", __cityPosts];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@interface AddAdminPost_result : NSObject <TBase, NSCoding> {
BOOL __success;

BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) init;
- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BOOL) success;
- (void) setSuccess: (BOOL) success;
#endif
- (BOOL) successIsSet;

@end

@implementation AddAdminPost_result

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithSuccess: (BOOL) success
{
self = [super init];
__success = success;
__success_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"success"])
{
__success = [decoder decodeBoolForKey: @"success"];
__success_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__success_isset)
{
[encoder encodeBool: __success forKey: @"success"];
}
}

- (void) dealloc
{
[super dealloc_stub];
}

- (BOOL) success {
return __success;
}

- (void) setSuccess: (BOOL) success {
__success = success;
__success_isset = YES;
}

- (BOOL) successIsSet {
return __success_isset;
}

- (void) unsetSuccess {
__success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 0:
if (fieldType == TType_BOOL) {
BOOL fieldValue = [inProtocol readBool];
[self setSuccess: fieldValue];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"AddAdminPost_result"];

if (__success_isset) {
[outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
[outProtocol writeBool: __success];
[outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"AddAdminPost_result("];
[ms appendString: @"success:"];
[ms appendFormat: @"%i", __success];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@implementation ISocialAdminServiceAddAdminPostClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
self = [super init];
inProtocol = [anInProtocol retain_stub];
outProtocol = [anOutProtocol retain_stub];
return self;
}

- (void) dealloc
{
[inProtocol release_stub];
[outProtocol release_stub];
[super dealloc_stub];
}

- (void) send_addAdminPost: (TAdminPost *) post cityPosts: (NSMutableArray *) cityPosts
{
[outProtocol writeMessageBeginWithName: @"addAdminPost" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"addAdminPost_args"];
if (post != nil){
[outProtocol writeFieldBeginWithName: @"post" type: TType_STRUCT fieldID: 1];
[post write: outProtocol];
[outProtocol writeFieldEnd];
}
if (cityPosts != nil){
[outProtocol writeFieldBeginWithName: @"cityPosts" type: TType_LIST fieldID: 2];
{
[outProtocol writeListBeginWithElementType: TType_STRUCT size: [cityPosts count]];
int idx6;
for (idx6 = 0; idx6 < [cityPosts count]; idx6++)
{
[[cityPosts objectAtIndex: idx6] write: outProtocol];
}
[outProtocol writeListEnd];
}
[outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
}

- (BOOL) recv_addAdminPost
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
AddAdminPost_result * result = [[[AddAdminPost_result alloc] init] autorelease_stub];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"addAdminPost failed: unknown result"];
}

- (BOOL) addAdminPost: (TAdminPost *) post cityPosts: (NSMutableArray *) cityPosts
{
[self send_addAdminPost : post cityPosts: cityPosts];
return [self recv_addAdminPost];
}

@end

@implementation ISocialAdminServiceAddAdminPostProcessor

- (id) initWithISocialAdminServiceAddAdminPost: (id <ISocialAdminServiceAddAdminPost>) service
{
self = [super init];
if (!self) {
  return nil;
}
mService = [service retain_stub];
mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
{
SEL s = @selector(process_addAdminPost_withSequenceID:inProtocol:outProtocol:);
NSMethodSignature * sig = [self methodSignatureForSelector: s];
NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
[invocation setSelector: s];
[invocation retainArguments];
[mMethodMap setValue: invocation forKey: @"addAdminPost"];
}
return self;
}

- (id<ISocialAdminServiceAddAdminPost>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_addAdminPost_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
addAdminPost_args * args = [[addAdminPost_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
AddAdminPost_result * result = [[AddAdminPost_result alloc] init];
[result setSuccess: [mService addAdminPost: [args post] cityPosts: [args cityPosts]]];
[outProtocol writeMessageBeginWithName: @"addAdminPost"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) dealloc
{
[mService release_stub];
[mMethodMap release_stub];
[super dealloc_stub];
}

@end

@interface addAdminPostUseMobile_args : NSObject <TBase, NSCoding> {
TAdminPost * __post;
NSMutableArray * __cityPosts;

BOOL __post_isset;
BOOL __cityPosts_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=post, setter=setPost:) TAdminPost * post;
@property (nonatomic, retain, getter=cityPosts, setter=setCityPosts:) NSMutableArray * cityPosts;
#endif

- (id) init;
- (id) initWithPost: (TAdminPost *) post cityPosts: (NSMutableArray *) cityPosts;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (TAdminPost *) post;
- (void) setPost: (TAdminPost *) post;
#endif
- (BOOL) postIsSet;

#if !__has_feature(objc_arc)
- (NSMutableArray *) cityPosts;
- (void) setCityPosts: (NSMutableArray *) cityPosts;
#endif
- (BOOL) cityPostsIsSet;

@end

@implementation addAdminPostUseMobile_args

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithPost: (TAdminPost *) post cityPosts: (NSMutableArray *) cityPosts
{
self = [super init];
__post = [post retain_stub];
__post_isset = YES;
__cityPosts = [cityPosts retain_stub];
__cityPosts_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"post"])
{
__post = [[decoder decodeObjectForKey: @"post"] retain_stub];
__post_isset = YES;
}
if ([decoder containsValueForKey: @"cityPosts"])
{
__cityPosts = [[decoder decodeObjectForKey: @"cityPosts"] retain_stub];
__cityPosts_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__post_isset)
{
[encoder encodeObject: __post forKey: @"post"];
}
if (__cityPosts_isset)
{
[encoder encodeObject: __cityPosts forKey: @"cityPosts"];
}
}

- (void) dealloc
{
[__post release_stub];
[__cityPosts release_stub];
[super dealloc_stub];
}

- (TAdminPost *) post {
return [[__post retain_stub] autorelease_stub];
}

- (void) setPost: (TAdminPost *) post {
[post retain_stub];
[__post release_stub];
__post = post;
__post_isset = YES;
}

- (BOOL) postIsSet {
return __post_isset;
}

- (void) unsetPost {
[__post release_stub];
__post = nil;
__post_isset = NO;
}

- (NSMutableArray *) cityPosts {
return [[__cityPosts retain_stub] autorelease_stub];
}

- (void) setCityPosts: (NSMutableArray *) cityPosts {
[cityPosts retain_stub];
[__cityPosts release_stub];
__cityPosts = cityPosts;
__cityPosts_isset = YES;
}

- (BOOL) cityPostsIsSet {
return __cityPosts_isset;
}

- (void) unsetCityPosts {
[__cityPosts release_stub];
__cityPosts = nil;
__cityPosts_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 1:
if (fieldType == TType_STRUCT) {
TAdminPost *fieldValue = [[TAdminPost alloc] init];
[fieldValue read: inProtocol];
[self setPost: fieldValue];
[fieldValue release_stub];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
case 2:
if (fieldType == TType_LIST) {
int _size7;
[inProtocol readListBeginReturningElementType: NULL size: &_size7];
NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size7];
int _i8;
for (_i8 = 0; _i8 < _size7; ++_i8)
{
TAdminCityPost *_elem9 = [[TAdminCityPost alloc] init];
[_elem9 read: inProtocol];
[fieldValue addObject: _elem9];
[_elem9 release_stub];
}
[inProtocol readListEnd];
[self setCityPosts: fieldValue];
[fieldValue release_stub];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"addAdminPostUseMobile_args"];
if (__post_isset) {
if (__post != nil) {
[outProtocol writeFieldBeginWithName: @"post" type: TType_STRUCT fieldID: 1];
[__post write: outProtocol];
[outProtocol writeFieldEnd];
}
}
if (__cityPosts_isset) {
if (__cityPosts != nil) {
[outProtocol writeFieldBeginWithName: @"cityPosts" type: TType_LIST fieldID: 2];
{
[outProtocol writeListBeginWithElementType: TType_STRUCT size: [__cityPosts count]];
int idx11;
for (idx11 = 0; idx11 < [__cityPosts count]; idx11++)
{
[[__cityPosts objectAtIndex: idx11] write: outProtocol];
}
[outProtocol writeListEnd];
}
[outProtocol writeFieldEnd];
}
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"addAdminPostUseMobile_args("];
[ms appendString: @"post:"];
[ms appendFormat: @"%@", __post];
[ms appendString: @",cityPosts:"];
[ms appendFormat: @"%@", __cityPosts];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@interface AddAdminPostUseMobile_result : NSObject <TBase, NSCoding> {
BOOL __success;

BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) init;
- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BOOL) success;
- (void) setSuccess: (BOOL) success;
#endif
- (BOOL) successIsSet;

@end

@implementation AddAdminPostUseMobile_result

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithSuccess: (BOOL) success
{
self = [super init];
__success = success;
__success_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"success"])
{
__success = [decoder decodeBoolForKey: @"success"];
__success_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__success_isset)
{
[encoder encodeBool: __success forKey: @"success"];
}
}

- (void) dealloc
{
[super dealloc_stub];
}

- (BOOL) success {
return __success;
}

- (void) setSuccess: (BOOL) success {
__success = success;
__success_isset = YES;
}

- (BOOL) successIsSet {
return __success_isset;
}

- (void) unsetSuccess {
__success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 0:
if (fieldType == TType_BOOL) {
BOOL fieldValue = [inProtocol readBool];
[self setSuccess: fieldValue];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"AddAdminPostUseMobile_result"];

if (__success_isset) {
[outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
[outProtocol writeBool: __success];
[outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"AddAdminPostUseMobile_result("];
[ms appendString: @"success:"];
[ms appendFormat: @"%i", __success];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@implementation ISocialAdminServiceAddAdminPostUseMobileClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
self = [super init];
inProtocol = [anInProtocol retain_stub];
outProtocol = [anOutProtocol retain_stub];
return self;
}

- (void) dealloc
{
[inProtocol release_stub];
[outProtocol release_stub];
[super dealloc_stub];
}

- (void) send_addAdminPostUseMobile: (TAdminPost *) post cityPosts: (NSMutableArray *) cityPosts
{
[outProtocol writeMessageBeginWithName: @"addAdminPostUseMobile" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"addAdminPostUseMobile_args"];
if (post != nil){
[outProtocol writeFieldBeginWithName: @"post" type: TType_STRUCT fieldID: 1];
[post write: outProtocol];
[outProtocol writeFieldEnd];
}
if (cityPosts != nil){
[outProtocol writeFieldBeginWithName: @"cityPosts" type: TType_LIST fieldID: 2];
{
[outProtocol writeListBeginWithElementType: TType_STRUCT size: [cityPosts count]];
int idx13;
for (idx13 = 0; idx13 < [cityPosts count]; idx13++)
{
[[cityPosts objectAtIndex: idx13] write: outProtocol];
}
[outProtocol writeListEnd];
}
[outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
}

- (BOOL) recv_addAdminPostUseMobile
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
AddAdminPostUseMobile_result * result = [[[AddAdminPostUseMobile_result alloc] init] autorelease_stub];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"addAdminPostUseMobile failed: unknown result"];
}

- (BOOL) addAdminPostUseMobile: (TAdminPost *) post cityPosts: (NSMutableArray *) cityPosts
{
[self send_addAdminPostUseMobile : post cityPosts: cityPosts];
return [self recv_addAdminPostUseMobile];
}

@end

@implementation ISocialAdminServiceAddAdminPostUseMobileProcessor

- (id) initWithISocialAdminServiceAddAdminPostUseMobile: (id <ISocialAdminServiceAddAdminPostUseMobile>) service
{
self = [super init];
if (!self) {
  return nil;
}
mService = [service retain_stub];
mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
{
SEL s = @selector(process_addAdminPostUseMobile_withSequenceID:inProtocol:outProtocol:);
NSMethodSignature * sig = [self methodSignatureForSelector: s];
NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
[invocation setSelector: s];
[invocation retainArguments];
[mMethodMap setValue: invocation forKey: @"addAdminPostUseMobile"];
}
return self;
}

- (id<ISocialAdminServiceAddAdminPostUseMobile>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_addAdminPostUseMobile_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
addAdminPostUseMobile_args * args = [[addAdminPostUseMobile_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
AddAdminPostUseMobile_result * result = [[AddAdminPostUseMobile_result alloc] init];
[result setSuccess: [mService addAdminPostUseMobile: [args post] cityPosts: [args cityPosts]]];
[outProtocol writeMessageBeginWithName: @"addAdminPostUseMobile"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) dealloc
{
[mService release_stub];
[mMethodMap release_stub];
[super dealloc_stub];
}

@end

@interface getAdminPostById_args : NSObject <TBase, NSCoding> {
int32_t __id;

BOOL __id_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=id, setter=setId:) int32_t id;
#endif

- (id) init;
- (id) initWithId: (int32_t) id;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (int32_t) id;
- (void) setId: (int32_t) id;
#endif
- (BOOL) idIsSet;

@end

@implementation getAdminPostById_args

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithId: (int32_t) id
{
self = [super init];
__id = id;
__id_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"id"])
{
__id = [decoder decodeInt32ForKey: @"id"];
__id_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__id_isset)
{
[encoder encodeInt32: __id forKey: @"id"];
}
}

- (void) dealloc
{
[super dealloc_stub];
}

- (int32_t) id {
return __id;
}

- (void) setId: (int32_t) id {
__id = id;
__id_isset = YES;
}

- (BOOL) idIsSet {
return __id_isset;
}

- (void) unsetId {
__id_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 1:
if (fieldType == TType_I32) {
int32_t fieldValue = [inProtocol readI32];
[self setId: fieldValue];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"getAdminPostById_args"];
if (__id_isset) {
[outProtocol writeFieldBeginWithName: @"id" type: TType_I32 fieldID: 1];
[outProtocol writeI32: __id];
[outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"getAdminPostById_args("];
[ms appendString: @"id:"];
[ms appendFormat: @"%i", __id];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@interface GetAdminPostById_result : NSObject <TBase, NSCoding> {
TAdminPost * __success;

BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) TAdminPost * success;
#endif

- (id) init;
- (id) initWithSuccess: (TAdminPost *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (TAdminPost *) success;
- (void) setSuccess: (TAdminPost *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation GetAdminPostById_result

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithSuccess: (TAdminPost *) success
{
self = [super init];
__success = [success retain_stub];
__success_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"success"])
{
__success = [[decoder decodeObjectForKey: @"success"] retain_stub];
__success_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__success_isset)
{
[encoder encodeObject: __success forKey: @"success"];
}
}

- (void) dealloc
{
[__success release_stub];
[super dealloc_stub];
}

- (TAdminPost *) success {
return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (TAdminPost *) success {
[success retain_stub];
[__success release_stub];
__success = success;
__success_isset = YES;
}

- (BOOL) successIsSet {
return __success_isset;
}

- (void) unsetSuccess {
[__success release_stub];
__success = nil;
__success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 0:
if (fieldType == TType_STRUCT) {
TAdminPost *fieldValue = [[TAdminPost alloc] init];
[fieldValue read: inProtocol];
[self setSuccess: fieldValue];
[fieldValue release_stub];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"GetAdminPostById_result"];

if (__success_isset) {
if (__success != nil) {
[outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
[__success write: outProtocol];
[outProtocol writeFieldEnd];
}
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"GetAdminPostById_result("];
[ms appendString: @"success:"];
[ms appendFormat: @"%@", __success];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@implementation ISocialAdminServiceGetAdminPostByIdClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
self = [super init];
inProtocol = [anInProtocol retain_stub];
outProtocol = [anOutProtocol retain_stub];
return self;
}

- (void) dealloc
{
[inProtocol release_stub];
[outProtocol release_stub];
[super dealloc_stub];
}

- (void) send_getAdminPostById: (int32_t) id
{
[outProtocol writeMessageBeginWithName: @"getAdminPostById" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"getAdminPostById_args"];
[outProtocol writeFieldBeginWithName: @"id" type: TType_I32 fieldID: 1];
[outProtocol writeI32: id];
[outProtocol writeFieldEnd];
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
}

- (TAdminPost *) recv_getAdminPostById
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
GetAdminPostById_result * result = [[[GetAdminPostById_result alloc] init] autorelease_stub];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"getAdminPostById failed: unknown result"];
}

- (TAdminPost *) getAdminPostById: (int32_t) id
{
[self send_getAdminPostById : id];
return [self recv_getAdminPostById];
}

@end

@implementation ISocialAdminServiceGetAdminPostByIdProcessor

- (id) initWithISocialAdminServiceGetAdminPostById: (id <ISocialAdminServiceGetAdminPostById>) service
{
self = [super init];
if (!self) {
  return nil;
}
mService = [service retain_stub];
mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
{
SEL s = @selector(process_getAdminPostById_withSequenceID:inProtocol:outProtocol:);
NSMethodSignature * sig = [self methodSignatureForSelector: s];
NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
[invocation setSelector: s];
[invocation retainArguments];
[mMethodMap setValue: invocation forKey: @"getAdminPostById"];
}
return self;
}

- (id<ISocialAdminServiceGetAdminPostById>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_getAdminPostById_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
getAdminPostById_args * args = [[getAdminPostById_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
GetAdminPostById_result * result = [[GetAdminPostById_result alloc] init];
[result setSuccess: [mService getAdminPostById: [args id]]];
[outProtocol writeMessageBeginWithName: @"getAdminPostById"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) dealloc
{
[mService release_stub];
[mMethodMap release_stub];
[super dealloc_stub];
}

@end

@interface getAdminApplyList_args : NSObject <TBase, NSCoding> {
int32_t __postId;

BOOL __postId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=postId, setter=setPostId:) int32_t postId;
#endif

- (id) init;
- (id) initWithPostId: (int32_t) postId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (int32_t) postId;
- (void) setPostId: (int32_t) postId;
#endif
- (BOOL) postIdIsSet;

@end

@implementation getAdminApplyList_args

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithPostId: (int32_t) postId
{
self = [super init];
__postId = postId;
__postId_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"postId"])
{
__postId = [decoder decodeInt32ForKey: @"postId"];
__postId_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__postId_isset)
{
[encoder encodeInt32: __postId forKey: @"postId"];
}
}

- (void) dealloc
{
[super dealloc_stub];
}

- (int32_t) postId {
return __postId;
}

- (void) setPostId: (int32_t) postId {
__postId = postId;
__postId_isset = YES;
}

- (BOOL) postIdIsSet {
return __postId_isset;
}

- (void) unsetPostId {
__postId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 1:
if (fieldType == TType_I32) {
int32_t fieldValue = [inProtocol readI32];
[self setPostId: fieldValue];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"getAdminApplyList_args"];
if (__postId_isset) {
[outProtocol writeFieldBeginWithName: @"postId" type: TType_I32 fieldID: 1];
[outProtocol writeI32: __postId];
[outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"getAdminApplyList_args("];
[ms appendString: @"postId:"];
[ms appendFormat: @"%i", __postId];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@interface GetAdminApplyList_result : NSObject <TBase, NSCoding> {
NSMutableArray * __success;

BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSMutableArray * success;
#endif

- (id) init;
- (id) initWithSuccess: (NSMutableArray *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSMutableArray *) success;
- (void) setSuccess: (NSMutableArray *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation GetAdminApplyList_result

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithSuccess: (NSMutableArray *) success
{
self = [super init];
__success = [success retain_stub];
__success_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"success"])
{
__success = [[decoder decodeObjectForKey: @"success"] retain_stub];
__success_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__success_isset)
{
[encoder encodeObject: __success forKey: @"success"];
}
}

- (void) dealloc
{
[__success release_stub];
[super dealloc_stub];
}

- (NSMutableArray *) success {
return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSMutableArray *) success {
[success retain_stub];
[__success release_stub];
__success = success;
__success_isset = YES;
}

- (BOOL) successIsSet {
return __success_isset;
}

- (void) unsetSuccess {
[__success release_stub];
__success = nil;
__success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 0:
if (fieldType == TType_LIST) {
int _size14;
[inProtocol readListBeginReturningElementType: NULL size: &_size14];
NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size14];
int _i15;
for (_i15 = 0; _i15 < _size14; ++_i15)
{
TAdminActivityApply *_elem16 = [[TAdminActivityApply alloc] init];
[_elem16 read: inProtocol];
[fieldValue addObject: _elem16];
[_elem16 release_stub];
}
[inProtocol readListEnd];
[self setSuccess: fieldValue];
[fieldValue release_stub];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"GetAdminApplyList_result"];

if (__success_isset) {
if (__success != nil) {
[outProtocol writeFieldBeginWithName: @"success" type: TType_LIST fieldID: 0];
{
[outProtocol writeListBeginWithElementType: TType_STRUCT size: [__success count]];
int idx18;
for (idx18 = 0; idx18 < [__success count]; idx18++)
{
[[__success objectAtIndex: idx18] write: outProtocol];
}
[outProtocol writeListEnd];
}
[outProtocol writeFieldEnd];
}
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"GetAdminApplyList_result("];
[ms appendString: @"success:"];
[ms appendFormat: @"%@", __success];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@implementation ISocialAdminServiceGetAdminApplyListClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
self = [super init];
inProtocol = [anInProtocol retain_stub];
outProtocol = [anOutProtocol retain_stub];
return self;
}

- (void) dealloc
{
[inProtocol release_stub];
[outProtocol release_stub];
[super dealloc_stub];
}

- (void) send_getAdminApplyList: (int32_t) postId
{
[outProtocol writeMessageBeginWithName: @"getAdminApplyList" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"getAdminApplyList_args"];
[outProtocol writeFieldBeginWithName: @"postId" type: TType_I32 fieldID: 1];
[outProtocol writeI32: postId];
[outProtocol writeFieldEnd];
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
}

- (NSMutableArray *) recv_getAdminApplyList
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
GetAdminApplyList_result * result = [[[GetAdminApplyList_result alloc] init] autorelease_stub];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"getAdminApplyList failed: unknown result"];
}

- (NSMutableArray *) getAdminApplyList: (int32_t) postId
{
[self send_getAdminApplyList : postId];
return [self recv_getAdminApplyList];
}

@end

@implementation ISocialAdminServiceGetAdminApplyListProcessor

- (id) initWithISocialAdminServiceGetAdminApplyList: (id <ISocialAdminServiceGetAdminApplyList>) service
{
self = [super init];
if (!self) {
  return nil;
}
mService = [service retain_stub];
mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
{
SEL s = @selector(process_getAdminApplyList_withSequenceID:inProtocol:outProtocol:);
NSMethodSignature * sig = [self methodSignatureForSelector: s];
NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
[invocation setSelector: s];
[invocation retainArguments];
[mMethodMap setValue: invocation forKey: @"getAdminApplyList"];
}
return self;
}

- (id<ISocialAdminServiceGetAdminApplyList>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_getAdminApplyList_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
getAdminApplyList_args * args = [[getAdminApplyList_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
GetAdminApplyList_result * result = [[GetAdminApplyList_result alloc] init];
[result setSuccess: [mService getAdminApplyList: [args postId]]];
[outProtocol writeMessageBeginWithName: @"getAdminApplyList"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) dealloc
{
[mService release_stub];
[mMethodMap release_stub];
[super dealloc_stub];
}

@end

@interface getAdminCommentList_args : NSObject <TBase, NSCoding> {
int32_t __postId;
NSString * __content;
int32_t __currentPage;
int32_t __pageSize;

BOOL __postId_isset;
BOOL __content_isset;
BOOL __currentPage_isset;
BOOL __pageSize_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=postId, setter=setPostId:) int32_t postId;
@property (nonatomic, retain, getter=content, setter=setContent:) NSString * content;
@property (nonatomic, getter=currentPage, setter=setCurrentPage:) int32_t currentPage;
@property (nonatomic, getter=pageSize, setter=setPageSize:) int32_t pageSize;
#endif

- (id) init;
- (id) initWithPostId: (int32_t) postId content: (NSString *) content currentPage: (int32_t) currentPage pageSize: (int32_t) pageSize;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (int32_t) postId;
- (void) setPostId: (int32_t) postId;
#endif
- (BOOL) postIdIsSet;

#if !__has_feature(objc_arc)
- (NSString *) content;
- (void) setContent: (NSString *) content;
#endif
- (BOOL) contentIsSet;

#if !__has_feature(objc_arc)
- (int32_t) currentPage;
- (void) setCurrentPage: (int32_t) currentPage;
#endif
- (BOOL) currentPageIsSet;

#if !__has_feature(objc_arc)
- (int32_t) pageSize;
- (void) setPageSize: (int32_t) pageSize;
#endif
- (BOOL) pageSizeIsSet;

@end

@implementation getAdminCommentList_args

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithPostId: (int32_t) postId content: (NSString *) content currentPage: (int32_t) currentPage pageSize: (int32_t) pageSize
{
self = [super init];
__postId = postId;
__postId_isset = YES;
__content = [content retain_stub];
__content_isset = YES;
__currentPage = currentPage;
__currentPage_isset = YES;
__pageSize = pageSize;
__pageSize_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"postId"])
{
__postId = [decoder decodeInt32ForKey: @"postId"];
__postId_isset = YES;
}
if ([decoder containsValueForKey: @"content"])
{
__content = [[decoder decodeObjectForKey: @"content"] retain_stub];
__content_isset = YES;
}
if ([decoder containsValueForKey: @"currentPage"])
{
__currentPage = [decoder decodeInt32ForKey: @"currentPage"];
__currentPage_isset = YES;
}
if ([decoder containsValueForKey: @"pageSize"])
{
__pageSize = [decoder decodeInt32ForKey: @"pageSize"];
__pageSize_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__postId_isset)
{
[encoder encodeInt32: __postId forKey: @"postId"];
}
if (__content_isset)
{
[encoder encodeObject: __content forKey: @"content"];
}
if (__currentPage_isset)
{
[encoder encodeInt32: __currentPage forKey: @"currentPage"];
}
if (__pageSize_isset)
{
[encoder encodeInt32: __pageSize forKey: @"pageSize"];
}
}

- (void) dealloc
{
[__content release_stub];
[super dealloc_stub];
}

- (int32_t) postId {
return __postId;
}

- (void) setPostId: (int32_t) postId {
__postId = postId;
__postId_isset = YES;
}

- (BOOL) postIdIsSet {
return __postId_isset;
}

- (void) unsetPostId {
__postId_isset = NO;
}

- (NSString *) content {
return [[__content retain_stub] autorelease_stub];
}

- (void) setContent: (NSString *) content {
[content retain_stub];
[__content release_stub];
__content = content;
__content_isset = YES;
}

- (BOOL) contentIsSet {
return __content_isset;
}

- (void) unsetContent {
[__content release_stub];
__content = nil;
__content_isset = NO;
}

- (int32_t) currentPage {
return __currentPage;
}

- (void) setCurrentPage: (int32_t) currentPage {
__currentPage = currentPage;
__currentPage_isset = YES;
}

- (BOOL) currentPageIsSet {
return __currentPage_isset;
}

- (void) unsetCurrentPage {
__currentPage_isset = NO;
}

- (int32_t) pageSize {
return __pageSize;
}

- (void) setPageSize: (int32_t) pageSize {
__pageSize = pageSize;
__pageSize_isset = YES;
}

- (BOOL) pageSizeIsSet {
return __pageSize_isset;
}

- (void) unsetPageSize {
__pageSize_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 1:
if (fieldType == TType_I32) {
int32_t fieldValue = [inProtocol readI32];
[self setPostId: fieldValue];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
case 2:
if (fieldType == TType_STRING) {
NSString * fieldValue = [inProtocol readString];
[self setContent: fieldValue];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
case 3:
if (fieldType == TType_I32) {
int32_t fieldValue = [inProtocol readI32];
[self setCurrentPage: fieldValue];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
case 4:
if (fieldType == TType_I32) {
int32_t fieldValue = [inProtocol readI32];
[self setPageSize: fieldValue];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"getAdminCommentList_args"];
if (__postId_isset) {
[outProtocol writeFieldBeginWithName: @"postId" type: TType_I32 fieldID: 1];
[outProtocol writeI32: __postId];
[outProtocol writeFieldEnd];
}
if (__content_isset) {
if (__content != nil) {
[outProtocol writeFieldBeginWithName: @"content" type: TType_STRING fieldID: 2];
[outProtocol writeString: __content];
[outProtocol writeFieldEnd];
}
}
if (__currentPage_isset) {
[outProtocol writeFieldBeginWithName: @"currentPage" type: TType_I32 fieldID: 3];
[outProtocol writeI32: __currentPage];
[outProtocol writeFieldEnd];
}
if (__pageSize_isset) {
[outProtocol writeFieldBeginWithName: @"pageSize" type: TType_I32 fieldID: 4];
[outProtocol writeI32: __pageSize];
[outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"getAdminCommentList_args("];
[ms appendString: @"postId:"];
[ms appendFormat: @"%i", __postId];
[ms appendString: @",content:"];
[ms appendFormat: @"\"%@\"", __content];
[ms appendString: @",currentPage:"];
[ms appendFormat: @"%i", __currentPage];
[ms appendString: @",pageSize:"];
[ms appendFormat: @"%i", __pageSize];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@interface GetAdminCommentList_result : NSObject <TBase, NSCoding> {
TAdminCommentQueryData * __success;

BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) TAdminCommentQueryData * success;
#endif

- (id) init;
- (id) initWithSuccess: (TAdminCommentQueryData *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (TAdminCommentQueryData *) success;
- (void) setSuccess: (TAdminCommentQueryData *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation GetAdminCommentList_result

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithSuccess: (TAdminCommentQueryData *) success
{
self = [super init];
__success = [success retain_stub];
__success_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"success"])
{
__success = [[decoder decodeObjectForKey: @"success"] retain_stub];
__success_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__success_isset)
{
[encoder encodeObject: __success forKey: @"success"];
}
}

- (void) dealloc
{
[__success release_stub];
[super dealloc_stub];
}

- (TAdminCommentQueryData *) success {
return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (TAdminCommentQueryData *) success {
[success retain_stub];
[__success release_stub];
__success = success;
__success_isset = YES;
}

- (BOOL) successIsSet {
return __success_isset;
}

- (void) unsetSuccess {
[__success release_stub];
__success = nil;
__success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 0:
if (fieldType == TType_STRUCT) {
TAdminCommentQueryData *fieldValue = [[TAdminCommentQueryData alloc] init];
[fieldValue read: inProtocol];
[self setSuccess: fieldValue];
[fieldValue release_stub];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"GetAdminCommentList_result"];

if (__success_isset) {
if (__success != nil) {
[outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
[__success write: outProtocol];
[outProtocol writeFieldEnd];
}
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"GetAdminCommentList_result("];
[ms appendString: @"success:"];
[ms appendFormat: @"%@", __success];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@implementation ISocialAdminServiceGetAdminCommentListClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
self = [super init];
inProtocol = [anInProtocol retain_stub];
outProtocol = [anOutProtocol retain_stub];
return self;
}

- (void) dealloc
{
[inProtocol release_stub];
[outProtocol release_stub];
[super dealloc_stub];
}

- (void) send_getAdminCommentList: (int32_t) postId content: (NSString *) content currentPage: (int32_t) currentPage pageSize: (int32_t) pageSize
{
[outProtocol writeMessageBeginWithName: @"getAdminCommentList" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"getAdminCommentList_args"];
[outProtocol writeFieldBeginWithName: @"postId" type: TType_I32 fieldID: 1];
[outProtocol writeI32: postId];
[outProtocol writeFieldEnd];
if (content != nil){
[outProtocol writeFieldBeginWithName: @"content" type: TType_STRING fieldID: 2];
[outProtocol writeString: content];
[outProtocol writeFieldEnd];
}
[outProtocol writeFieldBeginWithName: @"currentPage" type: TType_I32 fieldID: 3];
[outProtocol writeI32: currentPage];
[outProtocol writeFieldEnd];
[outProtocol writeFieldBeginWithName: @"pageSize" type: TType_I32 fieldID: 4];
[outProtocol writeI32: pageSize];
[outProtocol writeFieldEnd];
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
}

- (TAdminCommentQueryData *) recv_getAdminCommentList
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
GetAdminCommentList_result * result = [[[GetAdminCommentList_result alloc] init] autorelease_stub];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"getAdminCommentList failed: unknown result"];
}

- (TAdminCommentQueryData *) getAdminCommentList: (int32_t) postId content: (NSString *) content currentPage: (int32_t) currentPage pageSize: (int32_t) pageSize
{
[self send_getAdminCommentList : postId content: content currentPage: currentPage pageSize: pageSize];
return [self recv_getAdminCommentList];
}

@end

@implementation ISocialAdminServiceGetAdminCommentListProcessor

- (id) initWithISocialAdminServiceGetAdminCommentList: (id <ISocialAdminServiceGetAdminCommentList>) service
{
self = [super init];
if (!self) {
  return nil;
}
mService = [service retain_stub];
mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
{
SEL s = @selector(process_getAdminCommentList_withSequenceID:inProtocol:outProtocol:);
NSMethodSignature * sig = [self methodSignatureForSelector: s];
NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
[invocation setSelector: s];
[invocation retainArguments];
[mMethodMap setValue: invocation forKey: @"getAdminCommentList"];
}
return self;
}

- (id<ISocialAdminServiceGetAdminCommentList>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_getAdminCommentList_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
getAdminCommentList_args * args = [[getAdminCommentList_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
GetAdminCommentList_result * result = [[GetAdminCommentList_result alloc] init];
[result setSuccess: [mService getAdminCommentList: [args postId] content: [args content] currentPage: [args currentPage] pageSize: [args pageSize]]];
[outProtocol writeMessageBeginWithName: @"getAdminCommentList"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) dealloc
{
[mService release_stub];
[mMethodMap release_stub];
[super dealloc_stub];
}

@end

@interface addAdminComment_args : NSObject <TBase, NSCoding> {
TAdminComment * __comment;

BOOL __comment_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=comment, setter=setComment:) TAdminComment * comment;
#endif

- (id) init;
- (id) initWithComment: (TAdminComment *) comment;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (TAdminComment *) comment;
- (void) setComment: (TAdminComment *) comment;
#endif
- (BOOL) commentIsSet;

@end

@implementation addAdminComment_args

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithComment: (TAdminComment *) comment
{
self = [super init];
__comment = [comment retain_stub];
__comment_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"comment"])
{
__comment = [[decoder decodeObjectForKey: @"comment"] retain_stub];
__comment_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__comment_isset)
{
[encoder encodeObject: __comment forKey: @"comment"];
}
}

- (void) dealloc
{
[__comment release_stub];
[super dealloc_stub];
}

- (TAdminComment *) comment {
return [[__comment retain_stub] autorelease_stub];
}

- (void) setComment: (TAdminComment *) comment {
[comment retain_stub];
[__comment release_stub];
__comment = comment;
__comment_isset = YES;
}

- (BOOL) commentIsSet {
return __comment_isset;
}

- (void) unsetComment {
[__comment release_stub];
__comment = nil;
__comment_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 1:
if (fieldType == TType_STRUCT) {
TAdminComment *fieldValue = [[TAdminComment alloc] init];
[fieldValue read: inProtocol];
[self setComment: fieldValue];
[fieldValue release_stub];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"addAdminComment_args"];
if (__comment_isset) {
if (__comment != nil) {
[outProtocol writeFieldBeginWithName: @"comment" type: TType_STRUCT fieldID: 1];
[__comment write: outProtocol];
[outProtocol writeFieldEnd];
}
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"addAdminComment_args("];
[ms appendString: @"comment:"];
[ms appendFormat: @"%@", __comment];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@interface AddAdminComment_result : NSObject <TBase, NSCoding> {
BOOL __success;

BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) init;
- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BOOL) success;
- (void) setSuccess: (BOOL) success;
#endif
- (BOOL) successIsSet;

@end

@implementation AddAdminComment_result

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithSuccess: (BOOL) success
{
self = [super init];
__success = success;
__success_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"success"])
{
__success = [decoder decodeBoolForKey: @"success"];
__success_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__success_isset)
{
[encoder encodeBool: __success forKey: @"success"];
}
}

- (void) dealloc
{
[super dealloc_stub];
}

- (BOOL) success {
return __success;
}

- (void) setSuccess: (BOOL) success {
__success = success;
__success_isset = YES;
}

- (BOOL) successIsSet {
return __success_isset;
}

- (void) unsetSuccess {
__success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 0:
if (fieldType == TType_BOOL) {
BOOL fieldValue = [inProtocol readBool];
[self setSuccess: fieldValue];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"AddAdminComment_result"];

if (__success_isset) {
[outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
[outProtocol writeBool: __success];
[outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"AddAdminComment_result("];
[ms appendString: @"success:"];
[ms appendFormat: @"%i", __success];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@implementation ISocialAdminServiceAddAdminCommentClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
self = [super init];
inProtocol = [anInProtocol retain_stub];
outProtocol = [anOutProtocol retain_stub];
return self;
}

- (void) dealloc
{
[inProtocol release_stub];
[outProtocol release_stub];
[super dealloc_stub];
}

- (void) send_addAdminComment: (TAdminComment *) comment
{
[outProtocol writeMessageBeginWithName: @"addAdminComment" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"addAdminComment_args"];
if (comment != nil){
[outProtocol writeFieldBeginWithName: @"comment" type: TType_STRUCT fieldID: 1];
[comment write: outProtocol];
[outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
}

- (BOOL) recv_addAdminComment
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
AddAdminComment_result * result = [[[AddAdminComment_result alloc] init] autorelease_stub];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"addAdminComment failed: unknown result"];
}

- (BOOL) addAdminComment: (TAdminComment *) comment
{
[self send_addAdminComment : comment];
return [self recv_addAdminComment];
}

@end

@implementation ISocialAdminServiceAddAdminCommentProcessor

- (id) initWithISocialAdminServiceAddAdminComment: (id <ISocialAdminServiceAddAdminComment>) service
{
self = [super init];
if (!self) {
  return nil;
}
mService = [service retain_stub];
mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
{
SEL s = @selector(process_addAdminComment_withSequenceID:inProtocol:outProtocol:);
NSMethodSignature * sig = [self methodSignatureForSelector: s];
NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
[invocation setSelector: s];
[invocation retainArguments];
[mMethodMap setValue: invocation forKey: @"addAdminComment"];
}
return self;
}

- (id<ISocialAdminServiceAddAdminComment>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_addAdminComment_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
addAdminComment_args * args = [[addAdminComment_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
AddAdminComment_result * result = [[AddAdminComment_result alloc] init];
[result setSuccess: [mService addAdminComment: [args comment]]];
[outProtocol writeMessageBeginWithName: @"addAdminComment"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) dealloc
{
[mService release_stub];
[mMethodMap release_stub];
[super dealloc_stub];
}

@end

@interface addAdminCommentUseMobile_args : NSObject <TBase, NSCoding> {
TAdminComment * __comment;

BOOL __comment_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=comment, setter=setComment:) TAdminComment * comment;
#endif

- (id) init;
- (id) initWithComment: (TAdminComment *) comment;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (TAdminComment *) comment;
- (void) setComment: (TAdminComment *) comment;
#endif
- (BOOL) commentIsSet;

@end

@implementation addAdminCommentUseMobile_args

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithComment: (TAdminComment *) comment
{
self = [super init];
__comment = [comment retain_stub];
__comment_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"comment"])
{
__comment = [[decoder decodeObjectForKey: @"comment"] retain_stub];
__comment_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__comment_isset)
{
[encoder encodeObject: __comment forKey: @"comment"];
}
}

- (void) dealloc
{
[__comment release_stub];
[super dealloc_stub];
}

- (TAdminComment *) comment {
return [[__comment retain_stub] autorelease_stub];
}

- (void) setComment: (TAdminComment *) comment {
[comment retain_stub];
[__comment release_stub];
__comment = comment;
__comment_isset = YES;
}

- (BOOL) commentIsSet {
return __comment_isset;
}

- (void) unsetComment {
[__comment release_stub];
__comment = nil;
__comment_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 1:
if (fieldType == TType_STRUCT) {
TAdminComment *fieldValue = [[TAdminComment alloc] init];
[fieldValue read: inProtocol];
[self setComment: fieldValue];
[fieldValue release_stub];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"addAdminCommentUseMobile_args"];
if (__comment_isset) {
if (__comment != nil) {
[outProtocol writeFieldBeginWithName: @"comment" type: TType_STRUCT fieldID: 1];
[__comment write: outProtocol];
[outProtocol writeFieldEnd];
}
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"addAdminCommentUseMobile_args("];
[ms appendString: @"comment:"];
[ms appendFormat: @"%@", __comment];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@interface AddAdminCommentUseMobile_result : NSObject <TBase, NSCoding> {
BOOL __success;

BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) init;
- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BOOL) success;
- (void) setSuccess: (BOOL) success;
#endif
- (BOOL) successIsSet;

@end

@implementation AddAdminCommentUseMobile_result

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithSuccess: (BOOL) success
{
self = [super init];
__success = success;
__success_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"success"])
{
__success = [decoder decodeBoolForKey: @"success"];
__success_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__success_isset)
{
[encoder encodeBool: __success forKey: @"success"];
}
}

- (void) dealloc
{
[super dealloc_stub];
}

- (BOOL) success {
return __success;
}

- (void) setSuccess: (BOOL) success {
__success = success;
__success_isset = YES;
}

- (BOOL) successIsSet {
return __success_isset;
}

- (void) unsetSuccess {
__success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 0:
if (fieldType == TType_BOOL) {
BOOL fieldValue = [inProtocol readBool];
[self setSuccess: fieldValue];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"AddAdminCommentUseMobile_result"];

if (__success_isset) {
[outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
[outProtocol writeBool: __success];
[outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"AddAdminCommentUseMobile_result("];
[ms appendString: @"success:"];
[ms appendFormat: @"%i", __success];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@implementation ISocialAdminServiceAddAdminCommentUseMobileClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
self = [super init];
inProtocol = [anInProtocol retain_stub];
outProtocol = [anOutProtocol retain_stub];
return self;
}

- (void) dealloc
{
[inProtocol release_stub];
[outProtocol release_stub];
[super dealloc_stub];
}

- (void) send_addAdminCommentUseMobile: (TAdminComment *) comment
{
[outProtocol writeMessageBeginWithName: @"addAdminCommentUseMobile" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"addAdminCommentUseMobile_args"];
if (comment != nil){
[outProtocol writeFieldBeginWithName: @"comment" type: TType_STRUCT fieldID: 1];
[comment write: outProtocol];
[outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
}

- (BOOL) recv_addAdminCommentUseMobile
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
AddAdminCommentUseMobile_result * result = [[[AddAdminCommentUseMobile_result alloc] init] autorelease_stub];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"addAdminCommentUseMobile failed: unknown result"];
}

- (BOOL) addAdminCommentUseMobile: (TAdminComment *) comment
{
[self send_addAdminCommentUseMobile : comment];
return [self recv_addAdminCommentUseMobile];
}

@end

@implementation ISocialAdminServiceAddAdminCommentUseMobileProcessor

- (id) initWithISocialAdminServiceAddAdminCommentUseMobile: (id <ISocialAdminServiceAddAdminCommentUseMobile>) service
{
self = [super init];
if (!self) {
  return nil;
}
mService = [service retain_stub];
mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
{
SEL s = @selector(process_addAdminCommentUseMobile_withSequenceID:inProtocol:outProtocol:);
NSMethodSignature * sig = [self methodSignatureForSelector: s];
NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
[invocation setSelector: s];
[invocation retainArguments];
[mMethodMap setValue: invocation forKey: @"addAdminCommentUseMobile"];
}
return self;
}

- (id<ISocialAdminServiceAddAdminCommentUseMobile>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_addAdminCommentUseMobile_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
addAdminCommentUseMobile_args * args = [[addAdminCommentUseMobile_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
AddAdminCommentUseMobile_result * result = [[AddAdminCommentUseMobile_result alloc] init];
[result setSuccess: [mService addAdminCommentUseMobile: [args comment]]];
[outProtocol writeMessageBeginWithName: @"addAdminCommentUseMobile"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) dealloc
{
[mService release_stub];
[mMethodMap release_stub];
[super dealloc_stub];
}

@end

@interface deleteAdminComment_args : NSObject <TBase, NSCoding> {
int32_t __id;

BOOL __id_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=id, setter=setId:) int32_t id;
#endif

- (id) init;
- (id) initWithId: (int32_t) id;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (int32_t) id;
- (void) setId: (int32_t) id;
#endif
- (BOOL) idIsSet;

@end

@implementation deleteAdminComment_args

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithId: (int32_t) id
{
self = [super init];
__id = id;
__id_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"id"])
{
__id = [decoder decodeInt32ForKey: @"id"];
__id_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__id_isset)
{
[encoder encodeInt32: __id forKey: @"id"];
}
}

- (void) dealloc
{
[super dealloc_stub];
}

- (int32_t) id {
return __id;
}

- (void) setId: (int32_t) id {
__id = id;
__id_isset = YES;
}

- (BOOL) idIsSet {
return __id_isset;
}

- (void) unsetId {
__id_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 1:
if (fieldType == TType_I32) {
int32_t fieldValue = [inProtocol readI32];
[self setId: fieldValue];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"deleteAdminComment_args"];
if (__id_isset) {
[outProtocol writeFieldBeginWithName: @"id" type: TType_I32 fieldID: 1];
[outProtocol writeI32: __id];
[outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"deleteAdminComment_args("];
[ms appendString: @"id:"];
[ms appendFormat: @"%i", __id];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@interface DeleteAdminComment_result : NSObject <TBase, NSCoding> {
BOOL __success;

BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) init;
- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BOOL) success;
- (void) setSuccess: (BOOL) success;
#endif
- (BOOL) successIsSet;

@end

@implementation DeleteAdminComment_result

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithSuccess: (BOOL) success
{
self = [super init];
__success = success;
__success_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"success"])
{
__success = [decoder decodeBoolForKey: @"success"];
__success_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__success_isset)
{
[encoder encodeBool: __success forKey: @"success"];
}
}

- (void) dealloc
{
[super dealloc_stub];
}

- (BOOL) success {
return __success;
}

- (void) setSuccess: (BOOL) success {
__success = success;
__success_isset = YES;
}

- (BOOL) successIsSet {
return __success_isset;
}

- (void) unsetSuccess {
__success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 0:
if (fieldType == TType_BOOL) {
BOOL fieldValue = [inProtocol readBool];
[self setSuccess: fieldValue];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"DeleteAdminComment_result"];

if (__success_isset) {
[outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
[outProtocol writeBool: __success];
[outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"DeleteAdminComment_result("];
[ms appendString: @"success:"];
[ms appendFormat: @"%i", __success];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@implementation ISocialAdminServiceDeleteAdminCommentClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
self = [super init];
inProtocol = [anInProtocol retain_stub];
outProtocol = [anOutProtocol retain_stub];
return self;
}

- (void) dealloc
{
[inProtocol release_stub];
[outProtocol release_stub];
[super dealloc_stub];
}

- (void) send_deleteAdminComment: (int32_t) id
{
[outProtocol writeMessageBeginWithName: @"deleteAdminComment" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"deleteAdminComment_args"];
[outProtocol writeFieldBeginWithName: @"id" type: TType_I32 fieldID: 1];
[outProtocol writeI32: id];
[outProtocol writeFieldEnd];
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
}

- (BOOL) recv_deleteAdminComment
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
DeleteAdminComment_result * result = [[[DeleteAdminComment_result alloc] init] autorelease_stub];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"deleteAdminComment failed: unknown result"];
}

- (BOOL) deleteAdminComment: (int32_t) id
{
[self send_deleteAdminComment : id];
return [self recv_deleteAdminComment];
}

@end

@implementation ISocialAdminServiceDeleteAdminCommentProcessor

- (id) initWithISocialAdminServiceDeleteAdminComment: (id <ISocialAdminServiceDeleteAdminComment>) service
{
self = [super init];
if (!self) {
  return nil;
}
mService = [service retain_stub];
mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
{
SEL s = @selector(process_deleteAdminComment_withSequenceID:inProtocol:outProtocol:);
NSMethodSignature * sig = [self methodSignatureForSelector: s];
NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
[invocation setSelector: s];
[invocation retainArguments];
[mMethodMap setValue: invocation forKey: @"deleteAdminComment"];
}
return self;
}

- (id<ISocialAdminServiceDeleteAdminComment>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_deleteAdminComment_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
deleteAdminComment_args * args = [[deleteAdminComment_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
DeleteAdminComment_result * result = [[DeleteAdminComment_result alloc] init];
[result setSuccess: [mService deleteAdminComment: [args id]]];
[outProtocol writeMessageBeginWithName: @"deleteAdminComment"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) dealloc
{
[mService release_stub];
[mMethodMap release_stub];
[super dealloc_stub];
}

@end

@interface addAdminReason_args : NSObject <TBase, NSCoding> {
TAdminReason * __reason;

BOOL __reason_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=reason, setter=setReason:) TAdminReason * reason;
#endif

- (id) init;
- (id) initWithReason: (TAdminReason *) reason;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (TAdminReason *) reason;
- (void) setReason: (TAdminReason *) reason;
#endif
- (BOOL) reasonIsSet;

@end

@implementation addAdminReason_args

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithReason: (TAdminReason *) reason
{
self = [super init];
__reason = [reason retain_stub];
__reason_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"reason"])
{
__reason = [[decoder decodeObjectForKey: @"reason"] retain_stub];
__reason_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__reason_isset)
{
[encoder encodeObject: __reason forKey: @"reason"];
}
}

- (void) dealloc
{
[__reason release_stub];
[super dealloc_stub];
}

- (TAdminReason *) reason {
return [[__reason retain_stub] autorelease_stub];
}

- (void) setReason: (TAdminReason *) reason {
[reason retain_stub];
[__reason release_stub];
__reason = reason;
__reason_isset = YES;
}

- (BOOL) reasonIsSet {
return __reason_isset;
}

- (void) unsetReason {
[__reason release_stub];
__reason = nil;
__reason_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 1:
if (fieldType == TType_STRUCT) {
TAdminReason *fieldValue = [[TAdminReason alloc] init];
[fieldValue read: inProtocol];
[self setReason: fieldValue];
[fieldValue release_stub];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"addAdminReason_args"];
if (__reason_isset) {
if (__reason != nil) {
[outProtocol writeFieldBeginWithName: @"reason" type: TType_STRUCT fieldID: 1];
[__reason write: outProtocol];
[outProtocol writeFieldEnd];
}
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"addAdminReason_args("];
[ms appendString: @"reason:"];
[ms appendFormat: @"%@", __reason];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@interface AddAdminReason_result : NSObject <TBase, NSCoding> {
BOOL __success;

BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) init;
- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BOOL) success;
- (void) setSuccess: (BOOL) success;
#endif
- (BOOL) successIsSet;

@end

@implementation AddAdminReason_result

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithSuccess: (BOOL) success
{
self = [super init];
__success = success;
__success_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"success"])
{
__success = [decoder decodeBoolForKey: @"success"];
__success_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__success_isset)
{
[encoder encodeBool: __success forKey: @"success"];
}
}

- (void) dealloc
{
[super dealloc_stub];
}

- (BOOL) success {
return __success;
}

- (void) setSuccess: (BOOL) success {
__success = success;
__success_isset = YES;
}

- (BOOL) successIsSet {
return __success_isset;
}

- (void) unsetSuccess {
__success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 0:
if (fieldType == TType_BOOL) {
BOOL fieldValue = [inProtocol readBool];
[self setSuccess: fieldValue];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"AddAdminReason_result"];

if (__success_isset) {
[outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
[outProtocol writeBool: __success];
[outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"AddAdminReason_result("];
[ms appendString: @"success:"];
[ms appendFormat: @"%i", __success];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@implementation ISocialAdminServiceAddAdminReasonClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
self = [super init];
inProtocol = [anInProtocol retain_stub];
outProtocol = [anOutProtocol retain_stub];
return self;
}

- (void) dealloc
{
[inProtocol release_stub];
[outProtocol release_stub];
[super dealloc_stub];
}

- (void) send_addAdminReason: (TAdminReason *) reason
{
[outProtocol writeMessageBeginWithName: @"addAdminReason" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"addAdminReason_args"];
if (reason != nil){
[outProtocol writeFieldBeginWithName: @"reason" type: TType_STRUCT fieldID: 1];
[reason write: outProtocol];
[outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
}

- (BOOL) recv_addAdminReason
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
AddAdminReason_result * result = [[[AddAdminReason_result alloc] init] autorelease_stub];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"addAdminReason failed: unknown result"];
}

- (BOOL) addAdminReason: (TAdminReason *) reason
{
[self send_addAdminReason : reason];
return [self recv_addAdminReason];
}

@end

@implementation ISocialAdminServiceAddAdminReasonProcessor

- (id) initWithISocialAdminServiceAddAdminReason: (id <ISocialAdminServiceAddAdminReason>) service
{
self = [super init];
if (!self) {
  return nil;
}
mService = [service retain_stub];
mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
{
SEL s = @selector(process_addAdminReason_withSequenceID:inProtocol:outProtocol:);
NSMethodSignature * sig = [self methodSignatureForSelector: s];
NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
[invocation setSelector: s];
[invocation retainArguments];
[mMethodMap setValue: invocation forKey: @"addAdminReason"];
}
return self;
}

- (id<ISocialAdminServiceAddAdminReason>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_addAdminReason_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
addAdminReason_args * args = [[addAdminReason_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
AddAdminReason_result * result = [[AddAdminReason_result alloc] init];
[result setSuccess: [mService addAdminReason: [args reason]]];
[outProtocol writeMessageBeginWithName: @"addAdminReason"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) dealloc
{
[mService release_stub];
[mMethodMap release_stub];
[super dealloc_stub];
}

@end

@interface deleteAdminReason_args : NSObject <TBase, NSCoding> {
int32_t __id;

BOOL __id_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=id, setter=setId:) int32_t id;
#endif

- (id) init;
- (id) initWithId: (int32_t) id;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (int32_t) id;
- (void) setId: (int32_t) id;
#endif
- (BOOL) idIsSet;

@end

@implementation deleteAdminReason_args

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithId: (int32_t) id
{
self = [super init];
__id = id;
__id_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"id"])
{
__id = [decoder decodeInt32ForKey: @"id"];
__id_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__id_isset)
{
[encoder encodeInt32: __id forKey: @"id"];
}
}

- (void) dealloc
{
[super dealloc_stub];
}

- (int32_t) id {
return __id;
}

- (void) setId: (int32_t) id {
__id = id;
__id_isset = YES;
}

- (BOOL) idIsSet {
return __id_isset;
}

- (void) unsetId {
__id_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 1:
if (fieldType == TType_I32) {
int32_t fieldValue = [inProtocol readI32];
[self setId: fieldValue];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"deleteAdminReason_args"];
if (__id_isset) {
[outProtocol writeFieldBeginWithName: @"id" type: TType_I32 fieldID: 1];
[outProtocol writeI32: __id];
[outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"deleteAdminReason_args("];
[ms appendString: @"id:"];
[ms appendFormat: @"%i", __id];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@interface DeleteAdminReason_result : NSObject <TBase, NSCoding> {
BOOL __success;

BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) init;
- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BOOL) success;
- (void) setSuccess: (BOOL) success;
#endif
- (BOOL) successIsSet;

@end

@implementation DeleteAdminReason_result

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithSuccess: (BOOL) success
{
self = [super init];
__success = success;
__success_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"success"])
{
__success = [decoder decodeBoolForKey: @"success"];
__success_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__success_isset)
{
[encoder encodeBool: __success forKey: @"success"];
}
}

- (void) dealloc
{
[super dealloc_stub];
}

- (BOOL) success {
return __success;
}

- (void) setSuccess: (BOOL) success {
__success = success;
__success_isset = YES;
}

- (BOOL) successIsSet {
return __success_isset;
}

- (void) unsetSuccess {
__success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 0:
if (fieldType == TType_BOOL) {
BOOL fieldValue = [inProtocol readBool];
[self setSuccess: fieldValue];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"DeleteAdminReason_result"];

if (__success_isset) {
[outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
[outProtocol writeBool: __success];
[outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"DeleteAdminReason_result("];
[ms appendString: @"success:"];
[ms appendFormat: @"%i", __success];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@implementation ISocialAdminServiceDeleteAdminReasonClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
self = [super init];
inProtocol = [anInProtocol retain_stub];
outProtocol = [anOutProtocol retain_stub];
return self;
}

- (void) dealloc
{
[inProtocol release_stub];
[outProtocol release_stub];
[super dealloc_stub];
}

- (void) send_deleteAdminReason: (int32_t) id
{
[outProtocol writeMessageBeginWithName: @"deleteAdminReason" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"deleteAdminReason_args"];
[outProtocol writeFieldBeginWithName: @"id" type: TType_I32 fieldID: 1];
[outProtocol writeI32: id];
[outProtocol writeFieldEnd];
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
}

- (BOOL) recv_deleteAdminReason
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
DeleteAdminReason_result * result = [[[DeleteAdminReason_result alloc] init] autorelease_stub];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"deleteAdminReason failed: unknown result"];
}

- (BOOL) deleteAdminReason: (int32_t) id
{
[self send_deleteAdminReason : id];
return [self recv_deleteAdminReason];
}

@end

@implementation ISocialAdminServiceDeleteAdminReasonProcessor

- (id) initWithISocialAdminServiceDeleteAdminReason: (id <ISocialAdminServiceDeleteAdminReason>) service
{
self = [super init];
if (!self) {
  return nil;
}
mService = [service retain_stub];
mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
{
SEL s = @selector(process_deleteAdminReason_withSequenceID:inProtocol:outProtocol:);
NSMethodSignature * sig = [self methodSignatureForSelector: s];
NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
[invocation setSelector: s];
[invocation retainArguments];
[mMethodMap setValue: invocation forKey: @"deleteAdminReason"];
}
return self;
}

- (id<ISocialAdminServiceDeleteAdminReason>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_deleteAdminReason_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
deleteAdminReason_args * args = [[deleteAdminReason_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
DeleteAdminReason_result * result = [[DeleteAdminReason_result alloc] init];
[result setSuccess: [mService deleteAdminReason: [args id]]];
[outProtocol writeMessageBeginWithName: @"deleteAdminReason"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) dealloc
{
[mService release_stub];
[mMethodMap release_stub];
[super dealloc_stub];
}

@end

@interface getAdminPostList_args : NSObject <TBase, NSCoding> {
NSString * __content;
NSString * __mobile;
NSString * __nickName;
int32_t __objType;
int32_t __objId;
int64_t __createTimeStart;
int64_t __createTimeEnd;
int32_t __cityId;
int32_t __communityId;
int32_t __inform;
int32_t __currentPage;
int32_t __pageSize;

BOOL __content_isset;
BOOL __mobile_isset;
BOOL __nickName_isset;
BOOL __objType_isset;
BOOL __objId_isset;
BOOL __createTimeStart_isset;
BOOL __createTimeEnd_isset;
BOOL __cityId_isset;
BOOL __communityId_isset;
BOOL __inform_isset;
BOOL __currentPage_isset;
BOOL __pageSize_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=content, setter=setContent:) NSString * content;
@property (nonatomic, retain, getter=mobile, setter=setMobile:) NSString * mobile;
@property (nonatomic, retain, getter=nickName, setter=setNickName:) NSString * nickName;
@property (nonatomic, getter=objType, setter=setObjType:) int32_t objType;
@property (nonatomic, getter=objId, setter=setObjId:) int32_t objId;
@property (nonatomic, getter=createTimeStart, setter=setCreateTimeStart:) int64_t createTimeStart;
@property (nonatomic, getter=createTimeEnd, setter=setCreateTimeEnd:) int64_t createTimeEnd;
@property (nonatomic, getter=cityId, setter=setCityId:) int32_t cityId;
@property (nonatomic, getter=communityId, setter=setCommunityId:) int32_t communityId;
@property (nonatomic, getter=inform, setter=setInform:) int32_t inform;
@property (nonatomic, getter=currentPage, setter=setCurrentPage:) int32_t currentPage;
@property (nonatomic, getter=pageSize, setter=setPageSize:) int32_t pageSize;
#endif

- (id) init;
- (id) initWithContent: (NSString *) content mobile: (NSString *) mobile nickName: (NSString *) nickName objType: (int32_t) objType objId: (int32_t) objId createTimeStart: (int64_t) createTimeStart createTimeEnd: (int64_t) createTimeEnd cityId: (int32_t) cityId communityId: (int32_t) communityId inform: (int32_t) inform currentPage: (int32_t) currentPage pageSize: (int32_t) pageSize;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) content;
- (void) setContent: (NSString *) content;
#endif
- (BOOL) contentIsSet;

#if !__has_feature(objc_arc)
- (NSString *) mobile;
- (void) setMobile: (NSString *) mobile;
#endif
- (BOOL) mobileIsSet;

#if !__has_feature(objc_arc)
- (NSString *) nickName;
- (void) setNickName: (NSString *) nickName;
#endif
- (BOOL) nickNameIsSet;

#if !__has_feature(objc_arc)
- (int32_t) objType;
- (void) setObjType: (int32_t) objType;
#endif
- (BOOL) objTypeIsSet;

#if !__has_feature(objc_arc)
- (int32_t) objId;
- (void) setObjId: (int32_t) objId;
#endif
- (BOOL) objIdIsSet;

#if !__has_feature(objc_arc)
- (int64_t) createTimeStart;
- (void) setCreateTimeStart: (int64_t) createTimeStart;
#endif
- (BOOL) createTimeStartIsSet;

#if !__has_feature(objc_arc)
- (int64_t) createTimeEnd;
- (void) setCreateTimeEnd: (int64_t) createTimeEnd;
#endif
- (BOOL) createTimeEndIsSet;

#if !__has_feature(objc_arc)
- (int32_t) cityId;
- (void) setCityId: (int32_t) cityId;
#endif
- (BOOL) cityIdIsSet;

#if !__has_feature(objc_arc)
- (int32_t) communityId;
- (void) setCommunityId: (int32_t) communityId;
#endif
- (BOOL) communityIdIsSet;

#if !__has_feature(objc_arc)
- (int32_t) inform;
- (void) setInform: (int32_t) inform;
#endif
- (BOOL) informIsSet;

#if !__has_feature(objc_arc)
- (int32_t) currentPage;
- (void) setCurrentPage: (int32_t) currentPage;
#endif
- (BOOL) currentPageIsSet;

#if !__has_feature(objc_arc)
- (int32_t) pageSize;
- (void) setPageSize: (int32_t) pageSize;
#endif
- (BOOL) pageSizeIsSet;

@end

@implementation getAdminPostList_args

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithContent: (NSString *) content mobile: (NSString *) mobile nickName: (NSString *) nickName objType: (int32_t) objType objId: (int32_t) objId createTimeStart: (int64_t) createTimeStart createTimeEnd: (int64_t) createTimeEnd cityId: (int32_t) cityId communityId: (int32_t) communityId inform: (int32_t) inform currentPage: (int32_t) currentPage pageSize: (int32_t) pageSize
{
self = [super init];
__content = [content retain_stub];
__content_isset = YES;
__mobile = [mobile retain_stub];
__mobile_isset = YES;
__nickName = [nickName retain_stub];
__nickName_isset = YES;
__objType = objType;
__objType_isset = YES;
__objId = objId;
__objId_isset = YES;
__createTimeStart = createTimeStart;
__createTimeStart_isset = YES;
__createTimeEnd = createTimeEnd;
__createTimeEnd_isset = YES;
__cityId = cityId;
__cityId_isset = YES;
__communityId = communityId;
__communityId_isset = YES;
__inform = inform;
__inform_isset = YES;
__currentPage = currentPage;
__currentPage_isset = YES;
__pageSize = pageSize;
__pageSize_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"content"])
{
__content = [[decoder decodeObjectForKey: @"content"] retain_stub];
__content_isset = YES;
}
if ([decoder containsValueForKey: @"mobile"])
{
__mobile = [[decoder decodeObjectForKey: @"mobile"] retain_stub];
__mobile_isset = YES;
}
if ([decoder containsValueForKey: @"nickName"])
{
__nickName = [[decoder decodeObjectForKey: @"nickName"] retain_stub];
__nickName_isset = YES;
}
if ([decoder containsValueForKey: @"objType"])
{
__objType = [decoder decodeInt32ForKey: @"objType"];
__objType_isset = YES;
}
if ([decoder containsValueForKey: @"objId"])
{
__objId = [decoder decodeInt32ForKey: @"objId"];
__objId_isset = YES;
}
if ([decoder containsValueForKey: @"createTimeStart"])
{
__createTimeStart = [decoder decodeInt64ForKey: @"createTimeStart"];
__createTimeStart_isset = YES;
}
if ([decoder containsValueForKey: @"createTimeEnd"])
{
__createTimeEnd = [decoder decodeInt64ForKey: @"createTimeEnd"];
__createTimeEnd_isset = YES;
}
if ([decoder containsValueForKey: @"cityId"])
{
__cityId = [decoder decodeInt32ForKey: @"cityId"];
__cityId_isset = YES;
}
if ([decoder containsValueForKey: @"communityId"])
{
__communityId = [decoder decodeInt32ForKey: @"communityId"];
__communityId_isset = YES;
}
if ([decoder containsValueForKey: @"inform"])
{
__inform = [decoder decodeInt32ForKey: @"inform"];
__inform_isset = YES;
}
if ([decoder containsValueForKey: @"currentPage"])
{
__currentPage = [decoder decodeInt32ForKey: @"currentPage"];
__currentPage_isset = YES;
}
if ([decoder containsValueForKey: @"pageSize"])
{
__pageSize = [decoder decodeInt32ForKey: @"pageSize"];
__pageSize_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__content_isset)
{
[encoder encodeObject: __content forKey: @"content"];
}
if (__mobile_isset)
{
[encoder encodeObject: __mobile forKey: @"mobile"];
}
if (__nickName_isset)
{
[encoder encodeObject: __nickName forKey: @"nickName"];
}
if (__objType_isset)
{
[encoder encodeInt32: __objType forKey: @"objType"];
}
if (__objId_isset)
{
[encoder encodeInt32: __objId forKey: @"objId"];
}
if (__createTimeStart_isset)
{
[encoder encodeInt64: __createTimeStart forKey: @"createTimeStart"];
}
if (__createTimeEnd_isset)
{
[encoder encodeInt64: __createTimeEnd forKey: @"createTimeEnd"];
}
if (__cityId_isset)
{
[encoder encodeInt32: __cityId forKey: @"cityId"];
}
if (__communityId_isset)
{
[encoder encodeInt32: __communityId forKey: @"communityId"];
}
if (__inform_isset)
{
[encoder encodeInt32: __inform forKey: @"inform"];
}
if (__currentPage_isset)
{
[encoder encodeInt32: __currentPage forKey: @"currentPage"];
}
if (__pageSize_isset)
{
[encoder encodeInt32: __pageSize forKey: @"pageSize"];
}
}

- (void) dealloc
{
[__content release_stub];
[__mobile release_stub];
[__nickName release_stub];
[super dealloc_stub];
}

- (NSString *) content {
return [[__content retain_stub] autorelease_stub];
}

- (void) setContent: (NSString *) content {
[content retain_stub];
[__content release_stub];
__content = content;
__content_isset = YES;
}

- (BOOL) contentIsSet {
return __content_isset;
}

- (void) unsetContent {
[__content release_stub];
__content = nil;
__content_isset = NO;
}

- (NSString *) mobile {
return [[__mobile retain_stub] autorelease_stub];
}

- (void) setMobile: (NSString *) mobile {
[mobile retain_stub];
[__mobile release_stub];
__mobile = mobile;
__mobile_isset = YES;
}

- (BOOL) mobileIsSet {
return __mobile_isset;
}

- (void) unsetMobile {
[__mobile release_stub];
__mobile = nil;
__mobile_isset = NO;
}

- (NSString *) nickName {
return [[__nickName retain_stub] autorelease_stub];
}

- (void) setNickName: (NSString *) nickName {
[nickName retain_stub];
[__nickName release_stub];
__nickName = nickName;
__nickName_isset = YES;
}

- (BOOL) nickNameIsSet {
return __nickName_isset;
}

- (void) unsetNickName {
[__nickName release_stub];
__nickName = nil;
__nickName_isset = NO;
}

- (int32_t) objType {
return __objType;
}

- (void) setObjType: (int32_t) objType {
__objType = objType;
__objType_isset = YES;
}

- (BOOL) objTypeIsSet {
return __objType_isset;
}

- (void) unsetObjType {
__objType_isset = NO;
}

- (int32_t) objId {
return __objId;
}

- (void) setObjId: (int32_t) objId {
__objId = objId;
__objId_isset = YES;
}

- (BOOL) objIdIsSet {
return __objId_isset;
}

- (void) unsetObjId {
__objId_isset = NO;
}

- (int64_t) createTimeStart {
return __createTimeStart;
}

- (void) setCreateTimeStart: (int64_t) createTimeStart {
__createTimeStart = createTimeStart;
__createTimeStart_isset = YES;
}

- (BOOL) createTimeStartIsSet {
return __createTimeStart_isset;
}

- (void) unsetCreateTimeStart {
__createTimeStart_isset = NO;
}

- (int64_t) createTimeEnd {
return __createTimeEnd;
}

- (void) setCreateTimeEnd: (int64_t) createTimeEnd {
__createTimeEnd = createTimeEnd;
__createTimeEnd_isset = YES;
}

- (BOOL) createTimeEndIsSet {
return __createTimeEnd_isset;
}

- (void) unsetCreateTimeEnd {
__createTimeEnd_isset = NO;
}

- (int32_t) cityId {
return __cityId;
}

- (void) setCityId: (int32_t) cityId {
__cityId = cityId;
__cityId_isset = YES;
}

- (BOOL) cityIdIsSet {
return __cityId_isset;
}

- (void) unsetCityId {
__cityId_isset = NO;
}

- (int32_t) communityId {
return __communityId;
}

- (void) setCommunityId: (int32_t) communityId {
__communityId = communityId;
__communityId_isset = YES;
}

- (BOOL) communityIdIsSet {
return __communityId_isset;
}

- (void) unsetCommunityId {
__communityId_isset = NO;
}

- (int32_t) inform {
return __inform;
}

- (void) setInform: (int32_t) inform {
__inform = inform;
__inform_isset = YES;
}

- (BOOL) informIsSet {
return __inform_isset;
}

- (void) unsetInform {
__inform_isset = NO;
}

- (int32_t) currentPage {
return __currentPage;
}

- (void) setCurrentPage: (int32_t) currentPage {
__currentPage = currentPage;
__currentPage_isset = YES;
}

- (BOOL) currentPageIsSet {
return __currentPage_isset;
}

- (void) unsetCurrentPage {
__currentPage_isset = NO;
}

- (int32_t) pageSize {
return __pageSize;
}

- (void) setPageSize: (int32_t) pageSize {
__pageSize = pageSize;
__pageSize_isset = YES;
}

- (BOOL) pageSizeIsSet {
return __pageSize_isset;
}

- (void) unsetPageSize {
__pageSize_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 1:
if (fieldType == TType_STRING) {
NSString * fieldValue = [inProtocol readString];
[self setContent: fieldValue];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
case 2:
if (fieldType == TType_STRING) {
NSString * fieldValue = [inProtocol readString];
[self setMobile: fieldValue];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
case 3:
if (fieldType == TType_STRING) {
NSString * fieldValue = [inProtocol readString];
[self setNickName: fieldValue];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
case 4:
if (fieldType == TType_I32) {
int32_t fieldValue = [inProtocol readI32];
[self setObjType: fieldValue];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
case 5:
if (fieldType == TType_I32) {
int32_t fieldValue = [inProtocol readI32];
[self setObjId: fieldValue];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
case 6:
if (fieldType == TType_I64) {
int64_t fieldValue = [inProtocol readI64];
[self setCreateTimeStart: fieldValue];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
case 7:
if (fieldType == TType_I64) {
int64_t fieldValue = [inProtocol readI64];
[self setCreateTimeEnd: fieldValue];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
case 8:
if (fieldType == TType_I32) {
int32_t fieldValue = [inProtocol readI32];
[self setCityId: fieldValue];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
case 9:
if (fieldType == TType_I32) {
int32_t fieldValue = [inProtocol readI32];
[self setCommunityId: fieldValue];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
case 10:
if (fieldType == TType_I32) {
int32_t fieldValue = [inProtocol readI32];
[self setInform: fieldValue];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
case 11:
if (fieldType == TType_I32) {
int32_t fieldValue = [inProtocol readI32];
[self setCurrentPage: fieldValue];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
case 12:
if (fieldType == TType_I32) {
int32_t fieldValue = [inProtocol readI32];
[self setPageSize: fieldValue];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"getAdminPostList_args"];
if (__content_isset) {
if (__content != nil) {
[outProtocol writeFieldBeginWithName: @"content" type: TType_STRING fieldID: 1];
[outProtocol writeString: __content];
[outProtocol writeFieldEnd];
}
}
if (__mobile_isset) {
if (__mobile != nil) {
[outProtocol writeFieldBeginWithName: @"mobile" type: TType_STRING fieldID: 2];
[outProtocol writeString: __mobile];
[outProtocol writeFieldEnd];
}
}
if (__nickName_isset) {
if (__nickName != nil) {
[outProtocol writeFieldBeginWithName: @"nickName" type: TType_STRING fieldID: 3];
[outProtocol writeString: __nickName];
[outProtocol writeFieldEnd];
}
}
if (__objType_isset) {
[outProtocol writeFieldBeginWithName: @"objType" type: TType_I32 fieldID: 4];
[outProtocol writeI32: __objType];
[outProtocol writeFieldEnd];
}
if (__objId_isset) {
[outProtocol writeFieldBeginWithName: @"objId" type: TType_I32 fieldID: 5];
[outProtocol writeI32: __objId];
[outProtocol writeFieldEnd];
}
if (__createTimeStart_isset) {
[outProtocol writeFieldBeginWithName: @"createTimeStart" type: TType_I64 fieldID: 6];
[outProtocol writeI64: __createTimeStart];
[outProtocol writeFieldEnd];
}
if (__createTimeEnd_isset) {
[outProtocol writeFieldBeginWithName: @"createTimeEnd" type: TType_I64 fieldID: 7];
[outProtocol writeI64: __createTimeEnd];
[outProtocol writeFieldEnd];
}
if (__cityId_isset) {
[outProtocol writeFieldBeginWithName: @"cityId" type: TType_I32 fieldID: 8];
[outProtocol writeI32: __cityId];
[outProtocol writeFieldEnd];
}
if (__communityId_isset) {
[outProtocol writeFieldBeginWithName: @"communityId" type: TType_I32 fieldID: 9];
[outProtocol writeI32: __communityId];
[outProtocol writeFieldEnd];
}
if (__inform_isset) {
[outProtocol writeFieldBeginWithName: @"inform" type: TType_I32 fieldID: 10];
[outProtocol writeI32: __inform];
[outProtocol writeFieldEnd];
}
if (__currentPage_isset) {
[outProtocol writeFieldBeginWithName: @"currentPage" type: TType_I32 fieldID: 11];
[outProtocol writeI32: __currentPage];
[outProtocol writeFieldEnd];
}
if (__pageSize_isset) {
[outProtocol writeFieldBeginWithName: @"pageSize" type: TType_I32 fieldID: 12];
[outProtocol writeI32: __pageSize];
[outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"getAdminPostList_args("];
[ms appendString: @"content:"];
[ms appendFormat: @"\"%@\"", __content];
[ms appendString: @",mobile:"];
[ms appendFormat: @"\"%@\"", __mobile];
[ms appendString: @",nickName:"];
[ms appendFormat: @"\"%@\"", __nickName];
[ms appendString: @",objType:"];
[ms appendFormat: @"%i", __objType];
[ms appendString: @",objId:"];
[ms appendFormat: @"%i", __objId];
[ms appendString: @",createTimeStart:"];
[ms appendFormat: @"%qi", __createTimeStart];
[ms appendString: @",createTimeEnd:"];
[ms appendFormat: @"%qi", __createTimeEnd];
[ms appendString: @",cityId:"];
[ms appendFormat: @"%i", __cityId];
[ms appendString: @",communityId:"];
[ms appendFormat: @"%i", __communityId];
[ms appendString: @",inform:"];
[ms appendFormat: @"%i", __inform];
[ms appendString: @",currentPage:"];
[ms appendFormat: @"%i", __currentPage];
[ms appendString: @",pageSize:"];
[ms appendFormat: @"%i", __pageSize];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@interface GetAdminPostList_result : NSObject <TBase, NSCoding> {
TAdminPostQueryData * __success;

BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) TAdminPostQueryData * success;
#endif

- (id) init;
- (id) initWithSuccess: (TAdminPostQueryData *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (TAdminPostQueryData *) success;
- (void) setSuccess: (TAdminPostQueryData *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation GetAdminPostList_result

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithSuccess: (TAdminPostQueryData *) success
{
self = [super init];
__success = [success retain_stub];
__success_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"success"])
{
__success = [[decoder decodeObjectForKey: @"success"] retain_stub];
__success_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__success_isset)
{
[encoder encodeObject: __success forKey: @"success"];
}
}

- (void) dealloc
{
[__success release_stub];
[super dealloc_stub];
}

- (TAdminPostQueryData *) success {
return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (TAdminPostQueryData *) success {
[success retain_stub];
[__success release_stub];
__success = success;
__success_isset = YES;
}

- (BOOL) successIsSet {
return __success_isset;
}

- (void) unsetSuccess {
[__success release_stub];
__success = nil;
__success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 0:
if (fieldType == TType_STRUCT) {
TAdminPostQueryData *fieldValue = [[TAdminPostQueryData alloc] init];
[fieldValue read: inProtocol];
[self setSuccess: fieldValue];
[fieldValue release_stub];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"GetAdminPostList_result"];

if (__success_isset) {
if (__success != nil) {
[outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
[__success write: outProtocol];
[outProtocol writeFieldEnd];
}
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"GetAdminPostList_result("];
[ms appendString: @"success:"];
[ms appendFormat: @"%@", __success];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@implementation ISocialAdminServiceGetAdminPostListClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
self = [super init];
inProtocol = [anInProtocol retain_stub];
outProtocol = [anOutProtocol retain_stub];
return self;
}

- (void) dealloc
{
[inProtocol release_stub];
[outProtocol release_stub];
[super dealloc_stub];
}

- (void) send_getAdminPostList: (NSString *) content mobile: (NSString *) mobile nickName: (NSString *) nickName objType: (int32_t) objType objId: (int32_t) objId createTimeStart: (int64_t) createTimeStart createTimeEnd: (int64_t) createTimeEnd cityId: (int32_t) cityId communityId: (int32_t) communityId inform: (int32_t) inform currentPage: (int32_t) currentPage pageSize: (int32_t) pageSize
{
[outProtocol writeMessageBeginWithName: @"getAdminPostList" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"getAdminPostList_args"];
if (content != nil){
[outProtocol writeFieldBeginWithName: @"content" type: TType_STRING fieldID: 1];
[outProtocol writeString: content];
[outProtocol writeFieldEnd];
}
if (mobile != nil){
[outProtocol writeFieldBeginWithName: @"mobile" type: TType_STRING fieldID: 2];
[outProtocol writeString: mobile];
[outProtocol writeFieldEnd];
}
if (nickName != nil){
[outProtocol writeFieldBeginWithName: @"nickName" type: TType_STRING fieldID: 3];
[outProtocol writeString: nickName];
[outProtocol writeFieldEnd];
}
[outProtocol writeFieldBeginWithName: @"objType" type: TType_I32 fieldID: 4];
[outProtocol writeI32: objType];
[outProtocol writeFieldEnd];
[outProtocol writeFieldBeginWithName: @"objId" type: TType_I32 fieldID: 5];
[outProtocol writeI32: objId];
[outProtocol writeFieldEnd];
[outProtocol writeFieldBeginWithName: @"createTimeStart" type: TType_I64 fieldID: 6];
[outProtocol writeI64: createTimeStart];
[outProtocol writeFieldEnd];
[outProtocol writeFieldBeginWithName: @"createTimeEnd" type: TType_I64 fieldID: 7];
[outProtocol writeI64: createTimeEnd];
[outProtocol writeFieldEnd];
[outProtocol writeFieldBeginWithName: @"cityId" type: TType_I32 fieldID: 8];
[outProtocol writeI32: cityId];
[outProtocol writeFieldEnd];
[outProtocol writeFieldBeginWithName: @"communityId" type: TType_I32 fieldID: 9];
[outProtocol writeI32: communityId];
[outProtocol writeFieldEnd];
[outProtocol writeFieldBeginWithName: @"inform" type: TType_I32 fieldID: 10];
[outProtocol writeI32: inform];
[outProtocol writeFieldEnd];
[outProtocol writeFieldBeginWithName: @"currentPage" type: TType_I32 fieldID: 11];
[outProtocol writeI32: currentPage];
[outProtocol writeFieldEnd];
[outProtocol writeFieldBeginWithName: @"pageSize" type: TType_I32 fieldID: 12];
[outProtocol writeI32: pageSize];
[outProtocol writeFieldEnd];
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
}

- (TAdminPostQueryData *) recv_getAdminPostList
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
GetAdminPostList_result * result = [[[GetAdminPostList_result alloc] init] autorelease_stub];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"getAdminPostList failed: unknown result"];
}

- (TAdminPostQueryData *) getAdminPostList: (NSString *) content mobile: (NSString *) mobile nickName: (NSString *) nickName objType: (int32_t) objType objId: (int32_t) objId createTimeStart: (int64_t) createTimeStart createTimeEnd: (int64_t) createTimeEnd cityId: (int32_t) cityId communityId: (int32_t) communityId inform: (int32_t) inform currentPage: (int32_t) currentPage pageSize: (int32_t) pageSize
{
[self send_getAdminPostList : content mobile: mobile nickName: nickName objType: objType objId: objId createTimeStart: createTimeStart createTimeEnd: createTimeEnd cityId: cityId communityId: communityId inform: inform currentPage: currentPage pageSize: pageSize];
return [self recv_getAdminPostList];
}

@end

@implementation ISocialAdminServiceGetAdminPostListProcessor

- (id) initWithISocialAdminServiceGetAdminPostList: (id <ISocialAdminServiceGetAdminPostList>) service
{
self = [super init];
if (!self) {
  return nil;
}
mService = [service retain_stub];
mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
{
SEL s = @selector(process_getAdminPostList_withSequenceID:inProtocol:outProtocol:);
NSMethodSignature * sig = [self methodSignatureForSelector: s];
NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
[invocation setSelector: s];
[invocation retainArguments];
[mMethodMap setValue: invocation forKey: @"getAdminPostList"];
}
return self;
}

- (id<ISocialAdminServiceGetAdminPostList>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_getAdminPostList_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
getAdminPostList_args * args = [[getAdminPostList_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
GetAdminPostList_result * result = [[GetAdminPostList_result alloc] init];
[result setSuccess: [mService getAdminPostList: [args content] mobile: [args mobile] nickName: [args nickName] objType: [args objType] objId: [args objId] createTimeStart: [args createTimeStart] createTimeEnd: [args createTimeEnd] cityId: [args cityId] communityId: [args communityId] inform: [args inform] currentPage: [args currentPage] pageSize: [args pageSize]]];
[outProtocol writeMessageBeginWithName: @"getAdminPostList"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) dealloc
{
[mService release_stub];
[mMethodMap release_stub];
[super dealloc_stub];
}

@end

@interface updateAdminPostStatus_args : NSObject <TBase, NSCoding> {
TAdminPost * __post;

BOOL __post_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=post, setter=setPost:) TAdminPost * post;
#endif

- (id) init;
- (id) initWithPost: (TAdminPost *) post;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (TAdminPost *) post;
- (void) setPost: (TAdminPost *) post;
#endif
- (BOOL) postIsSet;

@end

@implementation updateAdminPostStatus_args

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithPost: (TAdminPost *) post
{
self = [super init];
__post = [post retain_stub];
__post_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"post"])
{
__post = [[decoder decodeObjectForKey: @"post"] retain_stub];
__post_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__post_isset)
{
[encoder encodeObject: __post forKey: @"post"];
}
}

- (void) dealloc
{
[__post release_stub];
[super dealloc_stub];
}

- (TAdminPost *) post {
return [[__post retain_stub] autorelease_stub];
}

- (void) setPost: (TAdminPost *) post {
[post retain_stub];
[__post release_stub];
__post = post;
__post_isset = YES;
}

- (BOOL) postIsSet {
return __post_isset;
}

- (void) unsetPost {
[__post release_stub];
__post = nil;
__post_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 1:
if (fieldType == TType_STRUCT) {
TAdminPost *fieldValue = [[TAdminPost alloc] init];
[fieldValue read: inProtocol];
[self setPost: fieldValue];
[fieldValue release_stub];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"updateAdminPostStatus_args"];
if (__post_isset) {
if (__post != nil) {
[outProtocol writeFieldBeginWithName: @"post" type: TType_STRUCT fieldID: 1];
[__post write: outProtocol];
[outProtocol writeFieldEnd];
}
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"updateAdminPostStatus_args("];
[ms appendString: @"post:"];
[ms appendFormat: @"%@", __post];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@interface UpdateAdminPostStatus_result : NSObject <TBase, NSCoding> {
BOOL __success;

BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) init;
- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BOOL) success;
- (void) setSuccess: (BOOL) success;
#endif
- (BOOL) successIsSet;

@end

@implementation UpdateAdminPostStatus_result

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithSuccess: (BOOL) success
{
self = [super init];
__success = success;
__success_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"success"])
{
__success = [decoder decodeBoolForKey: @"success"];
__success_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__success_isset)
{
[encoder encodeBool: __success forKey: @"success"];
}
}

- (void) dealloc
{
[super dealloc_stub];
}

- (BOOL) success {
return __success;
}

- (void) setSuccess: (BOOL) success {
__success = success;
__success_isset = YES;
}

- (BOOL) successIsSet {
return __success_isset;
}

- (void) unsetSuccess {
__success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 0:
if (fieldType == TType_BOOL) {
BOOL fieldValue = [inProtocol readBool];
[self setSuccess: fieldValue];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"UpdateAdminPostStatus_result"];

if (__success_isset) {
[outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
[outProtocol writeBool: __success];
[outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"UpdateAdminPostStatus_result("];
[ms appendString: @"success:"];
[ms appendFormat: @"%i", __success];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@implementation ISocialAdminServiceUpdateAdminPostStatusClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
self = [super init];
inProtocol = [anInProtocol retain_stub];
outProtocol = [anOutProtocol retain_stub];
return self;
}

- (void) dealloc
{
[inProtocol release_stub];
[outProtocol release_stub];
[super dealloc_stub];
}

- (void) send_updateAdminPostStatus: (TAdminPost *) post
{
[outProtocol writeMessageBeginWithName: @"updateAdminPostStatus" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"updateAdminPostStatus_args"];
if (post != nil){
[outProtocol writeFieldBeginWithName: @"post" type: TType_STRUCT fieldID: 1];
[post write: outProtocol];
[outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
}

- (BOOL) recv_updateAdminPostStatus
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
UpdateAdminPostStatus_result * result = [[[UpdateAdminPostStatus_result alloc] init] autorelease_stub];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"updateAdminPostStatus failed: unknown result"];
}

- (BOOL) updateAdminPostStatus: (TAdminPost *) post
{
[self send_updateAdminPostStatus : post];
return [self recv_updateAdminPostStatus];
}

@end

@implementation ISocialAdminServiceUpdateAdminPostStatusProcessor

- (id) initWithISocialAdminServiceUpdateAdminPostStatus: (id <ISocialAdminServiceUpdateAdminPostStatus>) service
{
self = [super init];
if (!self) {
  return nil;
}
mService = [service retain_stub];
mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
{
SEL s = @selector(process_updateAdminPostStatus_withSequenceID:inProtocol:outProtocol:);
NSMethodSignature * sig = [self methodSignatureForSelector: s];
NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
[invocation setSelector: s];
[invocation retainArguments];
[mMethodMap setValue: invocation forKey: @"updateAdminPostStatus"];
}
return self;
}

- (id<ISocialAdminServiceUpdateAdminPostStatus>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_updateAdminPostStatus_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
updateAdminPostStatus_args * args = [[updateAdminPostStatus_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
UpdateAdminPostStatus_result * result = [[UpdateAdminPostStatus_result alloc] init];
[result setSuccess: [mService updateAdminPostStatus: [args post]]];
[outProtocol writeMessageBeginWithName: @"updateAdminPostStatus"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) dealloc
{
[mService release_stub];
[mMethodMap release_stub];
[super dealloc_stub];
}

@end

@interface deletePostInformFromPostId_args : NSObject <TBase, NSCoding> {
int32_t __postId;

BOOL __postId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=postId, setter=setPostId:) int32_t postId;
#endif

- (id) init;
- (id) initWithPostId: (int32_t) postId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (int32_t) postId;
- (void) setPostId: (int32_t) postId;
#endif
- (BOOL) postIdIsSet;

@end

@implementation deletePostInformFromPostId_args

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithPostId: (int32_t) postId
{
self = [super init];
__postId = postId;
__postId_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"postId"])
{
__postId = [decoder decodeInt32ForKey: @"postId"];
__postId_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__postId_isset)
{
[encoder encodeInt32: __postId forKey: @"postId"];
}
}

- (void) dealloc
{
[super dealloc_stub];
}

- (int32_t) postId {
return __postId;
}

- (void) setPostId: (int32_t) postId {
__postId = postId;
__postId_isset = YES;
}

- (BOOL) postIdIsSet {
return __postId_isset;
}

- (void) unsetPostId {
__postId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 1:
if (fieldType == TType_I32) {
int32_t fieldValue = [inProtocol readI32];
[self setPostId: fieldValue];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"deletePostInformFromPostId_args"];
if (__postId_isset) {
[outProtocol writeFieldBeginWithName: @"postId" type: TType_I32 fieldID: 1];
[outProtocol writeI32: __postId];
[outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"deletePostInformFromPostId_args("];
[ms appendString: @"postId:"];
[ms appendFormat: @"%i", __postId];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@interface DeletePostInformFromPostId_result : NSObject <TBase, NSCoding> {
BOOL __success;

BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) init;
- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BOOL) success;
- (void) setSuccess: (BOOL) success;
#endif
- (BOOL) successIsSet;

@end

@implementation DeletePostInformFromPostId_result

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithSuccess: (BOOL) success
{
self = [super init];
__success = success;
__success_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"success"])
{
__success = [decoder decodeBoolForKey: @"success"];
__success_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__success_isset)
{
[encoder encodeBool: __success forKey: @"success"];
}
}

- (void) dealloc
{
[super dealloc_stub];
}

- (BOOL) success {
return __success;
}

- (void) setSuccess: (BOOL) success {
__success = success;
__success_isset = YES;
}

- (BOOL) successIsSet {
return __success_isset;
}

- (void) unsetSuccess {
__success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 0:
if (fieldType == TType_BOOL) {
BOOL fieldValue = [inProtocol readBool];
[self setSuccess: fieldValue];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"DeletePostInformFromPostId_result"];

if (__success_isset) {
[outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
[outProtocol writeBool: __success];
[outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"DeletePostInformFromPostId_result("];
[ms appendString: @"success:"];
[ms appendFormat: @"%i", __success];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@implementation ISocialAdminServiceDeletePostInformFromPostIdClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
self = [super init];
inProtocol = [anInProtocol retain_stub];
outProtocol = [anOutProtocol retain_stub];
return self;
}

- (void) dealloc
{
[inProtocol release_stub];
[outProtocol release_stub];
[super dealloc_stub];
}

- (void) send_deletePostInformFromPostId: (int32_t) postId
{
[outProtocol writeMessageBeginWithName: @"deletePostInformFromPostId" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"deletePostInformFromPostId_args"];
[outProtocol writeFieldBeginWithName: @"postId" type: TType_I32 fieldID: 1];
[outProtocol writeI32: postId];
[outProtocol writeFieldEnd];
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
}

- (BOOL) recv_deletePostInformFromPostId
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
DeletePostInformFromPostId_result * result = [[[DeletePostInformFromPostId_result alloc] init] autorelease_stub];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"deletePostInformFromPostId failed: unknown result"];
}

- (BOOL) deletePostInformFromPostId: (int32_t) postId
{
[self send_deletePostInformFromPostId : postId];
return [self recv_deletePostInformFromPostId];
}

@end

@implementation ISocialAdminServiceDeletePostInformFromPostIdProcessor

- (id) initWithISocialAdminServiceDeletePostInformFromPostId: (id <ISocialAdminServiceDeletePostInformFromPostId>) service
{
self = [super init];
if (!self) {
  return nil;
}
mService = [service retain_stub];
mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
{
SEL s = @selector(process_deletePostInformFromPostId_withSequenceID:inProtocol:outProtocol:);
NSMethodSignature * sig = [self methodSignatureForSelector: s];
NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
[invocation setSelector: s];
[invocation retainArguments];
[mMethodMap setValue: invocation forKey: @"deletePostInformFromPostId"];
}
return self;
}

- (id<ISocialAdminServiceDeletePostInformFromPostId>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_deletePostInformFromPostId_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
deletePostInformFromPostId_args * args = [[deletePostInformFromPostId_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
DeletePostInformFromPostId_result * result = [[DeletePostInformFromPostId_result alloc] init];
[result setSuccess: [mService deletePostInformFromPostId: [args postId]]];
[outProtocol writeMessageBeginWithName: @"deletePostInformFromPostId"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) dealloc
{
[mService release_stub];
[mMethodMap release_stub];
[super dealloc_stub];
}

@end

@interface dealWithIllegal_args : NSObject <TBase, NSCoding> {
int32_t __postId;

BOOL __postId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=postId, setter=setPostId:) int32_t postId;
#endif

- (id) init;
- (id) initWithPostId: (int32_t) postId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (int32_t) postId;
- (void) setPostId: (int32_t) postId;
#endif
- (BOOL) postIdIsSet;

@end

@implementation dealWithIllegal_args

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithPostId: (int32_t) postId
{
self = [super init];
__postId = postId;
__postId_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"postId"])
{
__postId = [decoder decodeInt32ForKey: @"postId"];
__postId_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__postId_isset)
{
[encoder encodeInt32: __postId forKey: @"postId"];
}
}

- (void) dealloc
{
[super dealloc_stub];
}

- (int32_t) postId {
return __postId;
}

- (void) setPostId: (int32_t) postId {
__postId = postId;
__postId_isset = YES;
}

- (BOOL) postIdIsSet {
return __postId_isset;
}

- (void) unsetPostId {
__postId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 1:
if (fieldType == TType_I32) {
int32_t fieldValue = [inProtocol readI32];
[self setPostId: fieldValue];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"dealWithIllegal_args"];
if (__postId_isset) {
[outProtocol writeFieldBeginWithName: @"postId" type: TType_I32 fieldID: 1];
[outProtocol writeI32: __postId];
[outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"dealWithIllegal_args("];
[ms appendString: @"postId:"];
[ms appendFormat: @"%i", __postId];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@interface DealWithIllegal_result : NSObject <TBase, NSCoding> {
BOOL __success;

BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) init;
- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BOOL) success;
- (void) setSuccess: (BOOL) success;
#endif
- (BOOL) successIsSet;

@end

@implementation DealWithIllegal_result

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithSuccess: (BOOL) success
{
self = [super init];
__success = success;
__success_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"success"])
{
__success = [decoder decodeBoolForKey: @"success"];
__success_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__success_isset)
{
[encoder encodeBool: __success forKey: @"success"];
}
}

- (void) dealloc
{
[super dealloc_stub];
}

- (BOOL) success {
return __success;
}

- (void) setSuccess: (BOOL) success {
__success = success;
__success_isset = YES;
}

- (BOOL) successIsSet {
return __success_isset;
}

- (void) unsetSuccess {
__success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 0:
if (fieldType == TType_BOOL) {
BOOL fieldValue = [inProtocol readBool];
[self setSuccess: fieldValue];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"DealWithIllegal_result"];

if (__success_isset) {
[outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
[outProtocol writeBool: __success];
[outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"DealWithIllegal_result("];
[ms appendString: @"success:"];
[ms appendFormat: @"%i", __success];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@implementation ISocialAdminServiceDealWithIllegalClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
self = [super init];
inProtocol = [anInProtocol retain_stub];
outProtocol = [anOutProtocol retain_stub];
return self;
}

- (void) dealloc
{
[inProtocol release_stub];
[outProtocol release_stub];
[super dealloc_stub];
}

- (void) send_dealWithIllegal: (int32_t) postId
{
[outProtocol writeMessageBeginWithName: @"dealWithIllegal" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"dealWithIllegal_args"];
[outProtocol writeFieldBeginWithName: @"postId" type: TType_I32 fieldID: 1];
[outProtocol writeI32: postId];
[outProtocol writeFieldEnd];
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
}

- (BOOL) recv_dealWithIllegal
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
DealWithIllegal_result * result = [[[DealWithIllegal_result alloc] init] autorelease_stub];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"dealWithIllegal failed: unknown result"];
}

- (BOOL) dealWithIllegal: (int32_t) postId
{
[self send_dealWithIllegal : postId];
return [self recv_dealWithIllegal];
}

@end

@implementation ISocialAdminServiceDealWithIllegalProcessor

- (id) initWithISocialAdminServiceDealWithIllegal: (id <ISocialAdminServiceDealWithIllegal>) service
{
self = [super init];
if (!self) {
  return nil;
}
mService = [service retain_stub];
mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
{
SEL s = @selector(process_dealWithIllegal_withSequenceID:inProtocol:outProtocol:);
NSMethodSignature * sig = [self methodSignatureForSelector: s];
NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
[invocation setSelector: s];
[invocation retainArguments];
[mMethodMap setValue: invocation forKey: @"dealWithIllegal"];
}
return self;
}

- (id<ISocialAdminServiceDealWithIllegal>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_dealWithIllegal_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
dealWithIllegal_args * args = [[dealWithIllegal_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
DealWithIllegal_result * result = [[DealWithIllegal_result alloc] init];
[result setSuccess: [mService dealWithIllegal: [args postId]]];
[outProtocol writeMessageBeginWithName: @"dealWithIllegal"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) dealloc
{
[mService release_stub];
[mMethodMap release_stub];
[super dealloc_stub];
}

@end

@interface dealWithLegitimate_args : NSObject <TBase, NSCoding> {
int32_t __postId;

BOOL __postId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=postId, setter=setPostId:) int32_t postId;
#endif

- (id) init;
- (id) initWithPostId: (int32_t) postId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (int32_t) postId;
- (void) setPostId: (int32_t) postId;
#endif
- (BOOL) postIdIsSet;

@end

@implementation dealWithLegitimate_args

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithPostId: (int32_t) postId
{
self = [super init];
__postId = postId;
__postId_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"postId"])
{
__postId = [decoder decodeInt32ForKey: @"postId"];
__postId_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__postId_isset)
{
[encoder encodeInt32: __postId forKey: @"postId"];
}
}

- (void) dealloc
{
[super dealloc_stub];
}

- (int32_t) postId {
return __postId;
}

- (void) setPostId: (int32_t) postId {
__postId = postId;
__postId_isset = YES;
}

- (BOOL) postIdIsSet {
return __postId_isset;
}

- (void) unsetPostId {
__postId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 1:
if (fieldType == TType_I32) {
int32_t fieldValue = [inProtocol readI32];
[self setPostId: fieldValue];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"dealWithLegitimate_args"];
if (__postId_isset) {
[outProtocol writeFieldBeginWithName: @"postId" type: TType_I32 fieldID: 1];
[outProtocol writeI32: __postId];
[outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"dealWithLegitimate_args("];
[ms appendString: @"postId:"];
[ms appendFormat: @"%i", __postId];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@interface DealWithLegitimate_result : NSObject <TBase, NSCoding> {
BOOL __success;

BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) init;
- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BOOL) success;
- (void) setSuccess: (BOOL) success;
#endif
- (BOOL) successIsSet;

@end

@implementation DealWithLegitimate_result

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithSuccess: (BOOL) success
{
self = [super init];
__success = success;
__success_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"success"])
{
__success = [decoder decodeBoolForKey: @"success"];
__success_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__success_isset)
{
[encoder encodeBool: __success forKey: @"success"];
}
}

- (void) dealloc
{
[super dealloc_stub];
}

- (BOOL) success {
return __success;
}

- (void) setSuccess: (BOOL) success {
__success = success;
__success_isset = YES;
}

- (BOOL) successIsSet {
return __success_isset;
}

- (void) unsetSuccess {
__success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 0:
if (fieldType == TType_BOOL) {
BOOL fieldValue = [inProtocol readBool];
[self setSuccess: fieldValue];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"DealWithLegitimate_result"];

if (__success_isset) {
[outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
[outProtocol writeBool: __success];
[outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"DealWithLegitimate_result("];
[ms appendString: @"success:"];
[ms appendFormat: @"%i", __success];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@implementation ISocialAdminServiceDealWithLegitimateClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
self = [super init];
inProtocol = [anInProtocol retain_stub];
outProtocol = [anOutProtocol retain_stub];
return self;
}

- (void) dealloc
{
[inProtocol release_stub];
[outProtocol release_stub];
[super dealloc_stub];
}

- (void) send_dealWithLegitimate: (int32_t) postId
{
[outProtocol writeMessageBeginWithName: @"dealWithLegitimate" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"dealWithLegitimate_args"];
[outProtocol writeFieldBeginWithName: @"postId" type: TType_I32 fieldID: 1];
[outProtocol writeI32: postId];
[outProtocol writeFieldEnd];
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
}

- (BOOL) recv_dealWithLegitimate
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
DealWithLegitimate_result * result = [[[DealWithLegitimate_result alloc] init] autorelease_stub];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"dealWithLegitimate failed: unknown result"];
}

- (BOOL) dealWithLegitimate: (int32_t) postId
{
[self send_dealWithLegitimate : postId];
return [self recv_dealWithLegitimate];
}

@end

@implementation ISocialAdminServiceDealWithLegitimateProcessor

- (id) initWithISocialAdminServiceDealWithLegitimate: (id <ISocialAdminServiceDealWithLegitimate>) service
{
self = [super init];
if (!self) {
  return nil;
}
mService = [service retain_stub];
mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
{
SEL s = @selector(process_dealWithLegitimate_withSequenceID:inProtocol:outProtocol:);
NSMethodSignature * sig = [self methodSignatureForSelector: s];
NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
[invocation setSelector: s];
[invocation retainArguments];
[mMethodMap setValue: invocation forKey: @"dealWithLegitimate"];
}
return self;
}

- (id<ISocialAdminServiceDealWithLegitimate>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_dealWithLegitimate_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
dealWithLegitimate_args * args = [[dealWithLegitimate_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
DealWithLegitimate_result * result = [[DealWithLegitimate_result alloc] init];
[result setSuccess: [mService dealWithLegitimate: [args postId]]];
[outProtocol writeMessageBeginWithName: @"dealWithLegitimate"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) dealloc
{
[mService release_stub];
[mMethodMap release_stub];
[super dealloc_stub];
}

@end

@interface getAdminReasonList_args : NSObject <TBase, NSCoding> {
}

- (id) init;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

@end

@implementation getAdminReasonList_args

- (id) init
{
self = [super init];
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"getAdminReasonList_args"];
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"getAdminReasonList_args("];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@interface GetAdminReasonList_result : NSObject <TBase, NSCoding> {
NSMutableArray * __success;

BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSMutableArray * success;
#endif

- (id) init;
- (id) initWithSuccess: (NSMutableArray *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSMutableArray *) success;
- (void) setSuccess: (NSMutableArray *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation GetAdminReasonList_result

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithSuccess: (NSMutableArray *) success
{
self = [super init];
__success = [success retain_stub];
__success_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"success"])
{
__success = [[decoder decodeObjectForKey: @"success"] retain_stub];
__success_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__success_isset)
{
[encoder encodeObject: __success forKey: @"success"];
}
}

- (void) dealloc
{
[__success release_stub];
[super dealloc_stub];
}

- (NSMutableArray *) success {
return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSMutableArray *) success {
[success retain_stub];
[__success release_stub];
__success = success;
__success_isset = YES;
}

- (BOOL) successIsSet {
return __success_isset;
}

- (void) unsetSuccess {
[__success release_stub];
__success = nil;
__success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 0:
if (fieldType == TType_LIST) {
int _size19;
[inProtocol readListBeginReturningElementType: NULL size: &_size19];
NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size19];
int _i20;
for (_i20 = 0; _i20 < _size19; ++_i20)
{
TAdminReason *_elem21 = [[TAdminReason alloc] init];
[_elem21 read: inProtocol];
[fieldValue addObject: _elem21];
[_elem21 release_stub];
}
[inProtocol readListEnd];
[self setSuccess: fieldValue];
[fieldValue release_stub];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"GetAdminReasonList_result"];

if (__success_isset) {
if (__success != nil) {
[outProtocol writeFieldBeginWithName: @"success" type: TType_LIST fieldID: 0];
{
[outProtocol writeListBeginWithElementType: TType_STRUCT size: [__success count]];
int idx23;
for (idx23 = 0; idx23 < [__success count]; idx23++)
{
[[__success objectAtIndex: idx23] write: outProtocol];
}
[outProtocol writeListEnd];
}
[outProtocol writeFieldEnd];
}
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"GetAdminReasonList_result("];
[ms appendString: @"success:"];
[ms appendFormat: @"%@", __success];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@implementation ISocialAdminServiceGetAdminReasonListClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
self = [super init];
inProtocol = [anInProtocol retain_stub];
outProtocol = [anOutProtocol retain_stub];
return self;
}

- (void) dealloc
{
[inProtocol release_stub];
[outProtocol release_stub];
[super dealloc_stub];
}

- (void) send_getAdminReasonList
{
[outProtocol writeMessageBeginWithName: @"getAdminReasonList" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"getAdminReasonList_args"];
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
}

- (NSMutableArray *) recv_getAdminReasonList
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
GetAdminReasonList_result * result = [[[GetAdminReasonList_result alloc] init] autorelease_stub];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"getAdminReasonList failed: unknown result"];
}

- (NSMutableArray *) getAdminReasonList
{
[self send_getAdminReasonList];
return [self recv_getAdminReasonList];
}

@end

@implementation ISocialAdminServiceGetAdminReasonListProcessor

- (id) initWithISocialAdminServiceGetAdminReasonList: (id <ISocialAdminServiceGetAdminReasonList>) service
{
self = [super init];
if (!self) {
  return nil;
}
mService = [service retain_stub];
mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
{
SEL s = @selector(process_getAdminReasonList_withSequenceID:inProtocol:outProtocol:);
NSMethodSignature * sig = [self methodSignatureForSelector: s];
NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
[invocation setSelector: s];
[invocation retainArguments];
[mMethodMap setValue: invocation forKey: @"getAdminReasonList"];
}
return self;
}

- (id<ISocialAdminServiceGetAdminReasonList>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_getAdminReasonList_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
getAdminReasonList_args * args = [[getAdminReasonList_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
GetAdminReasonList_result * result = [[GetAdminReasonList_result alloc] init];
[result setSuccess: [mService getAdminReasonList]];
[outProtocol writeMessageBeginWithName: @"getAdminReasonList"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) dealloc
{
[mService release_stub];
[mMethodMap release_stub];
[super dealloc_stub];
}

@end

@interface getAdminReasonById_args : NSObject <TBase, NSCoding> {
int32_t __id;

BOOL __id_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=id, setter=setId:) int32_t id;
#endif

- (id) init;
- (id) initWithId: (int32_t) id;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (int32_t) id;
- (void) setId: (int32_t) id;
#endif
- (BOOL) idIsSet;

@end

@implementation getAdminReasonById_args

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithId: (int32_t) id
{
self = [super init];
__id = id;
__id_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"id"])
{
__id = [decoder decodeInt32ForKey: @"id"];
__id_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__id_isset)
{
[encoder encodeInt32: __id forKey: @"id"];
}
}

- (void) dealloc
{
[super dealloc_stub];
}

- (int32_t) id {
return __id;
}

- (void) setId: (int32_t) id {
__id = id;
__id_isset = YES;
}

- (BOOL) idIsSet {
return __id_isset;
}

- (void) unsetId {
__id_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 1:
if (fieldType == TType_I32) {
int32_t fieldValue = [inProtocol readI32];
[self setId: fieldValue];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"getAdminReasonById_args"];
if (__id_isset) {
[outProtocol writeFieldBeginWithName: @"id" type: TType_I32 fieldID: 1];
[outProtocol writeI32: __id];
[outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"getAdminReasonById_args("];
[ms appendString: @"id:"];
[ms appendFormat: @"%i", __id];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@interface GetAdminReasonById_result : NSObject <TBase, NSCoding> {
TAdminReason * __success;

BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) TAdminReason * success;
#endif

- (id) init;
- (id) initWithSuccess: (TAdminReason *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (TAdminReason *) success;
- (void) setSuccess: (TAdminReason *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation GetAdminReasonById_result

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithSuccess: (TAdminReason *) success
{
self = [super init];
__success = [success retain_stub];
__success_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"success"])
{
__success = [[decoder decodeObjectForKey: @"success"] retain_stub];
__success_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__success_isset)
{
[encoder encodeObject: __success forKey: @"success"];
}
}

- (void) dealloc
{
[__success release_stub];
[super dealloc_stub];
}

- (TAdminReason *) success {
return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (TAdminReason *) success {
[success retain_stub];
[__success release_stub];
__success = success;
__success_isset = YES;
}

- (BOOL) successIsSet {
return __success_isset;
}

- (void) unsetSuccess {
[__success release_stub];
__success = nil;
__success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 0:
if (fieldType == TType_STRUCT) {
TAdminReason *fieldValue = [[TAdminReason alloc] init];
[fieldValue read: inProtocol];
[self setSuccess: fieldValue];
[fieldValue release_stub];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"GetAdminReasonById_result"];

if (__success_isset) {
if (__success != nil) {
[outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
[__success write: outProtocol];
[outProtocol writeFieldEnd];
}
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"GetAdminReasonById_result("];
[ms appendString: @"success:"];
[ms appendFormat: @"%@", __success];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@implementation ISocialAdminServiceGetAdminReasonByIdClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
self = [super init];
inProtocol = [anInProtocol retain_stub];
outProtocol = [anOutProtocol retain_stub];
return self;
}

- (void) dealloc
{
[inProtocol release_stub];
[outProtocol release_stub];
[super dealloc_stub];
}

- (void) send_getAdminReasonById: (int32_t) id
{
[outProtocol writeMessageBeginWithName: @"getAdminReasonById" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"getAdminReasonById_args"];
[outProtocol writeFieldBeginWithName: @"id" type: TType_I32 fieldID: 1];
[outProtocol writeI32: id];
[outProtocol writeFieldEnd];
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
}

- (TAdminReason *) recv_getAdminReasonById
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
GetAdminReasonById_result * result = [[[GetAdminReasonById_result alloc] init] autorelease_stub];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"getAdminReasonById failed: unknown result"];
}

- (TAdminReason *) getAdminReasonById: (int32_t) id
{
[self send_getAdminReasonById : id];
return [self recv_getAdminReasonById];
}

@end

@implementation ISocialAdminServiceGetAdminReasonByIdProcessor

- (id) initWithISocialAdminServiceGetAdminReasonById: (id <ISocialAdminServiceGetAdminReasonById>) service
{
self = [super init];
if (!self) {
  return nil;
}
mService = [service retain_stub];
mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
{
SEL s = @selector(process_getAdminReasonById_withSequenceID:inProtocol:outProtocol:);
NSMethodSignature * sig = [self methodSignatureForSelector: s];
NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
[invocation setSelector: s];
[invocation retainArguments];
[mMethodMap setValue: invocation forKey: @"getAdminReasonById"];
}
return self;
}

- (id<ISocialAdminServiceGetAdminReasonById>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_getAdminReasonById_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
getAdminReasonById_args * args = [[getAdminReasonById_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
GetAdminReasonById_result * result = [[GetAdminReasonById_result alloc] init];
[result setSuccess: [mService getAdminReasonById: [args id]]];
[outProtocol writeMessageBeginWithName: @"getAdminReasonById"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) dealloc
{
[mService release_stub];
[mMethodMap release_stub];
[super dealloc_stub];
}

@end

@interface updateAdminReason_args : NSObject <TBase, NSCoding> {
TAdminReason * __reason;

BOOL __reason_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=reason, setter=setReason:) TAdminReason * reason;
#endif

- (id) init;
- (id) initWithReason: (TAdminReason *) reason;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (TAdminReason *) reason;
- (void) setReason: (TAdminReason *) reason;
#endif
- (BOOL) reasonIsSet;

@end

@implementation updateAdminReason_args

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithReason: (TAdminReason *) reason
{
self = [super init];
__reason = [reason retain_stub];
__reason_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"reason"])
{
__reason = [[decoder decodeObjectForKey: @"reason"] retain_stub];
__reason_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__reason_isset)
{
[encoder encodeObject: __reason forKey: @"reason"];
}
}

- (void) dealloc
{
[__reason release_stub];
[super dealloc_stub];
}

- (TAdminReason *) reason {
return [[__reason retain_stub] autorelease_stub];
}

- (void) setReason: (TAdminReason *) reason {
[reason retain_stub];
[__reason release_stub];
__reason = reason;
__reason_isset = YES;
}

- (BOOL) reasonIsSet {
return __reason_isset;
}

- (void) unsetReason {
[__reason release_stub];
__reason = nil;
__reason_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 1:
if (fieldType == TType_STRUCT) {
TAdminReason *fieldValue = [[TAdminReason alloc] init];
[fieldValue read: inProtocol];
[self setReason: fieldValue];
[fieldValue release_stub];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"updateAdminReason_args"];
if (__reason_isset) {
if (__reason != nil) {
[outProtocol writeFieldBeginWithName: @"reason" type: TType_STRUCT fieldID: 1];
[__reason write: outProtocol];
[outProtocol writeFieldEnd];
}
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"updateAdminReason_args("];
[ms appendString: @"reason:"];
[ms appendFormat: @"%@", __reason];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@interface UpdateAdminReason_result : NSObject <TBase, NSCoding> {
BOOL __success;

BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) init;
- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BOOL) success;
- (void) setSuccess: (BOOL) success;
#endif
- (BOOL) successIsSet;

@end

@implementation UpdateAdminReason_result

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithSuccess: (BOOL) success
{
self = [super init];
__success = success;
__success_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"success"])
{
__success = [decoder decodeBoolForKey: @"success"];
__success_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__success_isset)
{
[encoder encodeBool: __success forKey: @"success"];
}
}

- (void) dealloc
{
[super dealloc_stub];
}

- (BOOL) success {
return __success;
}

- (void) setSuccess: (BOOL) success {
__success = success;
__success_isset = YES;
}

- (BOOL) successIsSet {
return __success_isset;
}

- (void) unsetSuccess {
__success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 0:
if (fieldType == TType_BOOL) {
BOOL fieldValue = [inProtocol readBool];
[self setSuccess: fieldValue];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"UpdateAdminReason_result"];

if (__success_isset) {
[outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
[outProtocol writeBool: __success];
[outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"UpdateAdminReason_result("];
[ms appendString: @"success:"];
[ms appendFormat: @"%i", __success];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@implementation ISocialAdminServiceUpdateAdminReasonClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
self = [super init];
inProtocol = [anInProtocol retain_stub];
outProtocol = [anOutProtocol retain_stub];
return self;
}

- (void) dealloc
{
[inProtocol release_stub];
[outProtocol release_stub];
[super dealloc_stub];
}

- (void) send_updateAdminReason: (TAdminReason *) reason
{
[outProtocol writeMessageBeginWithName: @"updateAdminReason" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"updateAdminReason_args"];
if (reason != nil){
[outProtocol writeFieldBeginWithName: @"reason" type: TType_STRUCT fieldID: 1];
[reason write: outProtocol];
[outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
}

- (BOOL) recv_updateAdminReason
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
UpdateAdminReason_result * result = [[[UpdateAdminReason_result alloc] init] autorelease_stub];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"updateAdminReason failed: unknown result"];
}

- (BOOL) updateAdminReason: (TAdminReason *) reason
{
[self send_updateAdminReason : reason];
return [self recv_updateAdminReason];
}

@end

@implementation ISocialAdminServiceUpdateAdminReasonProcessor

- (id) initWithISocialAdminServiceUpdateAdminReason: (id <ISocialAdminServiceUpdateAdminReason>) service
{
self = [super init];
if (!self) {
  return nil;
}
mService = [service retain_stub];
mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
{
SEL s = @selector(process_updateAdminReason_withSequenceID:inProtocol:outProtocol:);
NSMethodSignature * sig = [self methodSignatureForSelector: s];
NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
[invocation setSelector: s];
[invocation retainArguments];
[mMethodMap setValue: invocation forKey: @"updateAdminReason"];
}
return self;
}

- (id<ISocialAdminServiceUpdateAdminReason>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_updateAdminReason_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
updateAdminReason_args * args = [[updateAdminReason_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
UpdateAdminReason_result * result = [[UpdateAdminReason_result alloc] init];
[result setSuccess: [mService updateAdminReason: [args reason]]];
[outProtocol writeMessageBeginWithName: @"updateAdminReason"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) dealloc
{
[mService release_stub];
[mMethodMap release_stub];
[super dealloc_stub];
}

@end

@interface getAdminPostInformList_args : NSObject <TBase, NSCoding> {
int32_t __postId;

BOOL __postId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=postId, setter=setPostId:) int32_t postId;
#endif

- (id) init;
- (id) initWithPostId: (int32_t) postId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (int32_t) postId;
- (void) setPostId: (int32_t) postId;
#endif
- (BOOL) postIdIsSet;

@end

@implementation getAdminPostInformList_args

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithPostId: (int32_t) postId
{
self = [super init];
__postId = postId;
__postId_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"postId"])
{
__postId = [decoder decodeInt32ForKey: @"postId"];
__postId_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__postId_isset)
{
[encoder encodeInt32: __postId forKey: @"postId"];
}
}

- (void) dealloc
{
[super dealloc_stub];
}

- (int32_t) postId {
return __postId;
}

- (void) setPostId: (int32_t) postId {
__postId = postId;
__postId_isset = YES;
}

- (BOOL) postIdIsSet {
return __postId_isset;
}

- (void) unsetPostId {
__postId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 1:
if (fieldType == TType_I32) {
int32_t fieldValue = [inProtocol readI32];
[self setPostId: fieldValue];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"getAdminPostInformList_args"];
if (__postId_isset) {
[outProtocol writeFieldBeginWithName: @"postId" type: TType_I32 fieldID: 1];
[outProtocol writeI32: __postId];
[outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"getAdminPostInformList_args("];
[ms appendString: @"postId:"];
[ms appendFormat: @"%i", __postId];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@interface GetAdminPostInformList_result : NSObject <TBase, NSCoding> {
NSMutableArray * __success;

BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSMutableArray * success;
#endif

- (id) init;
- (id) initWithSuccess: (NSMutableArray *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSMutableArray *) success;
- (void) setSuccess: (NSMutableArray *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation GetAdminPostInformList_result

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithSuccess: (NSMutableArray *) success
{
self = [super init];
__success = [success retain_stub];
__success_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"success"])
{
__success = [[decoder decodeObjectForKey: @"success"] retain_stub];
__success_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__success_isset)
{
[encoder encodeObject: __success forKey: @"success"];
}
}

- (void) dealloc
{
[__success release_stub];
[super dealloc_stub];
}

- (NSMutableArray *) success {
return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSMutableArray *) success {
[success retain_stub];
[__success release_stub];
__success = success;
__success_isset = YES;
}

- (BOOL) successIsSet {
return __success_isset;
}

- (void) unsetSuccess {
[__success release_stub];
__success = nil;
__success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 0:
if (fieldType == TType_LIST) {
int _size24;
[inProtocol readListBeginReturningElementType: NULL size: &_size24];
NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size24];
int _i25;
for (_i25 = 0; _i25 < _size24; ++_i25)
{
TAdminPostInform *_elem26 = [[TAdminPostInform alloc] init];
[_elem26 read: inProtocol];
[fieldValue addObject: _elem26];
[_elem26 release_stub];
}
[inProtocol readListEnd];
[self setSuccess: fieldValue];
[fieldValue release_stub];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"GetAdminPostInformList_result"];

if (__success_isset) {
if (__success != nil) {
[outProtocol writeFieldBeginWithName: @"success" type: TType_LIST fieldID: 0];
{
[outProtocol writeListBeginWithElementType: TType_STRUCT size: [__success count]];
int idx28;
for (idx28 = 0; idx28 < [__success count]; idx28++)
{
[[__success objectAtIndex: idx28] write: outProtocol];
}
[outProtocol writeListEnd];
}
[outProtocol writeFieldEnd];
}
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"GetAdminPostInformList_result("];
[ms appendString: @"success:"];
[ms appendFormat: @"%@", __success];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@implementation ISocialAdminServiceGetAdminPostInformListClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
self = [super init];
inProtocol = [anInProtocol retain_stub];
outProtocol = [anOutProtocol retain_stub];
return self;
}

- (void) dealloc
{
[inProtocol release_stub];
[outProtocol release_stub];
[super dealloc_stub];
}

- (void) send_getAdminPostInformList: (int32_t) postId
{
[outProtocol writeMessageBeginWithName: @"getAdminPostInformList" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"getAdminPostInformList_args"];
[outProtocol writeFieldBeginWithName: @"postId" type: TType_I32 fieldID: 1];
[outProtocol writeI32: postId];
[outProtocol writeFieldEnd];
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
}

- (NSMutableArray *) recv_getAdminPostInformList
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
GetAdminPostInformList_result * result = [[[GetAdminPostInformList_result alloc] init] autorelease_stub];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"getAdminPostInformList failed: unknown result"];
}

- (NSMutableArray *) getAdminPostInformList: (int32_t) postId
{
[self send_getAdminPostInformList : postId];
return [self recv_getAdminPostInformList];
}

@end

@implementation ISocialAdminServiceGetAdminPostInformListProcessor

- (id) initWithISocialAdminServiceGetAdminPostInformList: (id <ISocialAdminServiceGetAdminPostInformList>) service
{
self = [super init];
if (!self) {
  return nil;
}
mService = [service retain_stub];
mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
{
SEL s = @selector(process_getAdminPostInformList_withSequenceID:inProtocol:outProtocol:);
NSMethodSignature * sig = [self methodSignatureForSelector: s];
NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
[invocation setSelector: s];
[invocation retainArguments];
[mMethodMap setValue: invocation forKey: @"getAdminPostInformList"];
}
return self;
}

- (id<ISocialAdminServiceGetAdminPostInformList>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_getAdminPostInformList_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
getAdminPostInformList_args * args = [[getAdminPostInformList_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
GetAdminPostInformList_result * result = [[GetAdminPostInformList_result alloc] init];
[result setSuccess: [mService getAdminPostInformList: [args postId]]];
[outProtocol writeMessageBeginWithName: @"getAdminPostInformList"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) dealloc
{
[mService release_stub];
[mMethodMap release_stub];
[super dealloc_stub];
}

@end

@interface deleteAdminPost_args : NSObject <TBase, NSCoding> {
TAdminPost * __post;

BOOL __post_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=post, setter=setPost:) TAdminPost * post;
#endif

- (id) init;
- (id) initWithPost: (TAdminPost *) post;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (TAdminPost *) post;
- (void) setPost: (TAdminPost *) post;
#endif
- (BOOL) postIsSet;

@end

@implementation deleteAdminPost_args

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithPost: (TAdminPost *) post
{
self = [super init];
__post = [post retain_stub];
__post_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"post"])
{
__post = [[decoder decodeObjectForKey: @"post"] retain_stub];
__post_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__post_isset)
{
[encoder encodeObject: __post forKey: @"post"];
}
}

- (void) dealloc
{
[__post release_stub];
[super dealloc_stub];
}

- (TAdminPost *) post {
return [[__post retain_stub] autorelease_stub];
}

- (void) setPost: (TAdminPost *) post {
[post retain_stub];
[__post release_stub];
__post = post;
__post_isset = YES;
}

- (BOOL) postIsSet {
return __post_isset;
}

- (void) unsetPost {
[__post release_stub];
__post = nil;
__post_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 1:
if (fieldType == TType_STRUCT) {
TAdminPost *fieldValue = [[TAdminPost alloc] init];
[fieldValue read: inProtocol];
[self setPost: fieldValue];
[fieldValue release_stub];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"deleteAdminPost_args"];
if (__post_isset) {
if (__post != nil) {
[outProtocol writeFieldBeginWithName: @"post" type: TType_STRUCT fieldID: 1];
[__post write: outProtocol];
[outProtocol writeFieldEnd];
}
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"deleteAdminPost_args("];
[ms appendString: @"post:"];
[ms appendFormat: @"%@", __post];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@interface DeleteAdminPost_result : NSObject <TBase, NSCoding> {
BOOL __success;

BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) init;
- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BOOL) success;
- (void) setSuccess: (BOOL) success;
#endif
- (BOOL) successIsSet;

@end

@implementation DeleteAdminPost_result

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithSuccess: (BOOL) success
{
self = [super init];
__success = success;
__success_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"success"])
{
__success = [decoder decodeBoolForKey: @"success"];
__success_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__success_isset)
{
[encoder encodeBool: __success forKey: @"success"];
}
}

- (void) dealloc
{
[super dealloc_stub];
}

- (BOOL) success {
return __success;
}

- (void) setSuccess: (BOOL) success {
__success = success;
__success_isset = YES;
}

- (BOOL) successIsSet {
return __success_isset;
}

- (void) unsetSuccess {
__success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 0:
if (fieldType == TType_BOOL) {
BOOL fieldValue = [inProtocol readBool];
[self setSuccess: fieldValue];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"DeleteAdminPost_result"];

if (__success_isset) {
[outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
[outProtocol writeBool: __success];
[outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"DeleteAdminPost_result("];
[ms appendString: @"success:"];
[ms appendFormat: @"%i", __success];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@implementation ISocialAdminServiceDeleteAdminPostClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
self = [super init];
inProtocol = [anInProtocol retain_stub];
outProtocol = [anOutProtocol retain_stub];
return self;
}

- (void) dealloc
{
[inProtocol release_stub];
[outProtocol release_stub];
[super dealloc_stub];
}

- (void) send_deleteAdminPost: (TAdminPost *) post
{
[outProtocol writeMessageBeginWithName: @"deleteAdminPost" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"deleteAdminPost_args"];
if (post != nil){
[outProtocol writeFieldBeginWithName: @"post" type: TType_STRUCT fieldID: 1];
[post write: outProtocol];
[outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
}

- (BOOL) recv_deleteAdminPost
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
DeleteAdminPost_result * result = [[[DeleteAdminPost_result alloc] init] autorelease_stub];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"deleteAdminPost failed: unknown result"];
}

- (BOOL) deleteAdminPost: (TAdminPost *) post
{
[self send_deleteAdminPost : post];
return [self recv_deleteAdminPost];
}

@end

@implementation ISocialAdminServiceDeleteAdminPostProcessor

- (id) initWithISocialAdminServiceDeleteAdminPost: (id <ISocialAdminServiceDeleteAdminPost>) service
{
self = [super init];
if (!self) {
  return nil;
}
mService = [service retain_stub];
mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
{
SEL s = @selector(process_deleteAdminPost_withSequenceID:inProtocol:outProtocol:);
NSMethodSignature * sig = [self methodSignatureForSelector: s];
NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
[invocation setSelector: s];
[invocation retainArguments];
[mMethodMap setValue: invocation forKey: @"deleteAdminPost"];
}
return self;
}

- (id<ISocialAdminServiceDeleteAdminPost>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_deleteAdminPost_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
deleteAdminPost_args * args = [[deleteAdminPost_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
DeleteAdminPost_result * result = [[DeleteAdminPost_result alloc] init];
[result setSuccess: [mService deleteAdminPost: [args post]]];
[outProtocol writeMessageBeginWithName: @"deleteAdminPost"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) dealloc
{
[mService release_stub];
[mMethodMap release_stub];
[super dealloc_stub];
}

@end

