/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TObjective-C.h"
#import "TBase.h"

#import "TAdminActivityQueryData.h"
#import "TActivity.h"
#import "TAdminPostQueryData.h"
#import "TAdminPrizeQueryData.h"

#import "ActivityAdminService.h"


@implementation ActivityAdminServiceConstants
+ (void) initialize {
}
@end

@interface getAdminActivityList_args : NSObject <TBase, NSCoding> {
  int32_t __currentPage;
  int32_t __pageSize;

  BOOL __currentPage_isset;
  BOOL __pageSize_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=currentPage, setter=setCurrentPage:) int32_t currentPage;
@property (nonatomic, getter=pageSize, setter=setPageSize:) int32_t pageSize;
#endif

- (id) init;
- (id) initWithCurrentPage: (int32_t) currentPage pageSize: (int32_t) pageSize;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (int32_t) currentPage;
- (void) setCurrentPage: (int32_t) currentPage;
#endif
- (BOOL) currentPageIsSet;

#if !__has_feature(objc_arc)
- (int32_t) pageSize;
- (void) setPageSize: (int32_t) pageSize;
#endif
- (BOOL) pageSizeIsSet;

@end

@implementation getAdminActivityList_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithCurrentPage: (int32_t) currentPage pageSize: (int32_t) pageSize
{
  self = [super init];
  __currentPage = currentPage;
  __currentPage_isset = YES;
  __pageSize = pageSize;
  __pageSize_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"currentPage"])
  {
    __currentPage = [decoder decodeInt32ForKey: @"currentPage"];
    __currentPage_isset = YES;
  }
  if ([decoder containsValueForKey: @"pageSize"])
  {
    __pageSize = [decoder decodeInt32ForKey: @"pageSize"];
    __pageSize_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__currentPage_isset)
  {
    [encoder encodeInt32: __currentPage forKey: @"currentPage"];
  }
  if (__pageSize_isset)
  {
    [encoder encodeInt32: __pageSize forKey: @"pageSize"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int32_t) currentPage {
  return __currentPage;
}

- (void) setCurrentPage: (int32_t) currentPage {
  __currentPage = currentPage;
  __currentPage_isset = YES;
}

- (BOOL) currentPageIsSet {
  return __currentPage_isset;
}

- (void) unsetCurrentPage {
  __currentPage_isset = NO;
}

- (int32_t) pageSize {
  return __pageSize;
}

- (void) setPageSize: (int32_t) pageSize {
  __pageSize = pageSize;
  __pageSize_isset = YES;
}

- (BOOL) pageSizeIsSet {
  return __pageSize_isset;
}

- (void) unsetPageSize {
  __pageSize_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setCurrentPage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPageSize: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getAdminActivityList_args"];
  if (__currentPage_isset) {
    [outProtocol writeFieldBeginWithName: @"currentPage" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __currentPage];
    [outProtocol writeFieldEnd];
  }
  if (__pageSize_isset) {
    [outProtocol writeFieldBeginWithName: @"pageSize" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __pageSize];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getAdminActivityList_args("];
  [ms appendString: @"currentPage:"];
  [ms appendFormat: @"%i", __currentPage];
  [ms appendString: @",pageSize:"];
  [ms appendFormat: @"%i", __pageSize];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetAdminActivityList_result : NSObject <TBase, NSCoding> {
  TAdminActivityQueryData * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) TAdminActivityQueryData * success;
#endif

- (id) init;
- (id) initWithSuccess: (TAdminActivityQueryData *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (TAdminActivityQueryData *) success;
- (void) setSuccess: (TAdminActivityQueryData *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation GetAdminActivityList_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (TAdminActivityQueryData *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (TAdminActivityQueryData *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (TAdminActivityQueryData *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          TAdminActivityQueryData *fieldValue = [[TAdminActivityQueryData alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetAdminActivityList_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetAdminActivityList_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation IActivityAdminServiceGetAdminActivityListClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
  return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
  self = [super init];
  inProtocol = [anInProtocol retain_stub];
  outProtocol = [anOutProtocol retain_stub];
  return self;
}

- (void) dealloc
{
  [inProtocol release_stub];
  [outProtocol release_stub];
  [super dealloc_stub];
}

- (void) send_getAdminActivityList: (int32_t) currentPage pageSize: (int32_t) pageSize
{
  [outProtocol writeMessageBeginWithName: @"getAdminActivityList" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getAdminActivityList_args"];
  [outProtocol writeFieldBeginWithName: @"currentPage" type: TType_I32 fieldID: 1];
  [outProtocol writeI32: currentPage];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"pageSize" type: TType_I32 fieldID: 2];
  [outProtocol writeI32: pageSize];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (TAdminActivityQueryData *) recv_getAdminActivityList
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GetAdminActivityList_result * result = [[[GetAdminActivityList_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getAdminActivityList failed: unknown result"];
}

- (TAdminActivityQueryData *) getAdminActivityList: (int32_t) currentPage pageSize: (int32_t) pageSize
{
  [self send_getAdminActivityList : currentPage pageSize: pageSize];
  return [self recv_getAdminActivityList];
}

@end

@implementation IActivityAdminServiceGetAdminActivityListProcessor

- (id) initWithIActivityAdminServiceGetAdminActivityList: (id <IActivityAdminServiceGetAdminActivityList>) service
{
  self = [super init];
  if (!self) {
    return nil;
  }
  mService = [service retain_stub];
  mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
  {
    SEL s = @selector(process_getAdminActivityList_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getAdminActivityList"];
  }
  return self;
}

- (id<IActivityAdminServiceGetAdminActivityList>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_getAdminActivityList_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  getAdminActivityList_args * args = [[getAdminActivityList_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GetAdminActivityList_result * result = [[GetAdminActivityList_result alloc] init];
  [result setSuccess: [mService getAdminActivityList: [args currentPage] pageSize: [args pageSize]]];
  [outProtocol writeMessageBeginWithName: @"getAdminActivityList"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) dealloc
{
  [mService release_stub];
  [mMethodMap release_stub];
  [super dealloc_stub];
}

@end

@interface addAdminActivity_args : NSObject <TBase, NSCoding> {
NSString * __activity;
NSString * __activityCommunities;

BOOL __activity_isset;
BOOL __activityCommunities_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=activity, setter=setActivity:) NSString * activity;
@property (nonatomic, retain, getter=activityCommunities, setter=setActivityCommunities:) NSString * activityCommunities;
#endif

- (id) init;
- (id) initWithActivity: (NSString *) activity activityCommunities: (NSString *) activityCommunities;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) activity;
- (void) setActivity: (NSString *) activity;
#endif
- (BOOL) activityIsSet;

#if !__has_feature(objc_arc)
- (NSString *) activityCommunities;
- (void) setActivityCommunities: (NSString *) activityCommunities;
#endif
- (BOOL) activityCommunitiesIsSet;

@end

@implementation addAdminActivity_args

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithActivity: (NSString *) activity activityCommunities: (NSString *) activityCommunities
{
self = [super init];
__activity = [activity retain_stub];
__activity_isset = YES;
__activityCommunities = [activityCommunities retain_stub];
__activityCommunities_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"activity"])
{
  __activity = [[decoder decodeObjectForKey: @"activity"] retain_stub];
  __activity_isset = YES;
}
if ([decoder containsValueForKey: @"activityCommunities"])
{
  __activityCommunities = [[decoder decodeObjectForKey: @"activityCommunities"] retain_stub];
  __activityCommunities_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__activity_isset)
{
  [encoder encodeObject: __activity forKey: @"activity"];
}
if (__activityCommunities_isset)
{
  [encoder encodeObject: __activityCommunities forKey: @"activityCommunities"];
}
}

- (void) dealloc
{
[__activity release_stub];
[__activityCommunities release_stub];
[super dealloc_stub];
}

- (NSString *) activity {
return [[__activity retain_stub] autorelease_stub];
}

- (void) setActivity: (NSString *) activity {
[activity retain_stub];
[__activity release_stub];
__activity = activity;
__activity_isset = YES;
}

- (BOOL) activityIsSet {
return __activity_isset;
}

- (void) unsetActivity {
[__activity release_stub];
__activity = nil;
__activity_isset = NO;
}

- (NSString *) activityCommunities {
return [[__activityCommunities retain_stub] autorelease_stub];
}

- (void) setActivityCommunities: (NSString *) activityCommunities {
[activityCommunities retain_stub];
[__activityCommunities release_stub];
__activityCommunities = activityCommunities;
__activityCommunities_isset = YES;
}

- (BOOL) activityCommunitiesIsSet {
return __activityCommunities_isset;
}

- (void) unsetActivityCommunities {
[__activityCommunities release_stub];
__activityCommunities = nil;
__activityCommunities_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
  [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
  if (fieldType == TType_STOP) { 
    break;
  }
  switch (fieldID)
  {
    case 1:
      if (fieldType == TType_STRING) {
        NSString * fieldValue = [inProtocol readString];
        [self setActivity: fieldValue];
      } else { 
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      }
      break;
    case 2:
      if (fieldType == TType_STRING) {
        NSString * fieldValue = [inProtocol readString];
        [self setActivityCommunities: fieldValue];
      } else { 
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      }
      break;
    default:
      [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      break;
  }
  [inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"addAdminActivity_args"];
if (__activity_isset) {
  if (__activity != nil) {
    [outProtocol writeFieldBeginWithName: @"activity" type: TType_STRING fieldID: 1];
    [outProtocol writeString: __activity];
    [outProtocol writeFieldEnd];
  }
}
if (__activityCommunities_isset) {
  if (__activityCommunities != nil) {
    [outProtocol writeFieldBeginWithName: @"activityCommunities" type: TType_STRING fieldID: 2];
    [outProtocol writeString: __activityCommunities];
    [outProtocol writeFieldEnd];
  }
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"addAdminActivity_args("];
[ms appendString: @"activity:"];
[ms appendFormat: @"\"%@\"", __activity];
[ms appendString: @",activityCommunities:"];
[ms appendFormat: @"\"%@\"", __activityCommunities];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@interface AddAdminActivity_result : NSObject <TBase, NSCoding> {
BOOL __success;

BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) init;
- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BOOL) success;
- (void) setSuccess: (BOOL) success;
#endif
- (BOOL) successIsSet;

@end

@implementation AddAdminActivity_result

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithSuccess: (BOOL) success
{
self = [super init];
__success = success;
__success_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"success"])
{
  __success = [decoder decodeBoolForKey: @"success"];
  __success_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__success_isset)
{
  [encoder encodeBool: __success forKey: @"success"];
}
}

- (void) dealloc
{
[super dealloc_stub];
}

- (BOOL) success {
return __success;
}

- (void) setSuccess: (BOOL) success {
__success = success;
__success_isset = YES;
}

- (BOOL) successIsSet {
return __success_isset;
}

- (void) unsetSuccess {
__success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
  [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
  if (fieldType == TType_STOP) { 
    break;
  }
  switch (fieldID)
  {
    case 0:
      if (fieldType == TType_BOOL) {
        BOOL fieldValue = [inProtocol readBool];
        [self setSuccess: fieldValue];
      } else { 
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      }
      break;
    default:
      [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      break;
  }
  [inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"AddAdminActivity_result"];

if (__success_isset) {
  [outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
  [outProtocol writeBool: __success];
  [outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"AddAdminActivity_result("];
[ms appendString: @"success:"];
[ms appendFormat: @"%i", __success];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@implementation IActivityAdminServiceAddAdminActivityClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
self = [super init];
inProtocol = [anInProtocol retain_stub];
outProtocol = [anOutProtocol retain_stub];
return self;
}

- (void) dealloc
{
[inProtocol release_stub];
[outProtocol release_stub];
[super dealloc_stub];
}

- (void) send_addAdminActivity: (NSString *) activity activityCommunities: (NSString *) activityCommunities
{
[outProtocol writeMessageBeginWithName: @"addAdminActivity" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"addAdminActivity_args"];
if (activity != nil){
  [outProtocol writeFieldBeginWithName: @"activity" type: TType_STRING fieldID: 1];
  [outProtocol writeString: activity];
  [outProtocol writeFieldEnd];
}
if (activityCommunities != nil){
  [outProtocol writeFieldBeginWithName: @"activityCommunities" type: TType_STRING fieldID: 2];
  [outProtocol writeString: activityCommunities];
  [outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
}

- (BOOL) recv_addAdminActivity
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
AddAdminActivity_result * result = [[[AddAdminActivity_result alloc] init] autorelease_stub];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"addAdminActivity failed: unknown result"];
}

- (BOOL) addAdminActivity: (NSString *) activity activityCommunities: (NSString *) activityCommunities
{
[self send_addAdminActivity : activity activityCommunities: activityCommunities];
return [self recv_addAdminActivity];
}

@end

@implementation IActivityAdminServiceAddAdminActivityProcessor

- (id) initWithIActivityAdminServiceAddAdminActivity: (id <IActivityAdminServiceAddAdminActivity>) service
{
self = [super init];
if (!self) {
  return nil;
}
mService = [service retain_stub];
mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
{
  SEL s = @selector(process_addAdminActivity_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"addAdminActivity"];
}
return self;
}

- (id<IActivityAdminServiceAddAdminActivity>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_addAdminActivity_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
addAdminActivity_args * args = [[addAdminActivity_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
AddAdminActivity_result * result = [[AddAdminActivity_result alloc] init];
[result setSuccess: [mService addAdminActivity: [args activity] activityCommunities: [args activityCommunities]]];
[outProtocol writeMessageBeginWithName: @"addAdminActivity"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) dealloc
{
[mService release_stub];
[mMethodMap release_stub];
[super dealloc_stub];
}

@end

@interface editAdminActivity_args : NSObject <TBase, NSCoding> {
NSString * __activity;
NSString * __activityCommunities;

BOOL __activity_isset;
BOOL __activityCommunities_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=activity, setter=setActivity:) NSString * activity;
@property (nonatomic, retain, getter=activityCommunities, setter=setActivityCommunities:) NSString * activityCommunities;
#endif

- (id) init;
- (id) initWithActivity: (NSString *) activity activityCommunities: (NSString *) activityCommunities;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) activity;
- (void) setActivity: (NSString *) activity;
#endif
- (BOOL) activityIsSet;

#if !__has_feature(objc_arc)
- (NSString *) activityCommunities;
- (void) setActivityCommunities: (NSString *) activityCommunities;
#endif
- (BOOL) activityCommunitiesIsSet;

@end

@implementation editAdminActivity_args

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithActivity: (NSString *) activity activityCommunities: (NSString *) activityCommunities
{
self = [super init];
__activity = [activity retain_stub];
__activity_isset = YES;
__activityCommunities = [activityCommunities retain_stub];
__activityCommunities_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"activity"])
{
__activity = [[decoder decodeObjectForKey: @"activity"] retain_stub];
__activity_isset = YES;
}
if ([decoder containsValueForKey: @"activityCommunities"])
{
__activityCommunities = [[decoder decodeObjectForKey: @"activityCommunities"] retain_stub];
__activityCommunities_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__activity_isset)
{
[encoder encodeObject: __activity forKey: @"activity"];
}
if (__activityCommunities_isset)
{
[encoder encodeObject: __activityCommunities forKey: @"activityCommunities"];
}
}

- (void) dealloc
{
[__activity release_stub];
[__activityCommunities release_stub];
[super dealloc_stub];
}

- (NSString *) activity {
return [[__activity retain_stub] autorelease_stub];
}

- (void) setActivity: (NSString *) activity {
[activity retain_stub];
[__activity release_stub];
__activity = activity;
__activity_isset = YES;
}

- (BOOL) activityIsSet {
return __activity_isset;
}

- (void) unsetActivity {
[__activity release_stub];
__activity = nil;
__activity_isset = NO;
}

- (NSString *) activityCommunities {
return [[__activityCommunities retain_stub] autorelease_stub];
}

- (void) setActivityCommunities: (NSString *) activityCommunities {
[activityCommunities retain_stub];
[__activityCommunities release_stub];
__activityCommunities = activityCommunities;
__activityCommunities_isset = YES;
}

- (BOOL) activityCommunitiesIsSet {
return __activityCommunities_isset;
}

- (void) unsetActivityCommunities {
[__activityCommunities release_stub];
__activityCommunities = nil;
__activityCommunities_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
  break;
}
switch (fieldID)
{
  case 1:
    if (fieldType == TType_STRING) {
      NSString * fieldValue = [inProtocol readString];
      [self setActivity: fieldValue];
    } else { 
      [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
    }
    break;
  case 2:
    if (fieldType == TType_STRING) {
      NSString * fieldValue = [inProtocol readString];
      [self setActivityCommunities: fieldValue];
    } else { 
      [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
    }
    break;
  default:
    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
    break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"editAdminActivity_args"];
if (__activity_isset) {
if (__activity != nil) {
  [outProtocol writeFieldBeginWithName: @"activity" type: TType_STRING fieldID: 1];
  [outProtocol writeString: __activity];
  [outProtocol writeFieldEnd];
}
}
if (__activityCommunities_isset) {
if (__activityCommunities != nil) {
  [outProtocol writeFieldBeginWithName: @"activityCommunities" type: TType_STRING fieldID: 2];
  [outProtocol writeString: __activityCommunities];
  [outProtocol writeFieldEnd];
}
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"editAdminActivity_args("];
[ms appendString: @"activity:"];
[ms appendFormat: @"\"%@\"", __activity];
[ms appendString: @",activityCommunities:"];
[ms appendFormat: @"\"%@\"", __activityCommunities];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@interface EditAdminActivity_result : NSObject <TBase, NSCoding> {
BOOL __success;

BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) init;
- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BOOL) success;
- (void) setSuccess: (BOOL) success;
#endif
- (BOOL) successIsSet;

@end

@implementation EditAdminActivity_result

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithSuccess: (BOOL) success
{
self = [super init];
__success = success;
__success_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"success"])
{
__success = [decoder decodeBoolForKey: @"success"];
__success_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__success_isset)
{
[encoder encodeBool: __success forKey: @"success"];
}
}

- (void) dealloc
{
[super dealloc_stub];
}

- (BOOL) success {
return __success;
}

- (void) setSuccess: (BOOL) success {
__success = success;
__success_isset = YES;
}

- (BOOL) successIsSet {
return __success_isset;
}

- (void) unsetSuccess {
__success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
  break;
}
switch (fieldID)
{
  case 0:
    if (fieldType == TType_BOOL) {
      BOOL fieldValue = [inProtocol readBool];
      [self setSuccess: fieldValue];
    } else { 
      [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
    }
    break;
  default:
    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
    break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"EditAdminActivity_result"];

if (__success_isset) {
[outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
[outProtocol writeBool: __success];
[outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"EditAdminActivity_result("];
[ms appendString: @"success:"];
[ms appendFormat: @"%i", __success];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@implementation IActivityAdminServiceEditAdminActivityClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
self = [super init];
inProtocol = [anInProtocol retain_stub];
outProtocol = [anOutProtocol retain_stub];
return self;
}

- (void) dealloc
{
[inProtocol release_stub];
[outProtocol release_stub];
[super dealloc_stub];
}

- (void) send_editAdminActivity: (NSString *) activity activityCommunities: (NSString *) activityCommunities
{
[outProtocol writeMessageBeginWithName: @"editAdminActivity" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"editAdminActivity_args"];
if (activity != nil){
[outProtocol writeFieldBeginWithName: @"activity" type: TType_STRING fieldID: 1];
[outProtocol writeString: activity];
[outProtocol writeFieldEnd];
}
if (activityCommunities != nil){
[outProtocol writeFieldBeginWithName: @"activityCommunities" type: TType_STRING fieldID: 2];
[outProtocol writeString: activityCommunities];
[outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
}

- (BOOL) recv_editAdminActivity
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
EditAdminActivity_result * result = [[[EditAdminActivity_result alloc] init] autorelease_stub];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"editAdminActivity failed: unknown result"];
}

- (BOOL) editAdminActivity: (NSString *) activity activityCommunities: (NSString *) activityCommunities
{
[self send_editAdminActivity : activity activityCommunities: activityCommunities];
return [self recv_editAdminActivity];
}

@end

@implementation IActivityAdminServiceEditAdminActivityProcessor

- (id) initWithIActivityAdminServiceEditAdminActivity: (id <IActivityAdminServiceEditAdminActivity>) service
{
self = [super init];
if (!self) {
  return nil;
}
mService = [service retain_stub];
mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
{
SEL s = @selector(process_editAdminActivity_withSequenceID:inProtocol:outProtocol:);
NSMethodSignature * sig = [self methodSignatureForSelector: s];
NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
[invocation setSelector: s];
[invocation retainArguments];
[mMethodMap setValue: invocation forKey: @"editAdminActivity"];
}
return self;
}

- (id<IActivityAdminServiceEditAdminActivity>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_editAdminActivity_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
editAdminActivity_args * args = [[editAdminActivity_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
EditAdminActivity_result * result = [[EditAdminActivity_result alloc] init];
[result setSuccess: [mService editAdminActivity: [args activity] activityCommunities: [args activityCommunities]]];
[outProtocol writeMessageBeginWithName: @"editAdminActivity"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) dealloc
{
[mService release_stub];
[mMethodMap release_stub];
[super dealloc_stub];
}

@end

@interface getAdminActivityById_args : NSObject <TBase, NSCoding> {
int32_t __id;

BOOL __id_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=id, setter=setId:) int32_t id;
#endif

- (id) init;
- (id) initWithId: (int32_t) id;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (int32_t) id;
- (void) setId: (int32_t) id;
#endif
- (BOOL) idIsSet;

@end

@implementation getAdminActivityById_args

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithId: (int32_t) id
{
self = [super init];
__id = id;
__id_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"id"])
{
__id = [decoder decodeInt32ForKey: @"id"];
__id_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__id_isset)
{
[encoder encodeInt32: __id forKey: @"id"];
}
}

- (void) dealloc
{
[super dealloc_stub];
}

- (int32_t) id {
return __id;
}

- (void) setId: (int32_t) id {
__id = id;
__id_isset = YES;
}

- (BOOL) idIsSet {
return __id_isset;
}

- (void) unsetId {
__id_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 1:
  if (fieldType == TType_I32) {
    int32_t fieldValue = [inProtocol readI32];
    [self setId: fieldValue];
  } else { 
    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  }
  break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"getAdminActivityById_args"];
if (__id_isset) {
[outProtocol writeFieldBeginWithName: @"id" type: TType_I32 fieldID: 1];
[outProtocol writeI32: __id];
[outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"getAdminActivityById_args("];
[ms appendString: @"id:"];
[ms appendFormat: @"%i", __id];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@interface GetAdminActivityById_result : NSObject <TBase, NSCoding> {
TActivity * __success;

BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) TActivity * success;
#endif

- (id) init;
- (id) initWithSuccess: (TActivity *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (TActivity *) success;
- (void) setSuccess: (TActivity *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation GetAdminActivityById_result

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithSuccess: (TActivity *) success
{
self = [super init];
__success = [success retain_stub];
__success_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"success"])
{
__success = [[decoder decodeObjectForKey: @"success"] retain_stub];
__success_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__success_isset)
{
[encoder encodeObject: __success forKey: @"success"];
}
}

- (void) dealloc
{
[__success release_stub];
[super dealloc_stub];
}

- (TActivity *) success {
return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (TActivity *) success {
[success retain_stub];
[__success release_stub];
__success = success;
__success_isset = YES;
}

- (BOOL) successIsSet {
return __success_isset;
}

- (void) unsetSuccess {
[__success release_stub];
__success = nil;
__success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 0:
  if (fieldType == TType_STRUCT) {
    TActivity *fieldValue = [[TActivity alloc] init];
    [fieldValue read: inProtocol];
    [self setSuccess: fieldValue];
    [fieldValue release_stub];
  } else { 
    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  }
  break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"GetAdminActivityById_result"];

if (__success_isset) {
if (__success != nil) {
[outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
[__success write: outProtocol];
[outProtocol writeFieldEnd];
}
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"GetAdminActivityById_result("];
[ms appendString: @"success:"];
[ms appendFormat: @"%@", __success];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@implementation IActivityAdminServiceGetAdminActivityByIdClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
self = [super init];
inProtocol = [anInProtocol retain_stub];
outProtocol = [anOutProtocol retain_stub];
return self;
}

- (void) dealloc
{
[inProtocol release_stub];
[outProtocol release_stub];
[super dealloc_stub];
}

- (void) send_getAdminActivityById: (int32_t) id
{
[outProtocol writeMessageBeginWithName: @"getAdminActivityById" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"getAdminActivityById_args"];
[outProtocol writeFieldBeginWithName: @"id" type: TType_I32 fieldID: 1];
[outProtocol writeI32: id];
[outProtocol writeFieldEnd];
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
}

- (TActivity *) recv_getAdminActivityById
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
GetAdminActivityById_result * result = [[[GetAdminActivityById_result alloc] init] autorelease_stub];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"getAdminActivityById failed: unknown result"];
}

- (TActivity *) getAdminActivityById: (int32_t) id
{
[self send_getAdminActivityById : id];
return [self recv_getAdminActivityById];
}

@end

@implementation IActivityAdminServiceGetAdminActivityByIdProcessor

- (id) initWithIActivityAdminServiceGetAdminActivityById: (id <IActivityAdminServiceGetAdminActivityById>) service
{
self = [super init];
if (!self) {
  return nil;
}
mService = [service retain_stub];
mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
{
SEL s = @selector(process_getAdminActivityById_withSequenceID:inProtocol:outProtocol:);
NSMethodSignature * sig = [self methodSignatureForSelector: s];
NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
[invocation setSelector: s];
[invocation retainArguments];
[mMethodMap setValue: invocation forKey: @"getAdminActivityById"];
}
return self;
}

- (id<IActivityAdminServiceGetAdminActivityById>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_getAdminActivityById_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
getAdminActivityById_args * args = [[getAdminActivityById_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
GetAdminActivityById_result * result = [[GetAdminActivityById_result alloc] init];
[result setSuccess: [mService getAdminActivityById: [args id]]];
[outProtocol writeMessageBeginWithName: @"getAdminActivityById"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) dealloc
{
[mService release_stub];
[mMethodMap release_stub];
[super dealloc_stub];
}

@end

@interface updateAdminActivityStatus_args : NSObject <TBase, NSCoding> {
int32_t __id;
int32_t __status;

BOOL __id_isset;
BOOL __status_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=id, setter=setId:) int32_t id;
@property (nonatomic, getter=status, setter=setStatus:) int32_t status;
#endif

- (id) init;
- (id) initWithId: (int32_t) id status: (int32_t) status;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (int32_t) id;
- (void) setId: (int32_t) id;
#endif
- (BOOL) idIsSet;

#if !__has_feature(objc_arc)
- (int32_t) status;
- (void) setStatus: (int32_t) status;
#endif
- (BOOL) statusIsSet;

@end

@implementation updateAdminActivityStatus_args

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithId: (int32_t) id status: (int32_t) status
{
self = [super init];
__id = id;
__id_isset = YES;
__status = status;
__status_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"id"])
{
__id = [decoder decodeInt32ForKey: @"id"];
__id_isset = YES;
}
if ([decoder containsValueForKey: @"status"])
{
__status = [decoder decodeInt32ForKey: @"status"];
__status_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__id_isset)
{
[encoder encodeInt32: __id forKey: @"id"];
}
if (__status_isset)
{
[encoder encodeInt32: __status forKey: @"status"];
}
}

- (void) dealloc
{
[super dealloc_stub];
}

- (int32_t) id {
return __id;
}

- (void) setId: (int32_t) id {
__id = id;
__id_isset = YES;
}

- (BOOL) idIsSet {
return __id_isset;
}

- (void) unsetId {
__id_isset = NO;
}

- (int32_t) status {
return __status;
}

- (void) setStatus: (int32_t) status {
__status = status;
__status_isset = YES;
}

- (BOOL) statusIsSet {
return __status_isset;
}

- (void) unsetStatus {
__status_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 1:
if (fieldType == TType_I32) {
  int32_t fieldValue = [inProtocol readI32];
  [self setId: fieldValue];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
case 2:
if (fieldType == TType_I32) {
  int32_t fieldValue = [inProtocol readI32];
  [self setStatus: fieldValue];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"updateAdminActivityStatus_args"];
if (__id_isset) {
[outProtocol writeFieldBeginWithName: @"id" type: TType_I32 fieldID: 1];
[outProtocol writeI32: __id];
[outProtocol writeFieldEnd];
}
if (__status_isset) {
[outProtocol writeFieldBeginWithName: @"status" type: TType_I32 fieldID: 2];
[outProtocol writeI32: __status];
[outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"updateAdminActivityStatus_args("];
[ms appendString: @"id:"];
[ms appendFormat: @"%i", __id];
[ms appendString: @",status:"];
[ms appendFormat: @"%i", __status];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@interface UpdateAdminActivityStatus_result : NSObject <TBase, NSCoding> {
BOOL __success;

BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) init;
- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BOOL) success;
- (void) setSuccess: (BOOL) success;
#endif
- (BOOL) successIsSet;

@end

@implementation UpdateAdminActivityStatus_result

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithSuccess: (BOOL) success
{
self = [super init];
__success = success;
__success_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"success"])
{
__success = [decoder decodeBoolForKey: @"success"];
__success_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__success_isset)
{
[encoder encodeBool: __success forKey: @"success"];
}
}

- (void) dealloc
{
[super dealloc_stub];
}

- (BOOL) success {
return __success;
}

- (void) setSuccess: (BOOL) success {
__success = success;
__success_isset = YES;
}

- (BOOL) successIsSet {
return __success_isset;
}

- (void) unsetSuccess {
__success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 0:
if (fieldType == TType_BOOL) {
  BOOL fieldValue = [inProtocol readBool];
  [self setSuccess: fieldValue];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"UpdateAdminActivityStatus_result"];

if (__success_isset) {
[outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
[outProtocol writeBool: __success];
[outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"UpdateAdminActivityStatus_result("];
[ms appendString: @"success:"];
[ms appendFormat: @"%i", __success];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@implementation IActivityAdminServiceUpdateAdminActivityStatusClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
self = [super init];
inProtocol = [anInProtocol retain_stub];
outProtocol = [anOutProtocol retain_stub];
return self;
}

- (void) dealloc
{
[inProtocol release_stub];
[outProtocol release_stub];
[super dealloc_stub];
}

- (void) send_updateAdminActivityStatus: (int32_t) id status: (int32_t) status
{
[outProtocol writeMessageBeginWithName: @"updateAdminActivityStatus" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"updateAdminActivityStatus_args"];
[outProtocol writeFieldBeginWithName: @"id" type: TType_I32 fieldID: 1];
[outProtocol writeI32: id];
[outProtocol writeFieldEnd];
[outProtocol writeFieldBeginWithName: @"status" type: TType_I32 fieldID: 2];
[outProtocol writeI32: status];
[outProtocol writeFieldEnd];
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
}

- (BOOL) recv_updateAdminActivityStatus
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
UpdateAdminActivityStatus_result * result = [[[UpdateAdminActivityStatus_result alloc] init] autorelease_stub];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"updateAdminActivityStatus failed: unknown result"];
}

- (BOOL) updateAdminActivityStatus: (int32_t) id status: (int32_t) status
{
[self send_updateAdminActivityStatus : id status: status];
return [self recv_updateAdminActivityStatus];
}

@end

@implementation IActivityAdminServiceUpdateAdminActivityStatusProcessor

- (id) initWithIActivityAdminServiceUpdateAdminActivityStatus: (id <IActivityAdminServiceUpdateAdminActivityStatus>) service
{
self = [super init];
if (!self) {
  return nil;
}
mService = [service retain_stub];
mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
{
SEL s = @selector(process_updateAdminActivityStatus_withSequenceID:inProtocol:outProtocol:);
NSMethodSignature * sig = [self methodSignatureForSelector: s];
NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
[invocation setSelector: s];
[invocation retainArguments];
[mMethodMap setValue: invocation forKey: @"updateAdminActivityStatus"];
}
return self;
}

- (id<IActivityAdminServiceUpdateAdminActivityStatus>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_updateAdminActivityStatus_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
updateAdminActivityStatus_args * args = [[updateAdminActivityStatus_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
UpdateAdminActivityStatus_result * result = [[UpdateAdminActivityStatus_result alloc] init];
[result setSuccess: [mService updateAdminActivityStatus: [args id] status: [args status]]];
[outProtocol writeMessageBeginWithName: @"updateAdminActivityStatus"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) dealloc
{
[mService release_stub];
[mMethodMap release_stub];
[super dealloc_stub];
}

@end

@interface deleteAdminActivity_args : NSObject <TBase, NSCoding> {
int32_t __id;

BOOL __id_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=id, setter=setId:) int32_t id;
#endif

- (id) init;
- (id) initWithId: (int32_t) id;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (int32_t) id;
- (void) setId: (int32_t) id;
#endif
- (BOOL) idIsSet;

@end

@implementation deleteAdminActivity_args

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithId: (int32_t) id
{
self = [super init];
__id = id;
__id_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"id"])
{
__id = [decoder decodeInt32ForKey: @"id"];
__id_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__id_isset)
{
[encoder encodeInt32: __id forKey: @"id"];
}
}

- (void) dealloc
{
[super dealloc_stub];
}

- (int32_t) id {
return __id;
}

- (void) setId: (int32_t) id {
__id = id;
__id_isset = YES;
}

- (BOOL) idIsSet {
return __id_isset;
}

- (void) unsetId {
__id_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 1:
if (fieldType == TType_I32) {
int32_t fieldValue = [inProtocol readI32];
[self setId: fieldValue];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"deleteAdminActivity_args"];
if (__id_isset) {
[outProtocol writeFieldBeginWithName: @"id" type: TType_I32 fieldID: 1];
[outProtocol writeI32: __id];
[outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"deleteAdminActivity_args("];
[ms appendString: @"id:"];
[ms appendFormat: @"%i", __id];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@interface DeleteAdminActivity_result : NSObject <TBase, NSCoding> {
BOOL __success;

BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) init;
- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BOOL) success;
- (void) setSuccess: (BOOL) success;
#endif
- (BOOL) successIsSet;

@end

@implementation DeleteAdminActivity_result

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithSuccess: (BOOL) success
{
self = [super init];
__success = success;
__success_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"success"])
{
__success = [decoder decodeBoolForKey: @"success"];
__success_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__success_isset)
{
[encoder encodeBool: __success forKey: @"success"];
}
}

- (void) dealloc
{
[super dealloc_stub];
}

- (BOOL) success {
return __success;
}

- (void) setSuccess: (BOOL) success {
__success = success;
__success_isset = YES;
}

- (BOOL) successIsSet {
return __success_isset;
}

- (void) unsetSuccess {
__success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 0:
if (fieldType == TType_BOOL) {
BOOL fieldValue = [inProtocol readBool];
[self setSuccess: fieldValue];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"DeleteAdminActivity_result"];

if (__success_isset) {
[outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
[outProtocol writeBool: __success];
[outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"DeleteAdminActivity_result("];
[ms appendString: @"success:"];
[ms appendFormat: @"%i", __success];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@implementation IActivityAdminServiceDeleteAdminActivityClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
self = [super init];
inProtocol = [anInProtocol retain_stub];
outProtocol = [anOutProtocol retain_stub];
return self;
}

- (void) dealloc
{
[inProtocol release_stub];
[outProtocol release_stub];
[super dealloc_stub];
}

- (void) send_deleteAdminActivity: (int32_t) id
{
[outProtocol writeMessageBeginWithName: @"deleteAdminActivity" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"deleteAdminActivity_args"];
[outProtocol writeFieldBeginWithName: @"id" type: TType_I32 fieldID: 1];
[outProtocol writeI32: id];
[outProtocol writeFieldEnd];
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
}

- (BOOL) recv_deleteAdminActivity
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
DeleteAdminActivity_result * result = [[[DeleteAdminActivity_result alloc] init] autorelease_stub];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"deleteAdminActivity failed: unknown result"];
}

- (BOOL) deleteAdminActivity: (int32_t) id
{
[self send_deleteAdminActivity : id];
return [self recv_deleteAdminActivity];
}

@end

@implementation IActivityAdminServiceDeleteAdminActivityProcessor

- (id) initWithIActivityAdminServiceDeleteAdminActivity: (id <IActivityAdminServiceDeleteAdminActivity>) service
{
self = [super init];
if (!self) {
  return nil;
}
mService = [service retain_stub];
mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
{
SEL s = @selector(process_deleteAdminActivity_withSequenceID:inProtocol:outProtocol:);
NSMethodSignature * sig = [self methodSignatureForSelector: s];
NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
[invocation setSelector: s];
[invocation retainArguments];
[mMethodMap setValue: invocation forKey: @"deleteAdminActivity"];
}
return self;
}

- (id<IActivityAdminServiceDeleteAdminActivity>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_deleteAdminActivity_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
deleteAdminActivity_args * args = [[deleteAdminActivity_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
DeleteAdminActivity_result * result = [[DeleteAdminActivity_result alloc] init];
[result setSuccess: [mService deleteAdminActivity: [args id]]];
[outProtocol writeMessageBeginWithName: @"deleteAdminActivity"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) dealloc
{
[mService release_stub];
[mMethodMap release_stub];
[super dealloc_stub];
}

@end

@interface getAdminPostListByActivityId_args : NSObject <TBase, NSCoding> {
int32_t __id;
int32_t __currentPage;
int32_t __pageSize;

BOOL __id_isset;
BOOL __currentPage_isset;
BOOL __pageSize_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=id, setter=setId:) int32_t id;
@property (nonatomic, getter=currentPage, setter=setCurrentPage:) int32_t currentPage;
@property (nonatomic, getter=pageSize, setter=setPageSize:) int32_t pageSize;
#endif

- (id) init;
- (id) initWithId: (int32_t) id currentPage: (int32_t) currentPage pageSize: (int32_t) pageSize;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (int32_t) id;
- (void) setId: (int32_t) id;
#endif
- (BOOL) idIsSet;

#if !__has_feature(objc_arc)
- (int32_t) currentPage;
- (void) setCurrentPage: (int32_t) currentPage;
#endif
- (BOOL) currentPageIsSet;

#if !__has_feature(objc_arc)
- (int32_t) pageSize;
- (void) setPageSize: (int32_t) pageSize;
#endif
- (BOOL) pageSizeIsSet;

@end

@implementation getAdminPostListByActivityId_args

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithId: (int32_t) id currentPage: (int32_t) currentPage pageSize: (int32_t) pageSize
{
self = [super init];
__id = id;
__id_isset = YES;
__currentPage = currentPage;
__currentPage_isset = YES;
__pageSize = pageSize;
__pageSize_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"id"])
{
__id = [decoder decodeInt32ForKey: @"id"];
__id_isset = YES;
}
if ([decoder containsValueForKey: @"currentPage"])
{
__currentPage = [decoder decodeInt32ForKey: @"currentPage"];
__currentPage_isset = YES;
}
if ([decoder containsValueForKey: @"pageSize"])
{
__pageSize = [decoder decodeInt32ForKey: @"pageSize"];
__pageSize_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__id_isset)
{
[encoder encodeInt32: __id forKey: @"id"];
}
if (__currentPage_isset)
{
[encoder encodeInt32: __currentPage forKey: @"currentPage"];
}
if (__pageSize_isset)
{
[encoder encodeInt32: __pageSize forKey: @"pageSize"];
}
}

- (void) dealloc
{
[super dealloc_stub];
}

- (int32_t) id {
return __id;
}

- (void) setId: (int32_t) id {
__id = id;
__id_isset = YES;
}

- (BOOL) idIsSet {
return __id_isset;
}

- (void) unsetId {
__id_isset = NO;
}

- (int32_t) currentPage {
return __currentPage;
}

- (void) setCurrentPage: (int32_t) currentPage {
__currentPage = currentPage;
__currentPage_isset = YES;
}

- (BOOL) currentPageIsSet {
return __currentPage_isset;
}

- (void) unsetCurrentPage {
__currentPage_isset = NO;
}

- (int32_t) pageSize {
return __pageSize;
}

- (void) setPageSize: (int32_t) pageSize {
__pageSize = pageSize;
__pageSize_isset = YES;
}

- (BOOL) pageSizeIsSet {
return __pageSize_isset;
}

- (void) unsetPageSize {
__pageSize_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 1:
if (fieldType == TType_I32) {
int32_t fieldValue = [inProtocol readI32];
[self setId: fieldValue];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
case 2:
if (fieldType == TType_I32) {
int32_t fieldValue = [inProtocol readI32];
[self setCurrentPage: fieldValue];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
case 3:
if (fieldType == TType_I32) {
int32_t fieldValue = [inProtocol readI32];
[self setPageSize: fieldValue];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"getAdminPostListByActivityId_args"];
if (__id_isset) {
[outProtocol writeFieldBeginWithName: @"id" type: TType_I32 fieldID: 1];
[outProtocol writeI32: __id];
[outProtocol writeFieldEnd];
}
if (__currentPage_isset) {
[outProtocol writeFieldBeginWithName: @"currentPage" type: TType_I32 fieldID: 2];
[outProtocol writeI32: __currentPage];
[outProtocol writeFieldEnd];
}
if (__pageSize_isset) {
[outProtocol writeFieldBeginWithName: @"pageSize" type: TType_I32 fieldID: 3];
[outProtocol writeI32: __pageSize];
[outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"getAdminPostListByActivityId_args("];
[ms appendString: @"id:"];
[ms appendFormat: @"%i", __id];
[ms appendString: @",currentPage:"];
[ms appendFormat: @"%i", __currentPage];
[ms appendString: @",pageSize:"];
[ms appendFormat: @"%i", __pageSize];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@interface GetAdminPostListByActivityId_result : NSObject <TBase, NSCoding> {
TAdminPostQueryData * __success;

BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) TAdminPostQueryData * success;
#endif

- (id) init;
- (id) initWithSuccess: (TAdminPostQueryData *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (TAdminPostQueryData *) success;
- (void) setSuccess: (TAdminPostQueryData *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation GetAdminPostListByActivityId_result

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithSuccess: (TAdminPostQueryData *) success
{
self = [super init];
__success = [success retain_stub];
__success_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"success"])
{
__success = [[decoder decodeObjectForKey: @"success"] retain_stub];
__success_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__success_isset)
{
[encoder encodeObject: __success forKey: @"success"];
}
}

- (void) dealloc
{
[__success release_stub];
[super dealloc_stub];
}

- (TAdminPostQueryData *) success {
return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (TAdminPostQueryData *) success {
[success retain_stub];
[__success release_stub];
__success = success;
__success_isset = YES;
}

- (BOOL) successIsSet {
return __success_isset;
}

- (void) unsetSuccess {
[__success release_stub];
__success = nil;
__success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 0:
if (fieldType == TType_STRUCT) {
TAdminPostQueryData *fieldValue = [[TAdminPostQueryData alloc] init];
[fieldValue read: inProtocol];
[self setSuccess: fieldValue];
[fieldValue release_stub];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"GetAdminPostListByActivityId_result"];

if (__success_isset) {
if (__success != nil) {
[outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
[__success write: outProtocol];
[outProtocol writeFieldEnd];
}
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"GetAdminPostListByActivityId_result("];
[ms appendString: @"success:"];
[ms appendFormat: @"%@", __success];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@implementation IActivityAdminServiceGetAdminPostListByActivityIdClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
self = [super init];
inProtocol = [anInProtocol retain_stub];
outProtocol = [anOutProtocol retain_stub];
return self;
}

- (void) dealloc
{
[inProtocol release_stub];
[outProtocol release_stub];
[super dealloc_stub];
}

- (void) send_getAdminPostListByActivityId: (int32_t) id currentPage: (int32_t) currentPage pageSize: (int32_t) pageSize
{
[outProtocol writeMessageBeginWithName: @"getAdminPostListByActivityId" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"getAdminPostListByActivityId_args"];
[outProtocol writeFieldBeginWithName: @"id" type: TType_I32 fieldID: 1];
[outProtocol writeI32: id];
[outProtocol writeFieldEnd];
[outProtocol writeFieldBeginWithName: @"currentPage" type: TType_I32 fieldID: 2];
[outProtocol writeI32: currentPage];
[outProtocol writeFieldEnd];
[outProtocol writeFieldBeginWithName: @"pageSize" type: TType_I32 fieldID: 3];
[outProtocol writeI32: pageSize];
[outProtocol writeFieldEnd];
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
}

- (TAdminPostQueryData *) recv_getAdminPostListByActivityId
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
GetAdminPostListByActivityId_result * result = [[[GetAdminPostListByActivityId_result alloc] init] autorelease_stub];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"getAdminPostListByActivityId failed: unknown result"];
}

- (TAdminPostQueryData *) getAdminPostListByActivityId: (int32_t) id currentPage: (int32_t) currentPage pageSize: (int32_t) pageSize
{
[self send_getAdminPostListByActivityId : id currentPage: currentPage pageSize: pageSize];
return [self recv_getAdminPostListByActivityId];
}

@end

@implementation IActivityAdminServiceGetAdminPostListByActivityIdProcessor

- (id) initWithIActivityAdminServiceGetAdminPostListByActivityId: (id <IActivityAdminServiceGetAdminPostListByActivityId>) service
{
self = [super init];
if (!self) {
  return nil;
}
mService = [service retain_stub];
mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
{
SEL s = @selector(process_getAdminPostListByActivityId_withSequenceID:inProtocol:outProtocol:);
NSMethodSignature * sig = [self methodSignatureForSelector: s];
NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
[invocation setSelector: s];
[invocation retainArguments];
[mMethodMap setValue: invocation forKey: @"getAdminPostListByActivityId"];
}
return self;
}

- (id<IActivityAdminServiceGetAdminPostListByActivityId>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_getAdminPostListByActivityId_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
getAdminPostListByActivityId_args * args = [[getAdminPostListByActivityId_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
GetAdminPostListByActivityId_result * result = [[GetAdminPostListByActivityId_result alloc] init];
[result setSuccess: [mService getAdminPostListByActivityId: [args id] currentPage: [args currentPage] pageSize: [args pageSize]]];
[outProtocol writeMessageBeginWithName: @"getAdminPostListByActivityId"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) dealloc
{
[mService release_stub];
[mMethodMap release_stub];
[super dealloc_stub];
}

@end

@interface addAdminPrize_args : NSObject <TBase, NSCoding> {
NSString * __prize;

BOOL __prize_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=prize, setter=setPrize:) NSString * prize;
#endif

- (id) init;
- (id) initWithPrize: (NSString *) prize;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) prize;
- (void) setPrize: (NSString *) prize;
#endif
- (BOOL) prizeIsSet;

@end

@implementation addAdminPrize_args

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithPrize: (NSString *) prize
{
self = [super init];
__prize = [prize retain_stub];
__prize_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"prize"])
{
__prize = [[decoder decodeObjectForKey: @"prize"] retain_stub];
__prize_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__prize_isset)
{
[encoder encodeObject: __prize forKey: @"prize"];
}
}

- (void) dealloc
{
[__prize release_stub];
[super dealloc_stub];
}

- (NSString *) prize {
return [[__prize retain_stub] autorelease_stub];
}

- (void) setPrize: (NSString *) prize {
[prize retain_stub];
[__prize release_stub];
__prize = prize;
__prize_isset = YES;
}

- (BOOL) prizeIsSet {
return __prize_isset;
}

- (void) unsetPrize {
[__prize release_stub];
__prize = nil;
__prize_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 1:
if (fieldType == TType_STRING) {
NSString * fieldValue = [inProtocol readString];
[self setPrize: fieldValue];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"addAdminPrize_args"];
if (__prize_isset) {
if (__prize != nil) {
[outProtocol writeFieldBeginWithName: @"prize" type: TType_STRING fieldID: 1];
[outProtocol writeString: __prize];
[outProtocol writeFieldEnd];
}
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"addAdminPrize_args("];
[ms appendString: @"prize:"];
[ms appendFormat: @"\"%@\"", __prize];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@interface AddAdminPrize_result : NSObject <TBase, NSCoding> {
BOOL __success;

BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) init;
- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BOOL) success;
- (void) setSuccess: (BOOL) success;
#endif
- (BOOL) successIsSet;

@end

@implementation AddAdminPrize_result

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithSuccess: (BOOL) success
{
self = [super init];
__success = success;
__success_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"success"])
{
__success = [decoder decodeBoolForKey: @"success"];
__success_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__success_isset)
{
[encoder encodeBool: __success forKey: @"success"];
}
}

- (void) dealloc
{
[super dealloc_stub];
}

- (BOOL) success {
return __success;
}

- (void) setSuccess: (BOOL) success {
__success = success;
__success_isset = YES;
}

- (BOOL) successIsSet {
return __success_isset;
}

- (void) unsetSuccess {
__success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 0:
if (fieldType == TType_BOOL) {
BOOL fieldValue = [inProtocol readBool];
[self setSuccess: fieldValue];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"AddAdminPrize_result"];

if (__success_isset) {
[outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
[outProtocol writeBool: __success];
[outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"AddAdminPrize_result("];
[ms appendString: @"success:"];
[ms appendFormat: @"%i", __success];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@implementation IActivityAdminServiceAddAdminPrizeClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
self = [super init];
inProtocol = [anInProtocol retain_stub];
outProtocol = [anOutProtocol retain_stub];
return self;
}

- (void) dealloc
{
[inProtocol release_stub];
[outProtocol release_stub];
[super dealloc_stub];
}

- (void) send_addAdminPrize: (NSString *) prize
{
[outProtocol writeMessageBeginWithName: @"addAdminPrize" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"addAdminPrize_args"];
if (prize != nil){
[outProtocol writeFieldBeginWithName: @"prize" type: TType_STRING fieldID: 1];
[outProtocol writeString: prize];
[outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
}

- (BOOL) recv_addAdminPrize
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
AddAdminPrize_result * result = [[[AddAdminPrize_result alloc] init] autorelease_stub];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"addAdminPrize failed: unknown result"];
}

- (BOOL) addAdminPrize: (NSString *) prize
{
[self send_addAdminPrize : prize];
return [self recv_addAdminPrize];
}

@end

@implementation IActivityAdminServiceAddAdminPrizeProcessor

- (id) initWithIActivityAdminServiceAddAdminPrize: (id <IActivityAdminServiceAddAdminPrize>) service
{
self = [super init];
if (!self) {
  return nil;
}
mService = [service retain_stub];
mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
{
SEL s = @selector(process_addAdminPrize_withSequenceID:inProtocol:outProtocol:);
NSMethodSignature * sig = [self methodSignatureForSelector: s];
NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
[invocation setSelector: s];
[invocation retainArguments];
[mMethodMap setValue: invocation forKey: @"addAdminPrize"];
}
return self;
}

- (id<IActivityAdminServiceAddAdminPrize>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_addAdminPrize_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
addAdminPrize_args * args = [[addAdminPrize_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
AddAdminPrize_result * result = [[AddAdminPrize_result alloc] init];
[result setSuccess: [mService addAdminPrize: [args prize]]];
[outProtocol writeMessageBeginWithName: @"addAdminPrize"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) dealloc
{
[mService release_stub];
[mMethodMap release_stub];
[super dealloc_stub];
}

@end

@interface deleteAdminPrize_args : NSObject <TBase, NSCoding> {
int32_t __activityId;
int32_t __postId;

BOOL __activityId_isset;
BOOL __postId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=activityId, setter=setActivityId:) int32_t activityId;
@property (nonatomic, getter=postId, setter=setPostId:) int32_t postId;
#endif

- (id) init;
- (id) initWithActivityId: (int32_t) activityId postId: (int32_t) postId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (int32_t) activityId;
- (void) setActivityId: (int32_t) activityId;
#endif
- (BOOL) activityIdIsSet;

#if !__has_feature(objc_arc)
- (int32_t) postId;
- (void) setPostId: (int32_t) postId;
#endif
- (BOOL) postIdIsSet;

@end

@implementation deleteAdminPrize_args

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithActivityId: (int32_t) activityId postId: (int32_t) postId
{
self = [super init];
__activityId = activityId;
__activityId_isset = YES;
__postId = postId;
__postId_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"activityId"])
{
__activityId = [decoder decodeInt32ForKey: @"activityId"];
__activityId_isset = YES;
}
if ([decoder containsValueForKey: @"postId"])
{
__postId = [decoder decodeInt32ForKey: @"postId"];
__postId_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__activityId_isset)
{
[encoder encodeInt32: __activityId forKey: @"activityId"];
}
if (__postId_isset)
{
[encoder encodeInt32: __postId forKey: @"postId"];
}
}

- (void) dealloc
{
[super dealloc_stub];
}

- (int32_t) activityId {
return __activityId;
}

- (void) setActivityId: (int32_t) activityId {
__activityId = activityId;
__activityId_isset = YES;
}

- (BOOL) activityIdIsSet {
return __activityId_isset;
}

- (void) unsetActivityId {
__activityId_isset = NO;
}

- (int32_t) postId {
return __postId;
}

- (void) setPostId: (int32_t) postId {
__postId = postId;
__postId_isset = YES;
}

- (BOOL) postIdIsSet {
return __postId_isset;
}

- (void) unsetPostId {
__postId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 1:
if (fieldType == TType_I32) {
int32_t fieldValue = [inProtocol readI32];
[self setActivityId: fieldValue];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
case 2:
if (fieldType == TType_I32) {
int32_t fieldValue = [inProtocol readI32];
[self setPostId: fieldValue];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"deleteAdminPrize_args"];
if (__activityId_isset) {
[outProtocol writeFieldBeginWithName: @"activityId" type: TType_I32 fieldID: 1];
[outProtocol writeI32: __activityId];
[outProtocol writeFieldEnd];
}
if (__postId_isset) {
[outProtocol writeFieldBeginWithName: @"postId" type: TType_I32 fieldID: 2];
[outProtocol writeI32: __postId];
[outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"deleteAdminPrize_args("];
[ms appendString: @"activityId:"];
[ms appendFormat: @"%i", __activityId];
[ms appendString: @",postId:"];
[ms appendFormat: @"%i", __postId];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@interface DeleteAdminPrize_result : NSObject <TBase, NSCoding> {
BOOL __success;

BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) init;
- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BOOL) success;
- (void) setSuccess: (BOOL) success;
#endif
- (BOOL) successIsSet;

@end

@implementation DeleteAdminPrize_result

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithSuccess: (BOOL) success
{
self = [super init];
__success = success;
__success_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"success"])
{
__success = [decoder decodeBoolForKey: @"success"];
__success_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__success_isset)
{
[encoder encodeBool: __success forKey: @"success"];
}
}

- (void) dealloc
{
[super dealloc_stub];
}

- (BOOL) success {
return __success;
}

- (void) setSuccess: (BOOL) success {
__success = success;
__success_isset = YES;
}

- (BOOL) successIsSet {
return __success_isset;
}

- (void) unsetSuccess {
__success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 0:
if (fieldType == TType_BOOL) {
BOOL fieldValue = [inProtocol readBool];
[self setSuccess: fieldValue];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"DeleteAdminPrize_result"];

if (__success_isset) {
[outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
[outProtocol writeBool: __success];
[outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"DeleteAdminPrize_result("];
[ms appendString: @"success:"];
[ms appendFormat: @"%i", __success];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@implementation IActivityAdminServiceDeleteAdminPrizeClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
self = [super init];
inProtocol = [anInProtocol retain_stub];
outProtocol = [anOutProtocol retain_stub];
return self;
}

- (void) dealloc
{
[inProtocol release_stub];
[outProtocol release_stub];
[super dealloc_stub];
}

- (void) send_deleteAdminPrize: (int32_t) activityId postId: (int32_t) postId
{
[outProtocol writeMessageBeginWithName: @"deleteAdminPrize" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"deleteAdminPrize_args"];
[outProtocol writeFieldBeginWithName: @"activityId" type: TType_I32 fieldID: 1];
[outProtocol writeI32: activityId];
[outProtocol writeFieldEnd];
[outProtocol writeFieldBeginWithName: @"postId" type: TType_I32 fieldID: 2];
[outProtocol writeI32: postId];
[outProtocol writeFieldEnd];
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
}

- (BOOL) recv_deleteAdminPrize
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
DeleteAdminPrize_result * result = [[[DeleteAdminPrize_result alloc] init] autorelease_stub];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"deleteAdminPrize failed: unknown result"];
}

- (BOOL) deleteAdminPrize: (int32_t) activityId postId: (int32_t) postId
{
[self send_deleteAdminPrize : activityId postId: postId];
return [self recv_deleteAdminPrize];
}

@end

@implementation IActivityAdminServiceDeleteAdminPrizeProcessor

- (id) initWithIActivityAdminServiceDeleteAdminPrize: (id <IActivityAdminServiceDeleteAdminPrize>) service
{
self = [super init];
if (!self) {
  return nil;
}
mService = [service retain_stub];
mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
{
SEL s = @selector(process_deleteAdminPrize_withSequenceID:inProtocol:outProtocol:);
NSMethodSignature * sig = [self methodSignatureForSelector: s];
NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
[invocation setSelector: s];
[invocation retainArguments];
[mMethodMap setValue: invocation forKey: @"deleteAdminPrize"];
}
return self;
}

- (id<IActivityAdminServiceDeleteAdminPrize>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_deleteAdminPrize_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
deleteAdminPrize_args * args = [[deleteAdminPrize_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
DeleteAdminPrize_result * result = [[DeleteAdminPrize_result alloc] init];
[result setSuccess: [mService deleteAdminPrize: [args activityId] postId: [args postId]]];
[outProtocol writeMessageBeginWithName: @"deleteAdminPrize"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) dealloc
{
[mService release_stub];
[mMethodMap release_stub];
[super dealloc_stub];
}

@end

@interface updateAdminPrizes_args : NSObject <TBase, NSCoding> {
NSString * __prizes;

BOOL __prizes_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=prizes, setter=setPrizes:) NSString * prizes;
#endif

- (id) init;
- (id) initWithPrizes: (NSString *) prizes;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) prizes;
- (void) setPrizes: (NSString *) prizes;
#endif
- (BOOL) prizesIsSet;

@end

@implementation updateAdminPrizes_args

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithPrizes: (NSString *) prizes
{
self = [super init];
__prizes = [prizes retain_stub];
__prizes_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"prizes"])
{
__prizes = [[decoder decodeObjectForKey: @"prizes"] retain_stub];
__prizes_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__prizes_isset)
{
[encoder encodeObject: __prizes forKey: @"prizes"];
}
}

- (void) dealloc
{
[__prizes release_stub];
[super dealloc_stub];
}

- (NSString *) prizes {
return [[__prizes retain_stub] autorelease_stub];
}

- (void) setPrizes: (NSString *) prizes {
[prizes retain_stub];
[__prizes release_stub];
__prizes = prizes;
__prizes_isset = YES;
}

- (BOOL) prizesIsSet {
return __prizes_isset;
}

- (void) unsetPrizes {
[__prizes release_stub];
__prizes = nil;
__prizes_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 1:
if (fieldType == TType_STRING) {
NSString * fieldValue = [inProtocol readString];
[self setPrizes: fieldValue];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"updateAdminPrizes_args"];
if (__prizes_isset) {
if (__prizes != nil) {
[outProtocol writeFieldBeginWithName: @"prizes" type: TType_STRING fieldID: 1];
[outProtocol writeString: __prizes];
[outProtocol writeFieldEnd];
}
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"updateAdminPrizes_args("];
[ms appendString: @"prizes:"];
[ms appendFormat: @"\"%@\"", __prizes];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@interface UpdateAdminPrizes_result : NSObject <TBase, NSCoding> {
BOOL __success;

BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) init;
- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BOOL) success;
- (void) setSuccess: (BOOL) success;
#endif
- (BOOL) successIsSet;

@end

@implementation UpdateAdminPrizes_result

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithSuccess: (BOOL) success
{
self = [super init];
__success = success;
__success_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"success"])
{
__success = [decoder decodeBoolForKey: @"success"];
__success_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__success_isset)
{
[encoder encodeBool: __success forKey: @"success"];
}
}

- (void) dealloc
{
[super dealloc_stub];
}

- (BOOL) success {
return __success;
}

- (void) setSuccess: (BOOL) success {
__success = success;
__success_isset = YES;
}

- (BOOL) successIsSet {
return __success_isset;
}

- (void) unsetSuccess {
__success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 0:
if (fieldType == TType_BOOL) {
BOOL fieldValue = [inProtocol readBool];
[self setSuccess: fieldValue];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"UpdateAdminPrizes_result"];

if (__success_isset) {
[outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
[outProtocol writeBool: __success];
[outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"UpdateAdminPrizes_result("];
[ms appendString: @"success:"];
[ms appendFormat: @"%i", __success];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@implementation IActivityAdminServiceUpdateAdminPrizesClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
self = [super init];
inProtocol = [anInProtocol retain_stub];
outProtocol = [anOutProtocol retain_stub];
return self;
}

- (void) dealloc
{
[inProtocol release_stub];
[outProtocol release_stub];
[super dealloc_stub];
}

- (void) send_updateAdminPrizes: (NSString *) prizes
{
[outProtocol writeMessageBeginWithName: @"updateAdminPrizes" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"updateAdminPrizes_args"];
if (prizes != nil){
[outProtocol writeFieldBeginWithName: @"prizes" type: TType_STRING fieldID: 1];
[outProtocol writeString: prizes];
[outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
}

- (BOOL) recv_updateAdminPrizes
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
UpdateAdminPrizes_result * result = [[[UpdateAdminPrizes_result alloc] init] autorelease_stub];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"updateAdminPrizes failed: unknown result"];
}

- (BOOL) updateAdminPrizes: (NSString *) prizes
{
[self send_updateAdminPrizes : prizes];
return [self recv_updateAdminPrizes];
}

@end

@implementation IActivityAdminServiceUpdateAdminPrizesProcessor

- (id) initWithIActivityAdminServiceUpdateAdminPrizes: (id <IActivityAdminServiceUpdateAdminPrizes>) service
{
self = [super init];
if (!self) {
  return nil;
}
mService = [service retain_stub];
mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
{
SEL s = @selector(process_updateAdminPrizes_withSequenceID:inProtocol:outProtocol:);
NSMethodSignature * sig = [self methodSignatureForSelector: s];
NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
[invocation setSelector: s];
[invocation retainArguments];
[mMethodMap setValue: invocation forKey: @"updateAdminPrizes"];
}
return self;
}

- (id<IActivityAdminServiceUpdateAdminPrizes>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_updateAdminPrizes_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
updateAdminPrizes_args * args = [[updateAdminPrizes_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
UpdateAdminPrizes_result * result = [[UpdateAdminPrizes_result alloc] init];
[result setSuccess: [mService updateAdminPrizes: [args prizes]]];
[outProtocol writeMessageBeginWithName: @"updateAdminPrizes"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) dealloc
{
[mService release_stub];
[mMethodMap release_stub];
[super dealloc_stub];
}

@end

@interface getAdminPrizeList_args : NSObject <TBase, NSCoding> {
int32_t __id;
int32_t __currentPage;
int32_t __pageSize;

BOOL __id_isset;
BOOL __currentPage_isset;
BOOL __pageSize_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=id, setter=setId:) int32_t id;
@property (nonatomic, getter=currentPage, setter=setCurrentPage:) int32_t currentPage;
@property (nonatomic, getter=pageSize, setter=setPageSize:) int32_t pageSize;
#endif

- (id) init;
- (id) initWithId: (int32_t) id currentPage: (int32_t) currentPage pageSize: (int32_t) pageSize;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (int32_t) id;
- (void) setId: (int32_t) id;
#endif
- (BOOL) idIsSet;

#if !__has_feature(objc_arc)
- (int32_t) currentPage;
- (void) setCurrentPage: (int32_t) currentPage;
#endif
- (BOOL) currentPageIsSet;

#if !__has_feature(objc_arc)
- (int32_t) pageSize;
- (void) setPageSize: (int32_t) pageSize;
#endif
- (BOOL) pageSizeIsSet;

@end

@implementation getAdminPrizeList_args

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithId: (int32_t) id currentPage: (int32_t) currentPage pageSize: (int32_t) pageSize
{
self = [super init];
__id = id;
__id_isset = YES;
__currentPage = currentPage;
__currentPage_isset = YES;
__pageSize = pageSize;
__pageSize_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"id"])
{
__id = [decoder decodeInt32ForKey: @"id"];
__id_isset = YES;
}
if ([decoder containsValueForKey: @"currentPage"])
{
__currentPage = [decoder decodeInt32ForKey: @"currentPage"];
__currentPage_isset = YES;
}
if ([decoder containsValueForKey: @"pageSize"])
{
__pageSize = [decoder decodeInt32ForKey: @"pageSize"];
__pageSize_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__id_isset)
{
[encoder encodeInt32: __id forKey: @"id"];
}
if (__currentPage_isset)
{
[encoder encodeInt32: __currentPage forKey: @"currentPage"];
}
if (__pageSize_isset)
{
[encoder encodeInt32: __pageSize forKey: @"pageSize"];
}
}

- (void) dealloc
{
[super dealloc_stub];
}

- (int32_t) id {
return __id;
}

- (void) setId: (int32_t) id {
__id = id;
__id_isset = YES;
}

- (BOOL) idIsSet {
return __id_isset;
}

- (void) unsetId {
__id_isset = NO;
}

- (int32_t) currentPage {
return __currentPage;
}

- (void) setCurrentPage: (int32_t) currentPage {
__currentPage = currentPage;
__currentPage_isset = YES;
}

- (BOOL) currentPageIsSet {
return __currentPage_isset;
}

- (void) unsetCurrentPage {
__currentPage_isset = NO;
}

- (int32_t) pageSize {
return __pageSize;
}

- (void) setPageSize: (int32_t) pageSize {
__pageSize = pageSize;
__pageSize_isset = YES;
}

- (BOOL) pageSizeIsSet {
return __pageSize_isset;
}

- (void) unsetPageSize {
__pageSize_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 1:
if (fieldType == TType_I32) {
int32_t fieldValue = [inProtocol readI32];
[self setId: fieldValue];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
case 2:
if (fieldType == TType_I32) {
int32_t fieldValue = [inProtocol readI32];
[self setCurrentPage: fieldValue];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
case 3:
if (fieldType == TType_I32) {
int32_t fieldValue = [inProtocol readI32];
[self setPageSize: fieldValue];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"getAdminPrizeList_args"];
if (__id_isset) {
[outProtocol writeFieldBeginWithName: @"id" type: TType_I32 fieldID: 1];
[outProtocol writeI32: __id];
[outProtocol writeFieldEnd];
}
if (__currentPage_isset) {
[outProtocol writeFieldBeginWithName: @"currentPage" type: TType_I32 fieldID: 2];
[outProtocol writeI32: __currentPage];
[outProtocol writeFieldEnd];
}
if (__pageSize_isset) {
[outProtocol writeFieldBeginWithName: @"pageSize" type: TType_I32 fieldID: 3];
[outProtocol writeI32: __pageSize];
[outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"getAdminPrizeList_args("];
[ms appendString: @"id:"];
[ms appendFormat: @"%i", __id];
[ms appendString: @",currentPage:"];
[ms appendFormat: @"%i", __currentPage];
[ms appendString: @",pageSize:"];
[ms appendFormat: @"%i", __pageSize];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@interface GetAdminPrizeList_result : NSObject <TBase, NSCoding> {
TAdminPrizeQueryData * __success;

BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) TAdminPrizeQueryData * success;
#endif

- (id) init;
- (id) initWithSuccess: (TAdminPrizeQueryData *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (TAdminPrizeQueryData *) success;
- (void) setSuccess: (TAdminPrizeQueryData *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation GetAdminPrizeList_result

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithSuccess: (TAdminPrizeQueryData *) success
{
self = [super init];
__success = [success retain_stub];
__success_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"success"])
{
__success = [[decoder decodeObjectForKey: @"success"] retain_stub];
__success_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__success_isset)
{
[encoder encodeObject: __success forKey: @"success"];
}
}

- (void) dealloc
{
[__success release_stub];
[super dealloc_stub];
}

- (TAdminPrizeQueryData *) success {
return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (TAdminPrizeQueryData *) success {
[success retain_stub];
[__success release_stub];
__success = success;
__success_isset = YES;
}

- (BOOL) successIsSet {
return __success_isset;
}

- (void) unsetSuccess {
[__success release_stub];
__success = nil;
__success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 0:
if (fieldType == TType_STRUCT) {
TAdminPrizeQueryData *fieldValue = [[TAdminPrizeQueryData alloc] init];
[fieldValue read: inProtocol];
[self setSuccess: fieldValue];
[fieldValue release_stub];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"GetAdminPrizeList_result"];

if (__success_isset) {
if (__success != nil) {
[outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
[__success write: outProtocol];
[outProtocol writeFieldEnd];
}
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"GetAdminPrizeList_result("];
[ms appendString: @"success:"];
[ms appendFormat: @"%@", __success];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@implementation IActivityAdminServiceGetAdminPrizeListClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
self = [super init];
inProtocol = [anInProtocol retain_stub];
outProtocol = [anOutProtocol retain_stub];
return self;
}

- (void) dealloc
{
[inProtocol release_stub];
[outProtocol release_stub];
[super dealloc_stub];
}

- (void) send_getAdminPrizeList: (int32_t) id currentPage: (int32_t) currentPage pageSize: (int32_t) pageSize
{
[outProtocol writeMessageBeginWithName: @"getAdminPrizeList" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"getAdminPrizeList_args"];
[outProtocol writeFieldBeginWithName: @"id" type: TType_I32 fieldID: 1];
[outProtocol writeI32: id];
[outProtocol writeFieldEnd];
[outProtocol writeFieldBeginWithName: @"currentPage" type: TType_I32 fieldID: 2];
[outProtocol writeI32: currentPage];
[outProtocol writeFieldEnd];
[outProtocol writeFieldBeginWithName: @"pageSize" type: TType_I32 fieldID: 3];
[outProtocol writeI32: pageSize];
[outProtocol writeFieldEnd];
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
}

- (TAdminPrizeQueryData *) recv_getAdminPrizeList
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
GetAdminPrizeList_result * result = [[[GetAdminPrizeList_result alloc] init] autorelease_stub];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"getAdminPrizeList failed: unknown result"];
}

- (TAdminPrizeQueryData *) getAdminPrizeList: (int32_t) id currentPage: (int32_t) currentPage pageSize: (int32_t) pageSize
{
[self send_getAdminPrizeList : id currentPage: currentPage pageSize: pageSize];
return [self recv_getAdminPrizeList];
}

@end

@implementation IActivityAdminServiceGetAdminPrizeListProcessor

- (id) initWithIActivityAdminServiceGetAdminPrizeList: (id <IActivityAdminServiceGetAdminPrizeList>) service
{
self = [super init];
if (!self) {
  return nil;
}
mService = [service retain_stub];
mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
{
SEL s = @selector(process_getAdminPrizeList_withSequenceID:inProtocol:outProtocol:);
NSMethodSignature * sig = [self methodSignatureForSelector: s];
NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
[invocation setSelector: s];
[invocation retainArguments];
[mMethodMap setValue: invocation forKey: @"getAdminPrizeList"];
}
return self;
}

- (id<IActivityAdminServiceGetAdminPrizeList>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_getAdminPrizeList_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
getAdminPrizeList_args * args = [[getAdminPrizeList_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
GetAdminPrizeList_result * result = [[GetAdminPrizeList_result alloc] init];
[result setSuccess: [mService getAdminPrizeList: [args id] currentPage: [args currentPage] pageSize: [args pageSize]]];
[outProtocol writeMessageBeginWithName: @"getAdminPrizeList"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) dealloc
{
[mService release_stub];
[mMethodMap release_stub];
[super dealloc_stub];
}

@end

@interface confirmPrizeList_args : NSObject <TBase, NSCoding> {
int32_t __id;

BOOL __id_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=id, setter=setId:) int32_t id;
#endif

- (id) init;
- (id) initWithId: (int32_t) id;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (int32_t) id;
- (void) setId: (int32_t) id;
#endif
- (BOOL) idIsSet;

@end

@implementation confirmPrizeList_args

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithId: (int32_t) id
{
self = [super init];
__id = id;
__id_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"id"])
{
__id = [decoder decodeInt32ForKey: @"id"];
__id_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__id_isset)
{
[encoder encodeInt32: __id forKey: @"id"];
}
}

- (void) dealloc
{
[super dealloc_stub];
}

- (int32_t) id {
return __id;
}

- (void) setId: (int32_t) id {
__id = id;
__id_isset = YES;
}

- (BOOL) idIsSet {
return __id_isset;
}

- (void) unsetId {
__id_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 1:
if (fieldType == TType_I32) {
int32_t fieldValue = [inProtocol readI32];
[self setId: fieldValue];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"confirmPrizeList_args"];
if (__id_isset) {
[outProtocol writeFieldBeginWithName: @"id" type: TType_I32 fieldID: 1];
[outProtocol writeI32: __id];
[outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"confirmPrizeList_args("];
[ms appendString: @"id:"];
[ms appendFormat: @"%i", __id];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@interface ConfirmPrizeList_result : NSObject <TBase, NSCoding> {
BOOL __success;

BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) init;
- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BOOL) success;
- (void) setSuccess: (BOOL) success;
#endif
- (BOOL) successIsSet;

@end

@implementation ConfirmPrizeList_result

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithSuccess: (BOOL) success
{
self = [super init];
__success = success;
__success_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"success"])
{
__success = [decoder decodeBoolForKey: @"success"];
__success_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__success_isset)
{
[encoder encodeBool: __success forKey: @"success"];
}
}

- (void) dealloc
{
[super dealloc_stub];
}

- (BOOL) success {
return __success;
}

- (void) setSuccess: (BOOL) success {
__success = success;
__success_isset = YES;
}

- (BOOL) successIsSet {
return __success_isset;
}

- (void) unsetSuccess {
__success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 0:
if (fieldType == TType_BOOL) {
BOOL fieldValue = [inProtocol readBool];
[self setSuccess: fieldValue];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"ConfirmPrizeList_result"];

if (__success_isset) {
[outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
[outProtocol writeBool: __success];
[outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"ConfirmPrizeList_result("];
[ms appendString: @"success:"];
[ms appendFormat: @"%i", __success];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@implementation IActivityAdminServiceConfirmPrizeListClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
self = [super init];
inProtocol = [anInProtocol retain_stub];
outProtocol = [anOutProtocol retain_stub];
return self;
}

- (void) dealloc
{
[inProtocol release_stub];
[outProtocol release_stub];
[super dealloc_stub];
}

- (void) send_confirmPrizeList: (int32_t) id
{
[outProtocol writeMessageBeginWithName: @"confirmPrizeList" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"confirmPrizeList_args"];
[outProtocol writeFieldBeginWithName: @"id" type: TType_I32 fieldID: 1];
[outProtocol writeI32: id];
[outProtocol writeFieldEnd];
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
}

- (BOOL) recv_confirmPrizeList
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
ConfirmPrizeList_result * result = [[[ConfirmPrizeList_result alloc] init] autorelease_stub];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"confirmPrizeList failed: unknown result"];
}

- (BOOL) confirmPrizeList: (int32_t) id
{
[self send_confirmPrizeList : id];
return [self recv_confirmPrizeList];
}

@end

@implementation IActivityAdminServiceConfirmPrizeListProcessor

- (id) initWithIActivityAdminServiceConfirmPrizeList: (id <IActivityAdminServiceConfirmPrizeList>) service
{
self = [super init];
if (!self) {
  return nil;
}
mService = [service retain_stub];
mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
{
SEL s = @selector(process_confirmPrizeList_withSequenceID:inProtocol:outProtocol:);
NSMethodSignature * sig = [self methodSignatureForSelector: s];
NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
[invocation setSelector: s];
[invocation retainArguments];
[mMethodMap setValue: invocation forKey: @"confirmPrizeList"];
}
return self;
}

- (id<IActivityAdminServiceConfirmPrizeList>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_confirmPrizeList_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
confirmPrizeList_args * args = [[confirmPrizeList_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
ConfirmPrizeList_result * result = [[ConfirmPrizeList_result alloc] init];
[result setSuccess: [mService confirmPrizeList: [args id]]];
[outProtocol writeMessageBeginWithName: @"confirmPrizeList"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) dealloc
{
[mService release_stub];
[mMethodMap release_stub];
[super dealloc_stub];
}

@end

