/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TObjective-C.h"
#import "TBase.h"


#import "ActivityService.h"


@implementation ActivityServiceConstants
+ (void) initialize {
}
@end

@interface getActivityList_args : NSObject <TBase, NSCoding> {
  int32_t __communityId;
  int32_t __currentPage;
  int32_t __pageSize;

  BOOL __communityId_isset;
  BOOL __currentPage_isset;
  BOOL __pageSize_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=communityId, setter=setCommunityId:) int32_t communityId;
@property (nonatomic, getter=currentPage, setter=setCurrentPage:) int32_t currentPage;
@property (nonatomic, getter=pageSize, setter=setPageSize:) int32_t pageSize;
#endif

- (id) init;
- (id) initWithCommunityId: (int32_t) communityId currentPage: (int32_t) currentPage pageSize: (int32_t) pageSize;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (int32_t) communityId;
- (void) setCommunityId: (int32_t) communityId;
#endif
- (BOOL) communityIdIsSet;

#if !__has_feature(objc_arc)
- (int32_t) currentPage;
- (void) setCurrentPage: (int32_t) currentPage;
#endif
- (BOOL) currentPageIsSet;

#if !__has_feature(objc_arc)
- (int32_t) pageSize;
- (void) setPageSize: (int32_t) pageSize;
#endif
- (BOOL) pageSizeIsSet;

@end

@implementation getActivityList_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithCommunityId: (int32_t) communityId currentPage: (int32_t) currentPage pageSize: (int32_t) pageSize
{
  self = [super init];
  __communityId = communityId;
  __communityId_isset = YES;
  __currentPage = currentPage;
  __currentPage_isset = YES;
  __pageSize = pageSize;
  __pageSize_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"communityId"])
  {
    __communityId = [decoder decodeInt32ForKey: @"communityId"];
    __communityId_isset = YES;
  }
  if ([decoder containsValueForKey: @"currentPage"])
  {
    __currentPage = [decoder decodeInt32ForKey: @"currentPage"];
    __currentPage_isset = YES;
  }
  if ([decoder containsValueForKey: @"pageSize"])
  {
    __pageSize = [decoder decodeInt32ForKey: @"pageSize"];
    __pageSize_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__communityId_isset)
  {
    [encoder encodeInt32: __communityId forKey: @"communityId"];
  }
  if (__currentPage_isset)
  {
    [encoder encodeInt32: __currentPage forKey: @"currentPage"];
  }
  if (__pageSize_isset)
  {
    [encoder encodeInt32: __pageSize forKey: @"pageSize"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int32_t) communityId {
  return __communityId;
}

- (void) setCommunityId: (int32_t) communityId {
  __communityId = communityId;
  __communityId_isset = YES;
}

- (BOOL) communityIdIsSet {
  return __communityId_isset;
}

- (void) unsetCommunityId {
  __communityId_isset = NO;
}

- (int32_t) currentPage {
  return __currentPage;
}

- (void) setCurrentPage: (int32_t) currentPage {
  __currentPage = currentPage;
  __currentPage_isset = YES;
}

- (BOOL) currentPageIsSet {
  return __currentPage_isset;
}

- (void) unsetCurrentPage {
  __currentPage_isset = NO;
}

- (int32_t) pageSize {
  return __pageSize;
}

- (void) setPageSize: (int32_t) pageSize {
  __pageSize = pageSize;
  __pageSize_isset = YES;
}

- (BOOL) pageSizeIsSet {
  return __pageSize_isset;
}

- (void) unsetPageSize {
  __pageSize_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setCommunityId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setCurrentPage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPageSize: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getActivityList_args"];
  if (__communityId_isset) {
    [outProtocol writeFieldBeginWithName: @"communityId" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __communityId];
    [outProtocol writeFieldEnd];
  }
  if (__currentPage_isset) {
    [outProtocol writeFieldBeginWithName: @"currentPage" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __currentPage];
    [outProtocol writeFieldEnd];
  }
  if (__pageSize_isset) {
    [outProtocol writeFieldBeginWithName: @"pageSize" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __pageSize];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getActivityList_args("];
  [ms appendString: @"communityId:"];
  [ms appendFormat: @"%i", __communityId];
  [ms appendString: @",currentPage:"];
  [ms appendFormat: @"%i", __currentPage];
  [ms appendString: @",pageSize:"];
  [ms appendFormat: @"%i", __pageSize];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetActivityList_result : NSObject <TBase, NSCoding> {
  NSMutableArray * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSMutableArray * success;
#endif

- (id) init;
- (id) initWithSuccess: (NSMutableArray *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSMutableArray *) success;
- (void) setSuccess: (NSMutableArray *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation GetActivityList_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NSMutableArray *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSMutableArray *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_LIST) {
          int _size0;
          [inProtocol readListBeginReturningElementType: NULL size: &_size0];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size0];
          int _i1;
          for (_i1 = 0; _i1 < _size0; ++_i1)
          {
            int _size3;
            [inProtocol readMapBeginReturningKeyType: NULL valueType: NULL size: &_size3];
            NSMutableDictionary * _elem2 = [[NSMutableDictionary alloc] initWithCapacity: _size3];
            int _i4;
            for (_i4 = 0; _i4 < _size3; ++_i4)
            {
              NSString * _key5 = [inProtocol readString];
              NSString * _val6 = [inProtocol readString];
              [_elem2 setObject: _val6 forKey: _key5];
            }
            [inProtocol readMapEnd];
            [fieldValue addObject: _elem2];
            [_elem2 release_stub];
          }
          [inProtocol readListEnd];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetActivityList_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_LIST fieldID: 0];
      {
        [outProtocol writeListBeginWithElementType: TType_MAP size: [__success count]];
        int idx8;
        for (idx8 = 0; idx8 < [__success count]; idx8++)
        {
          {
            [outProtocol writeMapBeginWithKeyType: TType_STRING valueType: TType_STRING size: [[__success objectAtIndex: idx8] count]];
            NSEnumerator * _iter9 = [[__success objectAtIndex: idx8] keyEnumerator];
            id key10;
            while ((key10 = [_iter9 nextObject]))
            {
              [outProtocol writeString: key10];
              [outProtocol writeString: [[__success objectAtIndex: idx8] objectForKey: key10]];
            }
            [outProtocol writeMapEnd];
          }
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetActivityList_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation IActivityServiceGetActivityListClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
  return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
  self = [super init];
  inProtocol = [anInProtocol retain_stub];
  outProtocol = [anOutProtocol retain_stub];
  return self;
}

- (void) dealloc
{
  [inProtocol release_stub];
  [outProtocol release_stub];
  [super dealloc_stub];
}

- (void) send_getActivityList: (int32_t) communityId currentPage: (int32_t) currentPage pageSize: (int32_t) pageSize
{
  [outProtocol writeMessageBeginWithName: @"getActivityList" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getActivityList_args"];
  [outProtocol writeFieldBeginWithName: @"communityId" type: TType_I32 fieldID: 1];
  [outProtocol writeI32: communityId];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"currentPage" type: TType_I32 fieldID: 2];
  [outProtocol writeI32: currentPage];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"pageSize" type: TType_I32 fieldID: 3];
  [outProtocol writeI32: pageSize];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSMutableArray *) recv_getActivityList
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GetActivityList_result * result = [[[GetActivityList_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getActivityList failed: unknown result"];
}

- (NSMutableArray *) getActivityList: (int32_t) communityId currentPage: (int32_t) currentPage pageSize: (int32_t) pageSize
{
  [self send_getActivityList : communityId currentPage: currentPage pageSize: pageSize];
  return [self recv_getActivityList];
}

@end

@implementation IActivityServiceGetActivityListProcessor

- (id) initWithIActivityServiceGetActivityList: (id <IActivityServiceGetActivityList>) service
{
  self = [super init];
  if (!self) {
    return nil;
  }
  mService = [service retain_stub];
  mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
  {
    SEL s = @selector(process_getActivityList_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getActivityList"];
  }
  return self;
}

- (id<IActivityServiceGetActivityList>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_getActivityList_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  getActivityList_args * args = [[getActivityList_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GetActivityList_result * result = [[GetActivityList_result alloc] init];
  [result setSuccess: [mService getActivityList: [args communityId] currentPage: [args currentPage] pageSize: [args pageSize]]];
  [outProtocol writeMessageBeginWithName: @"getActivityList"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) dealloc
{
  [mService release_stub];
  [mMethodMap release_stub];
  [super dealloc_stub];
}

@end

@interface getActivityById_args : NSObject <TBase, NSCoding> {
int32_t __id;

BOOL __id_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=id, setter=setId:) int32_t id;
#endif

- (id) init;
- (id) initWithId: (int32_t) id;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (int32_t) id;
- (void) setId: (int32_t) id;
#endif
- (BOOL) idIsSet;

@end

@implementation getActivityById_args

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithId: (int32_t) id
{
self = [super init];
__id = id;
__id_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"id"])
{
  __id = [decoder decodeInt32ForKey: @"id"];
  __id_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__id_isset)
{
  [encoder encodeInt32: __id forKey: @"id"];
}
}

- (void) dealloc
{
[super dealloc_stub];
}

- (int32_t) id {
return __id;
}

- (void) setId: (int32_t) id {
__id = id;
__id_isset = YES;
}

- (BOOL) idIsSet {
return __id_isset;
}

- (void) unsetId {
__id_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
  [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
  if (fieldType == TType_STOP) { 
    break;
  }
  switch (fieldID)
  {
    case 1:
      if (fieldType == TType_I32) {
        int32_t fieldValue = [inProtocol readI32];
        [self setId: fieldValue];
      } else { 
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      }
      break;
    default:
      [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      break;
  }
  [inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"getActivityById_args"];
if (__id_isset) {
  [outProtocol writeFieldBeginWithName: @"id" type: TType_I32 fieldID: 1];
  [outProtocol writeI32: __id];
  [outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"getActivityById_args("];
[ms appendString: @"id:"];
[ms appendFormat: @"%i", __id];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@interface GetActivityById_result : NSObject <TBase, NSCoding> {
NSMutableDictionary * __success;

BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSMutableDictionary * success;
#endif

- (id) init;
- (id) initWithSuccess: (NSMutableDictionary *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSMutableDictionary *) success;
- (void) setSuccess: (NSMutableDictionary *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation GetActivityById_result

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithSuccess: (NSMutableDictionary *) success
{
self = [super init];
__success = [success retain_stub];
__success_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"success"])
{
  __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
  __success_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__success_isset)
{
  [encoder encodeObject: __success forKey: @"success"];
}
}

- (void) dealloc
{
[__success release_stub];
[super dealloc_stub];
}

- (NSMutableDictionary *) success {
return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSMutableDictionary *) success {
[success retain_stub];
[__success release_stub];
__success = success;
__success_isset = YES;
}

- (BOOL) successIsSet {
return __success_isset;
}

- (void) unsetSuccess {
[__success release_stub];
__success = nil;
__success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
  [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
  if (fieldType == TType_STOP) { 
    break;
  }
  switch (fieldID)
  {
    case 0:
      if (fieldType == TType_MAP) {
        int _size11;
        [inProtocol readMapBeginReturningKeyType: NULL valueType: NULL size: &_size11];
        NSMutableDictionary * fieldValue = [[NSMutableDictionary alloc] initWithCapacity: _size11];
        int _i12;
        for (_i12 = 0; _i12 < _size11; ++_i12)
        {
          NSString * _key13 = [inProtocol readString];
          NSString * _val14 = [inProtocol readString];
          [fieldValue setObject: _val14 forKey: _key13];
        }
        [inProtocol readMapEnd];
        [self setSuccess: fieldValue];
        [fieldValue release_stub];
      } else { 
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      }
      break;
    default:
      [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      break;
  }
  [inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"GetActivityById_result"];

if (__success_isset) {
  if (__success != nil) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_MAP fieldID: 0];
    {
      [outProtocol writeMapBeginWithKeyType: TType_STRING valueType: TType_STRING size: [__success count]];
      NSEnumerator * _iter15 = [__success keyEnumerator];
      id key16;
      while ((key16 = [_iter15 nextObject]))
      {
        [outProtocol writeString: key16];
        [outProtocol writeString: [__success objectForKey: key16]];
      }
      [outProtocol writeMapEnd];
    }
    [outProtocol writeFieldEnd];
  }
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"GetActivityById_result("];
[ms appendString: @"success:"];
[ms appendFormat: @"%@", __success];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@implementation IActivityServiceGetActivityByIdClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
self = [super init];
inProtocol = [anInProtocol retain_stub];
outProtocol = [anOutProtocol retain_stub];
return self;
}

- (void) dealloc
{
[inProtocol release_stub];
[outProtocol release_stub];
[super dealloc_stub];
}

- (void) send_getActivityById: (int32_t) id
{
[outProtocol writeMessageBeginWithName: @"getActivityById" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"getActivityById_args"];
[outProtocol writeFieldBeginWithName: @"id" type: TType_I32 fieldID: 1];
[outProtocol writeI32: id];
[outProtocol writeFieldEnd];
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
}

- (NSMutableDictionary *) recv_getActivityById
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
GetActivityById_result * result = [[[GetActivityById_result alloc] init] autorelease_stub];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"getActivityById failed: unknown result"];
}

- (NSMutableDictionary *) getActivityById: (int32_t) id
{
[self send_getActivityById : id];
return [self recv_getActivityById];
}

@end

@implementation IActivityServiceGetActivityByIdProcessor

- (id) initWithIActivityServiceGetActivityById: (id <IActivityServiceGetActivityById>) service
{
self = [super init];
if (!self) {
  return nil;
}
mService = [service retain_stub];
mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
{
  SEL s = @selector(process_getActivityById_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"getActivityById"];
}
return self;
}

- (id<IActivityServiceGetActivityById>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_getActivityById_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
getActivityById_args * args = [[getActivityById_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
GetActivityById_result * result = [[GetActivityById_result alloc] init];
[result setSuccess: [mService getActivityById: [args id]]];
[outProtocol writeMessageBeginWithName: @"getActivityById"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) dealloc
{
[mService release_stub];
[mMethodMap release_stub];
[super dealloc_stub];
}

@end

@interface getPostListByActivityId_args : NSObject <TBase, NSCoding> {
int32_t __id;
int32_t __currentPage;
int32_t __pageSize;

BOOL __id_isset;
BOOL __currentPage_isset;
BOOL __pageSize_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=id, setter=setId:) int32_t id;
@property (nonatomic, getter=currentPage, setter=setCurrentPage:) int32_t currentPage;
@property (nonatomic, getter=pageSize, setter=setPageSize:) int32_t pageSize;
#endif

- (id) init;
- (id) initWithId: (int32_t) id currentPage: (int32_t) currentPage pageSize: (int32_t) pageSize;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (int32_t) id;
- (void) setId: (int32_t) id;
#endif
- (BOOL) idIsSet;

#if !__has_feature(objc_arc)
- (int32_t) currentPage;
- (void) setCurrentPage: (int32_t) currentPage;
#endif
- (BOOL) currentPageIsSet;

#if !__has_feature(objc_arc)
- (int32_t) pageSize;
- (void) setPageSize: (int32_t) pageSize;
#endif
- (BOOL) pageSizeIsSet;

@end

@implementation getPostListByActivityId_args

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithId: (int32_t) id currentPage: (int32_t) currentPage pageSize: (int32_t) pageSize
{
self = [super init];
__id = id;
__id_isset = YES;
__currentPage = currentPage;
__currentPage_isset = YES;
__pageSize = pageSize;
__pageSize_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"id"])
{
__id = [decoder decodeInt32ForKey: @"id"];
__id_isset = YES;
}
if ([decoder containsValueForKey: @"currentPage"])
{
__currentPage = [decoder decodeInt32ForKey: @"currentPage"];
__currentPage_isset = YES;
}
if ([decoder containsValueForKey: @"pageSize"])
{
__pageSize = [decoder decodeInt32ForKey: @"pageSize"];
__pageSize_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__id_isset)
{
[encoder encodeInt32: __id forKey: @"id"];
}
if (__currentPage_isset)
{
[encoder encodeInt32: __currentPage forKey: @"currentPage"];
}
if (__pageSize_isset)
{
[encoder encodeInt32: __pageSize forKey: @"pageSize"];
}
}

- (void) dealloc
{
[super dealloc_stub];
}

- (int32_t) id {
return __id;
}

- (void) setId: (int32_t) id {
__id = id;
__id_isset = YES;
}

- (BOOL) idIsSet {
return __id_isset;
}

- (void) unsetId {
__id_isset = NO;
}

- (int32_t) currentPage {
return __currentPage;
}

- (void) setCurrentPage: (int32_t) currentPage {
__currentPage = currentPage;
__currentPage_isset = YES;
}

- (BOOL) currentPageIsSet {
return __currentPage_isset;
}

- (void) unsetCurrentPage {
__currentPage_isset = NO;
}

- (int32_t) pageSize {
return __pageSize;
}

- (void) setPageSize: (int32_t) pageSize {
__pageSize = pageSize;
__pageSize_isset = YES;
}

- (BOOL) pageSizeIsSet {
return __pageSize_isset;
}

- (void) unsetPageSize {
__pageSize_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
  break;
}
switch (fieldID)
{
  case 1:
    if (fieldType == TType_I32) {
      int32_t fieldValue = [inProtocol readI32];
      [self setId: fieldValue];
    } else { 
      [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
    }
    break;
  case 2:
    if (fieldType == TType_I32) {
      int32_t fieldValue = [inProtocol readI32];
      [self setCurrentPage: fieldValue];
    } else { 
      [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
    }
    break;
  case 3:
    if (fieldType == TType_I32) {
      int32_t fieldValue = [inProtocol readI32];
      [self setPageSize: fieldValue];
    } else { 
      [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
    }
    break;
  default:
    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
    break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"getPostListByActivityId_args"];
if (__id_isset) {
[outProtocol writeFieldBeginWithName: @"id" type: TType_I32 fieldID: 1];
[outProtocol writeI32: __id];
[outProtocol writeFieldEnd];
}
if (__currentPage_isset) {
[outProtocol writeFieldBeginWithName: @"currentPage" type: TType_I32 fieldID: 2];
[outProtocol writeI32: __currentPage];
[outProtocol writeFieldEnd];
}
if (__pageSize_isset) {
[outProtocol writeFieldBeginWithName: @"pageSize" type: TType_I32 fieldID: 3];
[outProtocol writeI32: __pageSize];
[outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"getPostListByActivityId_args("];
[ms appendString: @"id:"];
[ms appendFormat: @"%i", __id];
[ms appendString: @",currentPage:"];
[ms appendFormat: @"%i", __currentPage];
[ms appendString: @",pageSize:"];
[ms appendFormat: @"%i", __pageSize];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@interface GetPostListByActivityId_result : NSObject <TBase, NSCoding> {
NSMutableArray * __success;

BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSMutableArray * success;
#endif

- (id) init;
- (id) initWithSuccess: (NSMutableArray *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSMutableArray *) success;
- (void) setSuccess: (NSMutableArray *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation GetPostListByActivityId_result

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithSuccess: (NSMutableArray *) success
{
self = [super init];
__success = [success retain_stub];
__success_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"success"])
{
__success = [[decoder decodeObjectForKey: @"success"] retain_stub];
__success_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__success_isset)
{
[encoder encodeObject: __success forKey: @"success"];
}
}

- (void) dealloc
{
[__success release_stub];
[super dealloc_stub];
}

- (NSMutableArray *) success {
return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSMutableArray *) success {
[success retain_stub];
[__success release_stub];
__success = success;
__success_isset = YES;
}

- (BOOL) successIsSet {
return __success_isset;
}

- (void) unsetSuccess {
[__success release_stub];
__success = nil;
__success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
  break;
}
switch (fieldID)
{
  case 0:
    if (fieldType == TType_LIST) {
      int _size17;
      [inProtocol readListBeginReturningElementType: NULL size: &_size17];
      NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size17];
      int _i18;
      for (_i18 = 0; _i18 < _size17; ++_i18)
      {
        int _size20;
        [inProtocol readMapBeginReturningKeyType: NULL valueType: NULL size: &_size20];
        NSMutableDictionary * _elem19 = [[NSMutableDictionary alloc] initWithCapacity: _size20];
        int _i21;
        for (_i21 = 0; _i21 < _size20; ++_i21)
        {
          NSString * _key22 = [inProtocol readString];
          NSString * _val23 = [inProtocol readString];
          [_elem19 setObject: _val23 forKey: _key22];
        }
        [inProtocol readMapEnd];
        [fieldValue addObject: _elem19];
        [_elem19 release_stub];
      }
      [inProtocol readListEnd];
      [self setSuccess: fieldValue];
      [fieldValue release_stub];
    } else { 
      [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
    }
    break;
  default:
    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
    break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"GetPostListByActivityId_result"];

if (__success_isset) {
if (__success != nil) {
  [outProtocol writeFieldBeginWithName: @"success" type: TType_LIST fieldID: 0];
  {
    [outProtocol writeListBeginWithElementType: TType_MAP size: [__success count]];
    int idx25;
    for (idx25 = 0; idx25 < [__success count]; idx25++)
    {
      {
        [outProtocol writeMapBeginWithKeyType: TType_STRING valueType: TType_STRING size: [[__success objectAtIndex: idx25] count]];
        NSEnumerator * _iter26 = [[__success objectAtIndex: idx25] keyEnumerator];
        id key27;
        while ((key27 = [_iter26 nextObject]))
        {
          [outProtocol writeString: key27];
          [outProtocol writeString: [[__success objectAtIndex: idx25] objectForKey: key27]];
        }
        [outProtocol writeMapEnd];
      }
    }
    [outProtocol writeListEnd];
  }
  [outProtocol writeFieldEnd];
}
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"GetPostListByActivityId_result("];
[ms appendString: @"success:"];
[ms appendFormat: @"%@", __success];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@implementation IActivityServiceGetPostListByActivityIdClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
self = [super init];
inProtocol = [anInProtocol retain_stub];
outProtocol = [anOutProtocol retain_stub];
return self;
}

- (void) dealloc
{
[inProtocol release_stub];
[outProtocol release_stub];
[super dealloc_stub];
}

- (void) send_getPostListByActivityId: (int32_t) id currentPage: (int32_t) currentPage pageSize: (int32_t) pageSize
{
[outProtocol writeMessageBeginWithName: @"getPostListByActivityId" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"getPostListByActivityId_args"];
[outProtocol writeFieldBeginWithName: @"id" type: TType_I32 fieldID: 1];
[outProtocol writeI32: id];
[outProtocol writeFieldEnd];
[outProtocol writeFieldBeginWithName: @"currentPage" type: TType_I32 fieldID: 2];
[outProtocol writeI32: currentPage];
[outProtocol writeFieldEnd];
[outProtocol writeFieldBeginWithName: @"pageSize" type: TType_I32 fieldID: 3];
[outProtocol writeI32: pageSize];
[outProtocol writeFieldEnd];
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
}

- (NSMutableArray *) recv_getPostListByActivityId
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
GetPostListByActivityId_result * result = [[[GetPostListByActivityId_result alloc] init] autorelease_stub];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"getPostListByActivityId failed: unknown result"];
}

- (NSMutableArray *) getPostListByActivityId: (int32_t) id currentPage: (int32_t) currentPage pageSize: (int32_t) pageSize
{
[self send_getPostListByActivityId : id currentPage: currentPage pageSize: pageSize];
return [self recv_getPostListByActivityId];
}

@end

@implementation IActivityServiceGetPostListByActivityIdProcessor

- (id) initWithIActivityServiceGetPostListByActivityId: (id <IActivityServiceGetPostListByActivityId>) service
{
self = [super init];
if (!self) {
  return nil;
}
mService = [service retain_stub];
mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
{
SEL s = @selector(process_getPostListByActivityId_withSequenceID:inProtocol:outProtocol:);
NSMethodSignature * sig = [self methodSignatureForSelector: s];
NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
[invocation setSelector: s];
[invocation retainArguments];
[mMethodMap setValue: invocation forKey: @"getPostListByActivityId"];
}
return self;
}

- (id<IActivityServiceGetPostListByActivityId>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_getPostListByActivityId_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
getPostListByActivityId_args * args = [[getPostListByActivityId_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
GetPostListByActivityId_result * result = [[GetPostListByActivityId_result alloc] init];
[result setSuccess: [mService getPostListByActivityId: [args id] currentPage: [args currentPage] pageSize: [args pageSize]]];
[outProtocol writeMessageBeginWithName: @"getPostListByActivityId"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) dealloc
{
[mService release_stub];
[mMethodMap release_stub];
[super dealloc_stub];
}

@end

