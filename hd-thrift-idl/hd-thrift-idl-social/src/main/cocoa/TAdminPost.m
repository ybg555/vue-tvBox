/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TObjective-C.h"
#import "TBase.h"


#import "TAdminPost.h"

@implementation TAdminPost

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithId: (int32_t) id userId: (int64_t) userId nickName: (NSString *) nickName avatarUrl: (NSString *) avatarUrl isAdmin: (int32_t) isAdmin activityStartTime: (int64_t) activityStartTime status: (int32_t) status labelId: (int32_t) labelId labelName: (NSString *) labelName browse: (int32_t) browse imageUrl: (NSString *) imageUrl content: (NSString *) content mark: (NSString *) mark praiseCount: (int32_t) praiseCount commentCount: (int32_t) commentCount createTime: (int64_t) createTime labelType: (int32_t) labelType mobile: (NSString *) mobile cityCommunities: (NSMutableArray *) cityCommunities applyCount: (int32_t) applyCount inform: (int32_t) inform isDelete: (int32_t) isDelete informStatus: (int32_t) informStatus notify: (int32_t) notify isConform: (int32_t) isConform
{
  self = [super init];
  __id = id;
  __id_isset = YES;
  __userId = userId;
  __userId_isset = YES;
  __nickName = [nickName retain_stub];
  __nickName_isset = YES;
  __avatarUrl = [avatarUrl retain_stub];
  __avatarUrl_isset = YES;
  __isAdmin = isAdmin;
  __isAdmin_isset = YES;
  __activityStartTime = activityStartTime;
  __activityStartTime_isset = YES;
  __status = status;
  __status_isset = YES;
  __labelId = labelId;
  __labelId_isset = YES;
  __labelName = [labelName retain_stub];
  __labelName_isset = YES;
  __browse = browse;
  __browse_isset = YES;
  __imageUrl = [imageUrl retain_stub];
  __imageUrl_isset = YES;
  __content = [content retain_stub];
  __content_isset = YES;
  __mark = [mark retain_stub];
  __mark_isset = YES;
  __praiseCount = praiseCount;
  __praiseCount_isset = YES;
  __commentCount = commentCount;
  __commentCount_isset = YES;
  __createTime = createTime;
  __createTime_isset = YES;
  __labelType = labelType;
  __labelType_isset = YES;
  __mobile = [mobile retain_stub];
  __mobile_isset = YES;
  __cityCommunities = [cityCommunities retain_stub];
  __cityCommunities_isset = YES;
  __applyCount = applyCount;
  __applyCount_isset = YES;
  __inform = inform;
  __inform_isset = YES;
  __isDelete = isDelete;
  __isDelete_isset = YES;
  __informStatus = informStatus;
  __informStatus_isset = YES;
  __notify = notify;
  __notify_isset = YES;
  __isConform = isConform;
  __isConform_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [decoder decodeInt32ForKey: @"id"];
    __id_isset = YES;
  }
  if ([decoder containsValueForKey: @"userId"])
  {
    __userId = [decoder decodeInt64ForKey: @"userId"];
    __userId_isset = YES;
  }
  if ([decoder containsValueForKey: @"nickName"])
  {
    __nickName = [[decoder decodeObjectForKey: @"nickName"] retain_stub];
    __nickName_isset = YES;
  }
  if ([decoder containsValueForKey: @"avatarUrl"])
  {
    __avatarUrl = [[decoder decodeObjectForKey: @"avatarUrl"] retain_stub];
    __avatarUrl_isset = YES;
  }
  if ([decoder containsValueForKey: @"isAdmin"])
  {
    __isAdmin = [decoder decodeInt32ForKey: @"isAdmin"];
    __isAdmin_isset = YES;
  }
  if ([decoder containsValueForKey: @"activityStartTime"])
  {
    __activityStartTime = [decoder decodeInt64ForKey: @"activityStartTime"];
    __activityStartTime_isset = YES;
  }
  if ([decoder containsValueForKey: @"status"])
  {
    __status = [decoder decodeInt32ForKey: @"status"];
    __status_isset = YES;
  }
  if ([decoder containsValueForKey: @"labelId"])
  {
    __labelId = [decoder decodeInt32ForKey: @"labelId"];
    __labelId_isset = YES;
  }
  if ([decoder containsValueForKey: @"labelName"])
  {
    __labelName = [[decoder decodeObjectForKey: @"labelName"] retain_stub];
    __labelName_isset = YES;
  }
  if ([decoder containsValueForKey: @"browse"])
  {
    __browse = [decoder decodeInt32ForKey: @"browse"];
    __browse_isset = YES;
  }
  if ([decoder containsValueForKey: @"imageUrl"])
  {
    __imageUrl = [[decoder decodeObjectForKey: @"imageUrl"] retain_stub];
    __imageUrl_isset = YES;
  }
  if ([decoder containsValueForKey: @"content"])
  {
    __content = [[decoder decodeObjectForKey: @"content"] retain_stub];
    __content_isset = YES;
  }
  if ([decoder containsValueForKey: @"mark"])
  {
    __mark = [[decoder decodeObjectForKey: @"mark"] retain_stub];
    __mark_isset = YES;
  }
  if ([decoder containsValueForKey: @"praiseCount"])
  {
    __praiseCount = [decoder decodeInt32ForKey: @"praiseCount"];
    __praiseCount_isset = YES;
  }
  if ([decoder containsValueForKey: @"commentCount"])
  {
    __commentCount = [decoder decodeInt32ForKey: @"commentCount"];
    __commentCount_isset = YES;
  }
  if ([decoder containsValueForKey: @"createTime"])
  {
    __createTime = [decoder decodeInt64ForKey: @"createTime"];
    __createTime_isset = YES;
  }
  if ([decoder containsValueForKey: @"labelType"])
  {
    __labelType = [decoder decodeInt32ForKey: @"labelType"];
    __labelType_isset = YES;
  }
  if ([decoder containsValueForKey: @"mobile"])
  {
    __mobile = [[decoder decodeObjectForKey: @"mobile"] retain_stub];
    __mobile_isset = YES;
  }
  if ([decoder containsValueForKey: @"cityCommunities"])
  {
    __cityCommunities = [[decoder decodeObjectForKey: @"cityCommunities"] retain_stub];
    __cityCommunities_isset = YES;
  }
  if ([decoder containsValueForKey: @"applyCount"])
  {
    __applyCount = [decoder decodeInt32ForKey: @"applyCount"];
    __applyCount_isset = YES;
  }
  if ([decoder containsValueForKey: @"inform"])
  {
    __inform = [decoder decodeInt32ForKey: @"inform"];
    __inform_isset = YES;
  }
  if ([decoder containsValueForKey: @"isDelete"])
  {
    __isDelete = [decoder decodeInt32ForKey: @"isDelete"];
    __isDelete_isset = YES;
  }
  if ([decoder containsValueForKey: @"informStatus"])
  {
    __informStatus = [decoder decodeInt32ForKey: @"informStatus"];
    __informStatus_isset = YES;
  }
  if ([decoder containsValueForKey: @"notify"])
  {
    __notify = [decoder decodeInt32ForKey: @"notify"];
    __notify_isset = YES;
  }
  if ([decoder containsValueForKey: @"isConform"])
  {
    __isConform = [decoder decodeInt32ForKey: @"isConform"];
    __isConform_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__id_isset)
  {
    [encoder encodeInt32: __id forKey: @"id"];
  }
  if (__userId_isset)
  {
    [encoder encodeInt64: __userId forKey: @"userId"];
  }
  if (__nickName_isset)
  {
    [encoder encodeObject: __nickName forKey: @"nickName"];
  }
  if (__avatarUrl_isset)
  {
    [encoder encodeObject: __avatarUrl forKey: @"avatarUrl"];
  }
  if (__isAdmin_isset)
  {
    [encoder encodeInt32: __isAdmin forKey: @"isAdmin"];
  }
  if (__activityStartTime_isset)
  {
    [encoder encodeInt64: __activityStartTime forKey: @"activityStartTime"];
  }
  if (__status_isset)
  {
    [encoder encodeInt32: __status forKey: @"status"];
  }
  if (__labelId_isset)
  {
    [encoder encodeInt32: __labelId forKey: @"labelId"];
  }
  if (__labelName_isset)
  {
    [encoder encodeObject: __labelName forKey: @"labelName"];
  }
  if (__browse_isset)
  {
    [encoder encodeInt32: __browse forKey: @"browse"];
  }
  if (__imageUrl_isset)
  {
    [encoder encodeObject: __imageUrl forKey: @"imageUrl"];
  }
  if (__content_isset)
  {
    [encoder encodeObject: __content forKey: @"content"];
  }
  if (__mark_isset)
  {
    [encoder encodeObject: __mark forKey: @"mark"];
  }
  if (__praiseCount_isset)
  {
    [encoder encodeInt32: __praiseCount forKey: @"praiseCount"];
  }
  if (__commentCount_isset)
  {
    [encoder encodeInt32: __commentCount forKey: @"commentCount"];
  }
  if (__createTime_isset)
  {
    [encoder encodeInt64: __createTime forKey: @"createTime"];
  }
  if (__labelType_isset)
  {
    [encoder encodeInt32: __labelType forKey: @"labelType"];
  }
  if (__mobile_isset)
  {
    [encoder encodeObject: __mobile forKey: @"mobile"];
  }
  if (__cityCommunities_isset)
  {
    [encoder encodeObject: __cityCommunities forKey: @"cityCommunities"];
  }
  if (__applyCount_isset)
  {
    [encoder encodeInt32: __applyCount forKey: @"applyCount"];
  }
  if (__inform_isset)
  {
    [encoder encodeInt32: __inform forKey: @"inform"];
  }
  if (__isDelete_isset)
  {
    [encoder encodeInt32: __isDelete forKey: @"isDelete"];
  }
  if (__informStatus_isset)
  {
    [encoder encodeInt32: __informStatus forKey: @"informStatus"];
  }
  if (__notify_isset)
  {
    [encoder encodeInt32: __notify forKey: @"notify"];
  }
  if (__isConform_isset)
  {
    [encoder encodeInt32: __isConform forKey: @"isConform"];
  }
}

- (void) dealloc
{
  [__nickName release_stub];
  [__avatarUrl release_stub];
  [__labelName release_stub];
  [__imageUrl release_stub];
  [__content release_stub];
  [__mark release_stub];
  [__mobile release_stub];
  [__cityCommunities release_stub];
  [super dealloc_stub];
}

- (int32_t) id {
  return __id;
}

- (void) setId: (int32_t) id {
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  __id_isset = NO;
}

- (int64_t) userId {
  return __userId;
}

- (void) setUserId: (int64_t) userId {
  __userId = userId;
  __userId_isset = YES;
}

- (BOOL) userIdIsSet {
  return __userId_isset;
}

- (void) unsetUserId {
  __userId_isset = NO;
}

- (NSString *) nickName {
  return [[__nickName retain_stub] autorelease_stub];
}

- (void) setNickName: (NSString *) nickName {
  [nickName retain_stub];
  [__nickName release_stub];
  __nickName = nickName;
  __nickName_isset = YES;
}

- (BOOL) nickNameIsSet {
  return __nickName_isset;
}

- (void) unsetNickName {
  [__nickName release_stub];
  __nickName = nil;
  __nickName_isset = NO;
}

- (NSString *) avatarUrl {
  return [[__avatarUrl retain_stub] autorelease_stub];
}

- (void) setAvatarUrl: (NSString *) avatarUrl {
  [avatarUrl retain_stub];
  [__avatarUrl release_stub];
  __avatarUrl = avatarUrl;
  __avatarUrl_isset = YES;
}

- (BOOL) avatarUrlIsSet {
  return __avatarUrl_isset;
}

- (void) unsetAvatarUrl {
  [__avatarUrl release_stub];
  __avatarUrl = nil;
  __avatarUrl_isset = NO;
}

- (int32_t) isAdmin {
  return __isAdmin;
}

- (void) setIsAdmin: (int32_t) isAdmin {
  __isAdmin = isAdmin;
  __isAdmin_isset = YES;
}

- (BOOL) isAdminIsSet {
  return __isAdmin_isset;
}

- (void) unsetIsAdmin {
  __isAdmin_isset = NO;
}

- (int64_t) activityStartTime {
  return __activityStartTime;
}

- (void) setActivityStartTime: (int64_t) activityStartTime {
  __activityStartTime = activityStartTime;
  __activityStartTime_isset = YES;
}

- (BOOL) activityStartTimeIsSet {
  return __activityStartTime_isset;
}

- (void) unsetActivityStartTime {
  __activityStartTime_isset = NO;
}

- (int32_t) status {
  return __status;
}

- (void) setStatus: (int32_t) status {
  __status = status;
  __status_isset = YES;
}

- (BOOL) statusIsSet {
  return __status_isset;
}

- (void) unsetStatus {
  __status_isset = NO;
}

- (int32_t) labelId {
  return __labelId;
}

- (void) setLabelId: (int32_t) labelId {
  __labelId = labelId;
  __labelId_isset = YES;
}

- (BOOL) labelIdIsSet {
  return __labelId_isset;
}

- (void) unsetLabelId {
  __labelId_isset = NO;
}

- (NSString *) labelName {
  return [[__labelName retain_stub] autorelease_stub];
}

- (void) setLabelName: (NSString *) labelName {
  [labelName retain_stub];
  [__labelName release_stub];
  __labelName = labelName;
  __labelName_isset = YES;
}

- (BOOL) labelNameIsSet {
  return __labelName_isset;
}

- (void) unsetLabelName {
  [__labelName release_stub];
  __labelName = nil;
  __labelName_isset = NO;
}

- (int32_t) browse {
  return __browse;
}

- (void) setBrowse: (int32_t) browse {
  __browse = browse;
  __browse_isset = YES;
}

- (BOOL) browseIsSet {
  return __browse_isset;
}

- (void) unsetBrowse {
  __browse_isset = NO;
}

- (NSString *) imageUrl {
  return [[__imageUrl retain_stub] autorelease_stub];
}

- (void) setImageUrl: (NSString *) imageUrl {
  [imageUrl retain_stub];
  [__imageUrl release_stub];
  __imageUrl = imageUrl;
  __imageUrl_isset = YES;
}

- (BOOL) imageUrlIsSet {
  return __imageUrl_isset;
}

- (void) unsetImageUrl {
  [__imageUrl release_stub];
  __imageUrl = nil;
  __imageUrl_isset = NO;
}

- (NSString *) content {
  return [[__content retain_stub] autorelease_stub];
}

- (void) setContent: (NSString *) content {
  [content retain_stub];
  [__content release_stub];
  __content = content;
  __content_isset = YES;
}

- (BOOL) contentIsSet {
  return __content_isset;
}

- (void) unsetContent {
  [__content release_stub];
  __content = nil;
  __content_isset = NO;
}

- (NSString *) mark {
  return [[__mark retain_stub] autorelease_stub];
}

- (void) setMark: (NSString *) mark {
  [mark retain_stub];
  [__mark release_stub];
  __mark = mark;
  __mark_isset = YES;
}

- (BOOL) markIsSet {
  return __mark_isset;
}

- (void) unsetMark {
  [__mark release_stub];
  __mark = nil;
  __mark_isset = NO;
}

- (int32_t) praiseCount {
  return __praiseCount;
}

- (void) setPraiseCount: (int32_t) praiseCount {
  __praiseCount = praiseCount;
  __praiseCount_isset = YES;
}

- (BOOL) praiseCountIsSet {
  return __praiseCount_isset;
}

- (void) unsetPraiseCount {
  __praiseCount_isset = NO;
}

- (int32_t) commentCount {
  return __commentCount;
}

- (void) setCommentCount: (int32_t) commentCount {
  __commentCount = commentCount;
  __commentCount_isset = YES;
}

- (BOOL) commentCountIsSet {
  return __commentCount_isset;
}

- (void) unsetCommentCount {
  __commentCount_isset = NO;
}

- (int64_t) createTime {
  return __createTime;
}

- (void) setCreateTime: (int64_t) createTime {
  __createTime = createTime;
  __createTime_isset = YES;
}

- (BOOL) createTimeIsSet {
  return __createTime_isset;
}

- (void) unsetCreateTime {
  __createTime_isset = NO;
}

- (int32_t) labelType {
  return __labelType;
}

- (void) setLabelType: (int32_t) labelType {
  __labelType = labelType;
  __labelType_isset = YES;
}

- (BOOL) labelTypeIsSet {
  return __labelType_isset;
}

- (void) unsetLabelType {
  __labelType_isset = NO;
}

- (NSString *) mobile {
  return [[__mobile retain_stub] autorelease_stub];
}

- (void) setMobile: (NSString *) mobile {
  [mobile retain_stub];
  [__mobile release_stub];
  __mobile = mobile;
  __mobile_isset = YES;
}

- (BOOL) mobileIsSet {
  return __mobile_isset;
}

- (void) unsetMobile {
  [__mobile release_stub];
  __mobile = nil;
  __mobile_isset = NO;
}

- (NSMutableArray *) cityCommunities {
  return [[__cityCommunities retain_stub] autorelease_stub];
}

- (void) setCityCommunities: (NSMutableArray *) cityCommunities {
  [cityCommunities retain_stub];
  [__cityCommunities release_stub];
  __cityCommunities = cityCommunities;
  __cityCommunities_isset = YES;
}

- (BOOL) cityCommunitiesIsSet {
  return __cityCommunities_isset;
}

- (void) unsetCityCommunities {
  [__cityCommunities release_stub];
  __cityCommunities = nil;
  __cityCommunities_isset = NO;
}

- (int32_t) applyCount {
  return __applyCount;
}

- (void) setApplyCount: (int32_t) applyCount {
  __applyCount = applyCount;
  __applyCount_isset = YES;
}

- (BOOL) applyCountIsSet {
  return __applyCount_isset;
}

- (void) unsetApplyCount {
  __applyCount_isset = NO;
}

- (int32_t) inform {
  return __inform;
}

- (void) setInform: (int32_t) inform {
  __inform = inform;
  __inform_isset = YES;
}

- (BOOL) informIsSet {
  return __inform_isset;
}

- (void) unsetInform {
  __inform_isset = NO;
}

- (int32_t) isDelete {
  return __isDelete;
}

- (void) setIsDelete: (int32_t) isDelete {
  __isDelete = isDelete;
  __isDelete_isset = YES;
}

- (BOOL) isDeleteIsSet {
  return __isDelete_isset;
}

- (void) unsetIsDelete {
  __isDelete_isset = NO;
}

- (int32_t) informStatus {
  return __informStatus;
}

- (void) setInformStatus: (int32_t) informStatus {
  __informStatus = informStatus;
  __informStatus_isset = YES;
}

- (BOOL) informStatusIsSet {
  return __informStatus_isset;
}

- (void) unsetInformStatus {
  __informStatus_isset = NO;
}

- (int32_t) notify {
  return __notify;
}

- (void) setNotify: (int32_t) notify {
  __notify = notify;
  __notify_isset = YES;
}

- (BOOL) notifyIsSet {
  return __notify_isset;
}

- (void) unsetNotify {
  __notify_isset = NO;
}

- (int32_t) isConform {
  return __isConform;
}

- (void) setIsConform: (int32_t) isConform {
  __isConform = isConform;
  __isConform_isset = YES;
}

- (BOOL) isConformIsSet {
  return __isConform_isset;
}

- (void) unsetIsConform {
  __isConform_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setUserId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setNickName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAvatarUrl: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setIsAdmin: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setActivityStartTime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setStatus: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setLabelId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLabelName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setBrowse: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setImageUrl: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setContent: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 13:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMark: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 14:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setPraiseCount: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 15:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setCommentCount: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 16:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setCreateTime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 17:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setLabelType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 18:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMobile: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 19:
        if (fieldType == TType_LIST) {
          int _size0;
          [inProtocol readListBeginReturningElementType: NULL size: &_size0];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size0];
          int _i1;
          for (_i1 = 0; _i1 < _size0; ++_i1)
          {
            NSString * _elem2 = [inProtocol readString];
            [fieldValue addObject: _elem2];
          }
          [inProtocol readListEnd];
          [self setCityCommunities: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 20:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setApplyCount: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 21:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setInform: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 22:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setIsDelete: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 23:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setInformStatus: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 24:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setNotify: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 25:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setIsConform: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"TAdminPost"];
  if (__id_isset) {
    [outProtocol writeFieldBeginWithName: @"id" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __id];
    [outProtocol writeFieldEnd];
  }
  if (__userId_isset) {
    [outProtocol writeFieldBeginWithName: @"userId" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __userId];
    [outProtocol writeFieldEnd];
  }
  if (__nickName_isset) {
    if (__nickName != nil) {
      [outProtocol writeFieldBeginWithName: @"nickName" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __nickName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__avatarUrl_isset) {
    if (__avatarUrl != nil) {
      [outProtocol writeFieldBeginWithName: @"avatarUrl" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __avatarUrl];
      [outProtocol writeFieldEnd];
    }
  }
  if (__isAdmin_isset) {
    [outProtocol writeFieldBeginWithName: @"isAdmin" type: TType_I32 fieldID: 5];
    [outProtocol writeI32: __isAdmin];
    [outProtocol writeFieldEnd];
  }
  if (__activityStartTime_isset) {
    [outProtocol writeFieldBeginWithName: @"activityStartTime" type: TType_I64 fieldID: 6];
    [outProtocol writeI64: __activityStartTime];
    [outProtocol writeFieldEnd];
  }
  if (__status_isset) {
    [outProtocol writeFieldBeginWithName: @"status" type: TType_I32 fieldID: 7];
    [outProtocol writeI32: __status];
    [outProtocol writeFieldEnd];
  }
  if (__labelId_isset) {
    [outProtocol writeFieldBeginWithName: @"labelId" type: TType_I32 fieldID: 8];
    [outProtocol writeI32: __labelId];
    [outProtocol writeFieldEnd];
  }
  if (__labelName_isset) {
    if (__labelName != nil) {
      [outProtocol writeFieldBeginWithName: @"labelName" type: TType_STRING fieldID: 9];
      [outProtocol writeString: __labelName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__browse_isset) {
    [outProtocol writeFieldBeginWithName: @"browse" type: TType_I32 fieldID: 10];
    [outProtocol writeI32: __browse];
    [outProtocol writeFieldEnd];
  }
  if (__imageUrl_isset) {
    if (__imageUrl != nil) {
      [outProtocol writeFieldBeginWithName: @"imageUrl" type: TType_STRING fieldID: 11];
      [outProtocol writeString: __imageUrl];
      [outProtocol writeFieldEnd];
    }
  }
  if (__content_isset) {
    if (__content != nil) {
      [outProtocol writeFieldBeginWithName: @"content" type: TType_STRING fieldID: 12];
      [outProtocol writeString: __content];
      [outProtocol writeFieldEnd];
    }
  }
  if (__mark_isset) {
    if (__mark != nil) {
      [outProtocol writeFieldBeginWithName: @"mark" type: TType_STRING fieldID: 13];
      [outProtocol writeString: __mark];
      [outProtocol writeFieldEnd];
    }
  }
  if (__praiseCount_isset) {
    [outProtocol writeFieldBeginWithName: @"praiseCount" type: TType_I32 fieldID: 14];
    [outProtocol writeI32: __praiseCount];
    [outProtocol writeFieldEnd];
  }
  if (__commentCount_isset) {
    [outProtocol writeFieldBeginWithName: @"commentCount" type: TType_I32 fieldID: 15];
    [outProtocol writeI32: __commentCount];
    [outProtocol writeFieldEnd];
  }
  if (__createTime_isset) {
    [outProtocol writeFieldBeginWithName: @"createTime" type: TType_I64 fieldID: 16];
    [outProtocol writeI64: __createTime];
    [outProtocol writeFieldEnd];
  }
  if (__labelType_isset) {
    [outProtocol writeFieldBeginWithName: @"labelType" type: TType_I32 fieldID: 17];
    [outProtocol writeI32: __labelType];
    [outProtocol writeFieldEnd];
  }
  if (__mobile_isset) {
    if (__mobile != nil) {
      [outProtocol writeFieldBeginWithName: @"mobile" type: TType_STRING fieldID: 18];
      [outProtocol writeString: __mobile];
      [outProtocol writeFieldEnd];
    }
  }
  if (__cityCommunities_isset) {
    if (__cityCommunities != nil) {
      [outProtocol writeFieldBeginWithName: @"cityCommunities" type: TType_LIST fieldID: 19];
      {
        [outProtocol writeListBeginWithElementType: TType_STRING size: [__cityCommunities count]];
        int idx4;
        for (idx4 = 0; idx4 < [__cityCommunities count]; idx4++)
        {
          [outProtocol writeString: [__cityCommunities objectAtIndex: idx4]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__applyCount_isset) {
    [outProtocol writeFieldBeginWithName: @"applyCount" type: TType_I32 fieldID: 20];
    [outProtocol writeI32: __applyCount];
    [outProtocol writeFieldEnd];
  }
  if (__inform_isset) {
    [outProtocol writeFieldBeginWithName: @"inform" type: TType_I32 fieldID: 21];
    [outProtocol writeI32: __inform];
    [outProtocol writeFieldEnd];
  }
  if (__isDelete_isset) {
    [outProtocol writeFieldBeginWithName: @"isDelete" type: TType_I32 fieldID: 22];
    [outProtocol writeI32: __isDelete];
    [outProtocol writeFieldEnd];
  }
  if (__informStatus_isset) {
    [outProtocol writeFieldBeginWithName: @"informStatus" type: TType_I32 fieldID: 23];
    [outProtocol writeI32: __informStatus];
    [outProtocol writeFieldEnd];
  }
  if (__notify_isset) {
    [outProtocol writeFieldBeginWithName: @"notify" type: TType_I32 fieldID: 24];
    [outProtocol writeI32: __notify];
    [outProtocol writeFieldEnd];
  }
  if (__isConform_isset) {
    [outProtocol writeFieldBeginWithName: @"isConform" type: TType_I32 fieldID: 25];
    [outProtocol writeI32: __isConform];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"TAdminPost("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"%i", __id];
  [ms appendString: @",userId:"];
  [ms appendFormat: @"%qi", __userId];
  [ms appendString: @",nickName:"];
  [ms appendFormat: @"\"%@\"", __nickName];
  [ms appendString: @",avatarUrl:"];
  [ms appendFormat: @"\"%@\"", __avatarUrl];
  [ms appendString: @",isAdmin:"];
  [ms appendFormat: @"%i", __isAdmin];
  [ms appendString: @",activityStartTime:"];
  [ms appendFormat: @"%qi", __activityStartTime];
  [ms appendString: @",status:"];
  [ms appendFormat: @"%i", __status];
  [ms appendString: @",labelId:"];
  [ms appendFormat: @"%i", __labelId];
  [ms appendString: @",labelName:"];
  [ms appendFormat: @"\"%@\"", __labelName];
  [ms appendString: @",browse:"];
  [ms appendFormat: @"%i", __browse];
  [ms appendString: @",imageUrl:"];
  [ms appendFormat: @"\"%@\"", __imageUrl];
  [ms appendString: @",content:"];
  [ms appendFormat: @"\"%@\"", __content];
  [ms appendString: @",mark:"];
  [ms appendFormat: @"\"%@\"", __mark];
  [ms appendString: @",praiseCount:"];
  [ms appendFormat: @"%i", __praiseCount];
  [ms appendString: @",commentCount:"];
  [ms appendFormat: @"%i", __commentCount];
  [ms appendString: @",createTime:"];
  [ms appendFormat: @"%qi", __createTime];
  [ms appendString: @",labelType:"];
  [ms appendFormat: @"%i", __labelType];
  [ms appendString: @",mobile:"];
  [ms appendFormat: @"\"%@\"", __mobile];
  [ms appendString: @",cityCommunities:"];
  [ms appendFormat: @"%@", __cityCommunities];
  [ms appendString: @",applyCount:"];
  [ms appendFormat: @"%i", __applyCount];
  [ms appendString: @",inform:"];
  [ms appendFormat: @"%i", __inform];
  [ms appendString: @",isDelete:"];
  [ms appendFormat: @"%i", __isDelete];
  [ms appendString: @",informStatus:"];
  [ms appendFormat: @"%i", __informStatus];
  [ms appendString: @",notify:"];
  [ms appendFormat: @"%i", __notify];
  [ms appendString: @",isConform:"];
  [ms appendFormat: @"%i", __isConform];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end


@implementation TAdminPostConstants
+ (void) initialize {
}
@end

