/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TObjective-C.h"
#import "TBase.h"

#import "TLabel.h"
#import "TComment.h"
#import "TMessageBox.h"
#import "TPost.h"
#import "TPraise.h"
#import "TReason.h"
#import "TActivityApply.h"

#import "SocialService.h"


@implementation SocialServiceConstants
+ (void) initialize {
}
@end

@interface getLabelList_args : NSObject <TBase, NSCoding> {
  int32_t __num;

  BOOL __num_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=num, setter=setNum:) int32_t num;
#endif

- (id) init;
- (id) initWithNum: (int32_t) num;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (int32_t) num;
- (void) setNum: (int32_t) num;
#endif
- (BOOL) numIsSet;

@end

@implementation getLabelList_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithNum: (int32_t) num
{
  self = [super init];
  __num = num;
  __num_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"num"])
  {
    __num = [decoder decodeInt32ForKey: @"num"];
    __num_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__num_isset)
  {
    [encoder encodeInt32: __num forKey: @"num"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int32_t) num {
  return __num;
}

- (void) setNum: (int32_t) num {
  __num = num;
  __num_isset = YES;
}

- (BOOL) numIsSet {
  return __num_isset;
}

- (void) unsetNum {
  __num_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setNum: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getLabelList_args"];
  if (__num_isset) {
    [outProtocol writeFieldBeginWithName: @"num" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __num];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getLabelList_args("];
  [ms appendString: @"num:"];
  [ms appendFormat: @"%i", __num];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetLabelList_result : NSObject <TBase, NSCoding> {
  NSMutableArray * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSMutableArray * success;
#endif

- (id) init;
- (id) initWithSuccess: (NSMutableArray *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSMutableArray *) success;
- (void) setSuccess: (NSMutableArray *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation GetLabelList_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NSMutableArray *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSMutableArray *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_LIST) {
          int _size0;
          [inProtocol readListBeginReturningElementType: NULL size: &_size0];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size0];
          int _i1;
          for (_i1 = 0; _i1 < _size0; ++_i1)
          {
            TLabel *_elem2 = [[TLabel alloc] init];
            [_elem2 read: inProtocol];
            [fieldValue addObject: _elem2];
            [_elem2 release_stub];
          }
          [inProtocol readListEnd];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetLabelList_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_LIST fieldID: 0];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__success count]];
        int idx4;
        for (idx4 = 0; idx4 < [__success count]; idx4++)
        {
          [[__success objectAtIndex: idx4] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetLabelList_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ISocialServiceGetLabelListClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
  return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
  self = [super init];
  inProtocol = [anInProtocol retain_stub];
  outProtocol = [anOutProtocol retain_stub];
  return self;
}

- (void) dealloc
{
  [inProtocol release_stub];
  [outProtocol release_stub];
  [super dealloc_stub];
}

- (void) send_getLabelList: (int32_t) num
{
  [outProtocol writeMessageBeginWithName: @"getLabelList" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getLabelList_args"];
  [outProtocol writeFieldBeginWithName: @"num" type: TType_I32 fieldID: 1];
  [outProtocol writeI32: num];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSMutableArray *) recv_getLabelList
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GetLabelList_result * result = [[[GetLabelList_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getLabelList failed: unknown result"];
}

- (NSMutableArray *) getLabelList: (int32_t) num
{
  [self send_getLabelList : num];
  return [self recv_getLabelList];
}

@end

@implementation ISocialServiceGetLabelListProcessor

- (id) initWithISocialServiceGetLabelList: (id <ISocialServiceGetLabelList>) service
{
  self = [super init];
  if (!self) {
    return nil;
  }
  mService = [service retain_stub];
  mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
  {
    SEL s = @selector(process_getLabelList_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getLabelList"];
  }
  return self;
}

- (id<ISocialServiceGetLabelList>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_getLabelList_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  getLabelList_args * args = [[getLabelList_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GetLabelList_result * result = [[GetLabelList_result alloc] init];
  [result setSuccess: [mService getLabelList: [args num]]];
  [outProtocol writeMessageBeginWithName: @"getLabelList"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) dealloc
{
  [mService release_stub];
  [mMethodMap release_stub];
  [super dealloc_stub];
}

@end

@interface getLabelDetailById_args : NSObject <TBase, NSCoding> {
int32_t __id;

BOOL __id_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=id, setter=setId:) int32_t id;
#endif

- (id) init;
- (id) initWithId: (int32_t) id;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (int32_t) id;
- (void) setId: (int32_t) id;
#endif
- (BOOL) idIsSet;

@end

@implementation getLabelDetailById_args

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithId: (int32_t) id
{
self = [super init];
__id = id;
__id_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"id"])
{
  __id = [decoder decodeInt32ForKey: @"id"];
  __id_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__id_isset)
{
  [encoder encodeInt32: __id forKey: @"id"];
}
}

- (void) dealloc
{
[super dealloc_stub];
}

- (int32_t) id {
return __id;
}

- (void) setId: (int32_t) id {
__id = id;
__id_isset = YES;
}

- (BOOL) idIsSet {
return __id_isset;
}

- (void) unsetId {
__id_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
  [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
  if (fieldType == TType_STOP) { 
    break;
  }
  switch (fieldID)
  {
    case 1:
      if (fieldType == TType_I32) {
        int32_t fieldValue = [inProtocol readI32];
        [self setId: fieldValue];
      } else { 
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      }
      break;
    default:
      [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      break;
  }
  [inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"getLabelDetailById_args"];
if (__id_isset) {
  [outProtocol writeFieldBeginWithName: @"id" type: TType_I32 fieldID: 1];
  [outProtocol writeI32: __id];
  [outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"getLabelDetailById_args("];
[ms appendString: @"id:"];
[ms appendFormat: @"%i", __id];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@interface GetLabelDetailById_result : NSObject <TBase, NSCoding> {
NSString * __success;

BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSString * success;
#endif

- (id) init;
- (id) initWithSuccess: (NSString *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) success;
- (void) setSuccess: (NSString *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation GetLabelDetailById_result

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithSuccess: (NSString *) success
{
self = [super init];
__success = [success retain_stub];
__success_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"success"])
{
  __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
  __success_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__success_isset)
{
  [encoder encodeObject: __success forKey: @"success"];
}
}

- (void) dealloc
{
[__success release_stub];
[super dealloc_stub];
}

- (NSString *) success {
return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSString *) success {
[success retain_stub];
[__success release_stub];
__success = success;
__success_isset = YES;
}

- (BOOL) successIsSet {
return __success_isset;
}

- (void) unsetSuccess {
[__success release_stub];
__success = nil;
__success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
  [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
  if (fieldType == TType_STOP) { 
    break;
  }
  switch (fieldID)
  {
    case 0:
      if (fieldType == TType_STRING) {
        NSString * fieldValue = [inProtocol readString];
        [self setSuccess: fieldValue];
      } else { 
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      }
      break;
    default:
      [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      break;
  }
  [inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"GetLabelDetailById_result"];

if (__success_isset) {
  if (__success != nil) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_STRING fieldID: 0];
    [outProtocol writeString: __success];
    [outProtocol writeFieldEnd];
  }
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"GetLabelDetailById_result("];
[ms appendString: @"success:"];
[ms appendFormat: @"\"%@\"", __success];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@implementation ISocialServiceGetLabelDetailByIdClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
self = [super init];
inProtocol = [anInProtocol retain_stub];
outProtocol = [anOutProtocol retain_stub];
return self;
}

- (void) dealloc
{
[inProtocol release_stub];
[outProtocol release_stub];
[super dealloc_stub];
}

- (void) send_getLabelDetailById: (int32_t) id
{
[outProtocol writeMessageBeginWithName: @"getLabelDetailById" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"getLabelDetailById_args"];
[outProtocol writeFieldBeginWithName: @"id" type: TType_I32 fieldID: 1];
[outProtocol writeI32: id];
[outProtocol writeFieldEnd];
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
}

- (NSString *) recv_getLabelDetailById
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
GetLabelDetailById_result * result = [[[GetLabelDetailById_result alloc] init] autorelease_stub];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"getLabelDetailById failed: unknown result"];
}

- (NSString *) getLabelDetailById: (int32_t) id
{
[self send_getLabelDetailById : id];
return [self recv_getLabelDetailById];
}

@end

@implementation ISocialServiceGetLabelDetailByIdProcessor

- (id) initWithISocialServiceGetLabelDetailById: (id <ISocialServiceGetLabelDetailById>) service
{
self = [super init];
if (!self) {
  return nil;
}
mService = [service retain_stub];
mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
{
  SEL s = @selector(process_getLabelDetailById_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"getLabelDetailById"];
}
return self;
}

- (id<ISocialServiceGetLabelDetailById>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_getLabelDetailById_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
getLabelDetailById_args * args = [[getLabelDetailById_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
GetLabelDetailById_result * result = [[GetLabelDetailById_result alloc] init];
[result setSuccess: [mService getLabelDetailById: [args id]]];
[outProtocol writeMessageBeginWithName: @"getLabelDetailById"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) dealloc
{
[mService release_stub];
[mMethodMap release_stub];
[super dealloc_stub];
}

@end

@interface getPostList_args : NSObject <TBase, NSCoding> {
int32_t __communityId;
int32_t __labelId;
int32_t __currentPage;
int32_t __pageSize;

BOOL __communityId_isset;
BOOL __labelId_isset;
BOOL __currentPage_isset;
BOOL __pageSize_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=communityId, setter=setCommunityId:) int32_t communityId;
@property (nonatomic, getter=labelId, setter=setLabelId:) int32_t labelId;
@property (nonatomic, getter=currentPage, setter=setCurrentPage:) int32_t currentPage;
@property (nonatomic, getter=pageSize, setter=setPageSize:) int32_t pageSize;
#endif

- (id) init;
- (id) initWithCommunityId: (int32_t) communityId labelId: (int32_t) labelId currentPage: (int32_t) currentPage pageSize: (int32_t) pageSize;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (int32_t) communityId;
- (void) setCommunityId: (int32_t) communityId;
#endif
- (BOOL) communityIdIsSet;

#if !__has_feature(objc_arc)
- (int32_t) labelId;
- (void) setLabelId: (int32_t) labelId;
#endif
- (BOOL) labelIdIsSet;

#if !__has_feature(objc_arc)
- (int32_t) currentPage;
- (void) setCurrentPage: (int32_t) currentPage;
#endif
- (BOOL) currentPageIsSet;

#if !__has_feature(objc_arc)
- (int32_t) pageSize;
- (void) setPageSize: (int32_t) pageSize;
#endif
- (BOOL) pageSizeIsSet;

@end

@implementation getPostList_args

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithCommunityId: (int32_t) communityId labelId: (int32_t) labelId currentPage: (int32_t) currentPage pageSize: (int32_t) pageSize
{
self = [super init];
__communityId = communityId;
__communityId_isset = YES;
__labelId = labelId;
__labelId_isset = YES;
__currentPage = currentPage;
__currentPage_isset = YES;
__pageSize = pageSize;
__pageSize_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"communityId"])
{
__communityId = [decoder decodeInt32ForKey: @"communityId"];
__communityId_isset = YES;
}
if ([decoder containsValueForKey: @"labelId"])
{
__labelId = [decoder decodeInt32ForKey: @"labelId"];
__labelId_isset = YES;
}
if ([decoder containsValueForKey: @"currentPage"])
{
__currentPage = [decoder decodeInt32ForKey: @"currentPage"];
__currentPage_isset = YES;
}
if ([decoder containsValueForKey: @"pageSize"])
{
__pageSize = [decoder decodeInt32ForKey: @"pageSize"];
__pageSize_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__communityId_isset)
{
[encoder encodeInt32: __communityId forKey: @"communityId"];
}
if (__labelId_isset)
{
[encoder encodeInt32: __labelId forKey: @"labelId"];
}
if (__currentPage_isset)
{
[encoder encodeInt32: __currentPage forKey: @"currentPage"];
}
if (__pageSize_isset)
{
[encoder encodeInt32: __pageSize forKey: @"pageSize"];
}
}

- (void) dealloc
{
[super dealloc_stub];
}

- (int32_t) communityId {
return __communityId;
}

- (void) setCommunityId: (int32_t) communityId {
__communityId = communityId;
__communityId_isset = YES;
}

- (BOOL) communityIdIsSet {
return __communityId_isset;
}

- (void) unsetCommunityId {
__communityId_isset = NO;
}

- (int32_t) labelId {
return __labelId;
}

- (void) setLabelId: (int32_t) labelId {
__labelId = labelId;
__labelId_isset = YES;
}

- (BOOL) labelIdIsSet {
return __labelId_isset;
}

- (void) unsetLabelId {
__labelId_isset = NO;
}

- (int32_t) currentPage {
return __currentPage;
}

- (void) setCurrentPage: (int32_t) currentPage {
__currentPage = currentPage;
__currentPage_isset = YES;
}

- (BOOL) currentPageIsSet {
return __currentPage_isset;
}

- (void) unsetCurrentPage {
__currentPage_isset = NO;
}

- (int32_t) pageSize {
return __pageSize;
}

- (void) setPageSize: (int32_t) pageSize {
__pageSize = pageSize;
__pageSize_isset = YES;
}

- (BOOL) pageSizeIsSet {
return __pageSize_isset;
}

- (void) unsetPageSize {
__pageSize_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
  break;
}
switch (fieldID)
{
  case 1:
    if (fieldType == TType_I32) {
      int32_t fieldValue = [inProtocol readI32];
      [self setCommunityId: fieldValue];
    } else { 
      [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
    }
    break;
  case 2:
    if (fieldType == TType_I32) {
      int32_t fieldValue = [inProtocol readI32];
      [self setLabelId: fieldValue];
    } else { 
      [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
    }
    break;
  case 3:
    if (fieldType == TType_I32) {
      int32_t fieldValue = [inProtocol readI32];
      [self setCurrentPage: fieldValue];
    } else { 
      [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
    }
    break;
  case 4:
    if (fieldType == TType_I32) {
      int32_t fieldValue = [inProtocol readI32];
      [self setPageSize: fieldValue];
    } else { 
      [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
    }
    break;
  default:
    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
    break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"getPostList_args"];
if (__communityId_isset) {
[outProtocol writeFieldBeginWithName: @"communityId" type: TType_I32 fieldID: 1];
[outProtocol writeI32: __communityId];
[outProtocol writeFieldEnd];
}
if (__labelId_isset) {
[outProtocol writeFieldBeginWithName: @"labelId" type: TType_I32 fieldID: 2];
[outProtocol writeI32: __labelId];
[outProtocol writeFieldEnd];
}
if (__currentPage_isset) {
[outProtocol writeFieldBeginWithName: @"currentPage" type: TType_I32 fieldID: 3];
[outProtocol writeI32: __currentPage];
[outProtocol writeFieldEnd];
}
if (__pageSize_isset) {
[outProtocol writeFieldBeginWithName: @"pageSize" type: TType_I32 fieldID: 4];
[outProtocol writeI32: __pageSize];
[outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"getPostList_args("];
[ms appendString: @"communityId:"];
[ms appendFormat: @"%i", __communityId];
[ms appendString: @",labelId:"];
[ms appendFormat: @"%i", __labelId];
[ms appendString: @",currentPage:"];
[ms appendFormat: @"%i", __currentPage];
[ms appendString: @",pageSize:"];
[ms appendFormat: @"%i", __pageSize];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@interface GetPostList_result : NSObject <TBase, NSCoding> {
NSMutableArray * __success;

BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSMutableArray * success;
#endif

- (id) init;
- (id) initWithSuccess: (NSMutableArray *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSMutableArray *) success;
- (void) setSuccess: (NSMutableArray *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation GetPostList_result

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithSuccess: (NSMutableArray *) success
{
self = [super init];
__success = [success retain_stub];
__success_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"success"])
{
__success = [[decoder decodeObjectForKey: @"success"] retain_stub];
__success_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__success_isset)
{
[encoder encodeObject: __success forKey: @"success"];
}
}

- (void) dealloc
{
[__success release_stub];
[super dealloc_stub];
}

- (NSMutableArray *) success {
return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSMutableArray *) success {
[success retain_stub];
[__success release_stub];
__success = success;
__success_isset = YES;
}

- (BOOL) successIsSet {
return __success_isset;
}

- (void) unsetSuccess {
[__success release_stub];
__success = nil;
__success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
  break;
}
switch (fieldID)
{
  case 0:
    if (fieldType == TType_LIST) {
      int _size5;
      [inProtocol readListBeginReturningElementType: NULL size: &_size5];
      NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size5];
      int _i6;
      for (_i6 = 0; _i6 < _size5; ++_i6)
      {
        TPost *_elem7 = [[TPost alloc] init];
        [_elem7 read: inProtocol];
        [fieldValue addObject: _elem7];
        [_elem7 release_stub];
      }
      [inProtocol readListEnd];
      [self setSuccess: fieldValue];
      [fieldValue release_stub];
    } else { 
      [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
    }
    break;
  default:
    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
    break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"GetPostList_result"];

if (__success_isset) {
if (__success != nil) {
  [outProtocol writeFieldBeginWithName: @"success" type: TType_LIST fieldID: 0];
  {
    [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__success count]];
    int idx9;
    for (idx9 = 0; idx9 < [__success count]; idx9++)
    {
      [[__success objectAtIndex: idx9] write: outProtocol];
    }
    [outProtocol writeListEnd];
  }
  [outProtocol writeFieldEnd];
}
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"GetPostList_result("];
[ms appendString: @"success:"];
[ms appendFormat: @"%@", __success];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@implementation ISocialServiceGetPostListClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
self = [super init];
inProtocol = [anInProtocol retain_stub];
outProtocol = [anOutProtocol retain_stub];
return self;
}

- (void) dealloc
{
[inProtocol release_stub];
[outProtocol release_stub];
[super dealloc_stub];
}

- (void) send_getPostList: (int32_t) communityId labelId: (int32_t) labelId currentPage: (int32_t) currentPage pageSize: (int32_t) pageSize
{
[outProtocol writeMessageBeginWithName: @"getPostList" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"getPostList_args"];
[outProtocol writeFieldBeginWithName: @"communityId" type: TType_I32 fieldID: 1];
[outProtocol writeI32: communityId];
[outProtocol writeFieldEnd];
[outProtocol writeFieldBeginWithName: @"labelId" type: TType_I32 fieldID: 2];
[outProtocol writeI32: labelId];
[outProtocol writeFieldEnd];
[outProtocol writeFieldBeginWithName: @"currentPage" type: TType_I32 fieldID: 3];
[outProtocol writeI32: currentPage];
[outProtocol writeFieldEnd];
[outProtocol writeFieldBeginWithName: @"pageSize" type: TType_I32 fieldID: 4];
[outProtocol writeI32: pageSize];
[outProtocol writeFieldEnd];
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
}

- (NSMutableArray *) recv_getPostList
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
GetPostList_result * result = [[[GetPostList_result alloc] init] autorelease_stub];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"getPostList failed: unknown result"];
}

- (NSMutableArray *) getPostList: (int32_t) communityId labelId: (int32_t) labelId currentPage: (int32_t) currentPage pageSize: (int32_t) pageSize
{
[self send_getPostList : communityId labelId: labelId currentPage: currentPage pageSize: pageSize];
return [self recv_getPostList];
}

@end

@implementation ISocialServiceGetPostListProcessor

- (id) initWithISocialServiceGetPostList: (id <ISocialServiceGetPostList>) service
{
self = [super init];
if (!self) {
  return nil;
}
mService = [service retain_stub];
mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
{
SEL s = @selector(process_getPostList_withSequenceID:inProtocol:outProtocol:);
NSMethodSignature * sig = [self methodSignatureForSelector: s];
NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
[invocation setSelector: s];
[invocation retainArguments];
[mMethodMap setValue: invocation forKey: @"getPostList"];
}
return self;
}

- (id<ISocialServiceGetPostList>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_getPostList_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
getPostList_args * args = [[getPostList_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
GetPostList_result * result = [[GetPostList_result alloc] init];
[result setSuccess: [mService getPostList: [args communityId] labelId: [args labelId] currentPage: [args currentPage] pageSize: [args pageSize]]];
[outProtocol writeMessageBeginWithName: @"getPostList"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) dealloc
{
[mService release_stub];
[mMethodMap release_stub];
[super dealloc_stub];
}

@end

@interface addPost_args : NSObject <TBase, NSCoding> {
TPost * __post;

BOOL __post_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=post, setter=setPost:) TPost * post;
#endif

- (id) init;
- (id) initWithPost: (TPost *) post;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (TPost *) post;
- (void) setPost: (TPost *) post;
#endif
- (BOOL) postIsSet;

@end

@implementation addPost_args

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithPost: (TPost *) post
{
self = [super init];
__post = [post retain_stub];
__post_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"post"])
{
__post = [[decoder decodeObjectForKey: @"post"] retain_stub];
__post_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__post_isset)
{
[encoder encodeObject: __post forKey: @"post"];
}
}

- (void) dealloc
{
[__post release_stub];
[super dealloc_stub];
}

- (TPost *) post {
return [[__post retain_stub] autorelease_stub];
}

- (void) setPost: (TPost *) post {
[post retain_stub];
[__post release_stub];
__post = post;
__post_isset = YES;
}

- (BOOL) postIsSet {
return __post_isset;
}

- (void) unsetPost {
[__post release_stub];
__post = nil;
__post_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 1:
  if (fieldType == TType_STRUCT) {
    TPost *fieldValue = [[TPost alloc] init];
    [fieldValue read: inProtocol];
    [self setPost: fieldValue];
    [fieldValue release_stub];
  } else { 
    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  }
  break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"addPost_args"];
if (__post_isset) {
if (__post != nil) {
[outProtocol writeFieldBeginWithName: @"post" type: TType_STRUCT fieldID: 1];
[__post write: outProtocol];
[outProtocol writeFieldEnd];
}
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"addPost_args("];
[ms appendString: @"post:"];
[ms appendFormat: @"%@", __post];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@interface AddPost_result : NSObject <TBase, NSCoding> {
int32_t __success;

BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) int32_t success;
#endif

- (id) init;
- (id) initWithSuccess: (int32_t) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (int32_t) success;
- (void) setSuccess: (int32_t) success;
#endif
- (BOOL) successIsSet;

@end

@implementation AddPost_result

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithSuccess: (int32_t) success
{
self = [super init];
__success = success;
__success_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"success"])
{
__success = [decoder decodeInt32ForKey: @"success"];
__success_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__success_isset)
{
[encoder encodeInt32: __success forKey: @"success"];
}
}

- (void) dealloc
{
[super dealloc_stub];
}

- (int32_t) success {
return __success;
}

- (void) setSuccess: (int32_t) success {
__success = success;
__success_isset = YES;
}

- (BOOL) successIsSet {
return __success_isset;
}

- (void) unsetSuccess {
__success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 0:
  if (fieldType == TType_I32) {
    int32_t fieldValue = [inProtocol readI32];
    [self setSuccess: fieldValue];
  } else { 
    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  }
  break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"AddPost_result"];

if (__success_isset) {
[outProtocol writeFieldBeginWithName: @"success" type: TType_I32 fieldID: 0];
[outProtocol writeI32: __success];
[outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"AddPost_result("];
[ms appendString: @"success:"];
[ms appendFormat: @"%i", __success];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@implementation ISocialServiceAddPostClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
self = [super init];
inProtocol = [anInProtocol retain_stub];
outProtocol = [anOutProtocol retain_stub];
return self;
}

- (void) dealloc
{
[inProtocol release_stub];
[outProtocol release_stub];
[super dealloc_stub];
}

- (void) send_addPost: (TPost *) post
{
[outProtocol writeMessageBeginWithName: @"addPost" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"addPost_args"];
if (post != nil){
[outProtocol writeFieldBeginWithName: @"post" type: TType_STRUCT fieldID: 1];
[post write: outProtocol];
[outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
}

- (int32_t) recv_addPost
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
AddPost_result * result = [[[AddPost_result alloc] init] autorelease_stub];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"addPost failed: unknown result"];
}

- (int32_t) addPost: (TPost *) post
{
[self send_addPost : post];
return [self recv_addPost];
}

@end

@implementation ISocialServiceAddPostProcessor

- (id) initWithISocialServiceAddPost: (id <ISocialServiceAddPost>) service
{
self = [super init];
if (!self) {
  return nil;
}
mService = [service retain_stub];
mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
{
SEL s = @selector(process_addPost_withSequenceID:inProtocol:outProtocol:);
NSMethodSignature * sig = [self methodSignatureForSelector: s];
NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
[invocation setSelector: s];
[invocation retainArguments];
[mMethodMap setValue: invocation forKey: @"addPost"];
}
return self;
}

- (id<ISocialServiceAddPost>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_addPost_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
addPost_args * args = [[addPost_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
AddPost_result * result = [[AddPost_result alloc] init];
[result setSuccess: [mService addPost: [args post]]];
[outProtocol writeMessageBeginWithName: @"addPost"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) dealloc
{
[mService release_stub];
[mMethodMap release_stub];
[super dealloc_stub];
}

@end

@interface deletePost_args : NSObject <TBase, NSCoding> {
int32_t __id;
NSString * __mark;

BOOL __id_isset;
BOOL __mark_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=id, setter=setId:) int32_t id;
@property (nonatomic, retain, getter=mark, setter=setMark:) NSString * mark;
#endif

- (id) init;
- (id) initWithId: (int32_t) id mark: (NSString *) mark;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (int32_t) id;
- (void) setId: (int32_t) id;
#endif
- (BOOL) idIsSet;

#if !__has_feature(objc_arc)
- (NSString *) mark;
- (void) setMark: (NSString *) mark;
#endif
- (BOOL) markIsSet;

@end

@implementation deletePost_args

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithId: (int32_t) id mark: (NSString *) mark
{
self = [super init];
__id = id;
__id_isset = YES;
__mark = [mark retain_stub];
__mark_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"id"])
{
__id = [decoder decodeInt32ForKey: @"id"];
__id_isset = YES;
}
if ([decoder containsValueForKey: @"mark"])
{
__mark = [[decoder decodeObjectForKey: @"mark"] retain_stub];
__mark_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__id_isset)
{
[encoder encodeInt32: __id forKey: @"id"];
}
if (__mark_isset)
{
[encoder encodeObject: __mark forKey: @"mark"];
}
}

- (void) dealloc
{
[__mark release_stub];
[super dealloc_stub];
}

- (int32_t) id {
return __id;
}

- (void) setId: (int32_t) id {
__id = id;
__id_isset = YES;
}

- (BOOL) idIsSet {
return __id_isset;
}

- (void) unsetId {
__id_isset = NO;
}

- (NSString *) mark {
return [[__mark retain_stub] autorelease_stub];
}

- (void) setMark: (NSString *) mark {
[mark retain_stub];
[__mark release_stub];
__mark = mark;
__mark_isset = YES;
}

- (BOOL) markIsSet {
return __mark_isset;
}

- (void) unsetMark {
[__mark release_stub];
__mark = nil;
__mark_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 1:
if (fieldType == TType_I32) {
  int32_t fieldValue = [inProtocol readI32];
  [self setId: fieldValue];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
case 2:
if (fieldType == TType_STRING) {
  NSString * fieldValue = [inProtocol readString];
  [self setMark: fieldValue];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"deletePost_args"];
if (__id_isset) {
[outProtocol writeFieldBeginWithName: @"id" type: TType_I32 fieldID: 1];
[outProtocol writeI32: __id];
[outProtocol writeFieldEnd];
}
if (__mark_isset) {
if (__mark != nil) {
[outProtocol writeFieldBeginWithName: @"mark" type: TType_STRING fieldID: 2];
[outProtocol writeString: __mark];
[outProtocol writeFieldEnd];
}
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"deletePost_args("];
[ms appendString: @"id:"];
[ms appendFormat: @"%i", __id];
[ms appendString: @",mark:"];
[ms appendFormat: @"\"%@\"", __mark];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@interface DeletePost_result : NSObject <TBase, NSCoding> {
BOOL __success;

BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) init;
- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BOOL) success;
- (void) setSuccess: (BOOL) success;
#endif
- (BOOL) successIsSet;

@end

@implementation DeletePost_result

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithSuccess: (BOOL) success
{
self = [super init];
__success = success;
__success_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"success"])
{
__success = [decoder decodeBoolForKey: @"success"];
__success_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__success_isset)
{
[encoder encodeBool: __success forKey: @"success"];
}
}

- (void) dealloc
{
[super dealloc_stub];
}

- (BOOL) success {
return __success;
}

- (void) setSuccess: (BOOL) success {
__success = success;
__success_isset = YES;
}

- (BOOL) successIsSet {
return __success_isset;
}

- (void) unsetSuccess {
__success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 0:
if (fieldType == TType_BOOL) {
  BOOL fieldValue = [inProtocol readBool];
  [self setSuccess: fieldValue];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"DeletePost_result"];

if (__success_isset) {
[outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
[outProtocol writeBool: __success];
[outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"DeletePost_result("];
[ms appendString: @"success:"];
[ms appendFormat: @"%i", __success];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@implementation ISocialServiceDeletePostClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
self = [super init];
inProtocol = [anInProtocol retain_stub];
outProtocol = [anOutProtocol retain_stub];
return self;
}

- (void) dealloc
{
[inProtocol release_stub];
[outProtocol release_stub];
[super dealloc_stub];
}

- (void) send_deletePost: (int32_t) id mark: (NSString *) mark
{
[outProtocol writeMessageBeginWithName: @"deletePost" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"deletePost_args"];
[outProtocol writeFieldBeginWithName: @"id" type: TType_I32 fieldID: 1];
[outProtocol writeI32: id];
[outProtocol writeFieldEnd];
if (mark != nil){
[outProtocol writeFieldBeginWithName: @"mark" type: TType_STRING fieldID: 2];
[outProtocol writeString: mark];
[outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
}

- (BOOL) recv_deletePost
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
DeletePost_result * result = [[[DeletePost_result alloc] init] autorelease_stub];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"deletePost failed: unknown result"];
}

- (BOOL) deletePost: (int32_t) id mark: (NSString *) mark
{
[self send_deletePost : id mark: mark];
return [self recv_deletePost];
}

@end

@implementation ISocialServiceDeletePostProcessor

- (id) initWithISocialServiceDeletePost: (id <ISocialServiceDeletePost>) service
{
self = [super init];
if (!self) {
  return nil;
}
mService = [service retain_stub];
mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
{
SEL s = @selector(process_deletePost_withSequenceID:inProtocol:outProtocol:);
NSMethodSignature * sig = [self methodSignatureForSelector: s];
NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
[invocation setSelector: s];
[invocation retainArguments];
[mMethodMap setValue: invocation forKey: @"deletePost"];
}
return self;
}

- (id<ISocialServiceDeletePost>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_deletePost_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
deletePost_args * args = [[deletePost_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
DeletePost_result * result = [[DeletePost_result alloc] init];
[result setSuccess: [mService deletePost: [args id] mark: [args mark]]];
[outProtocol writeMessageBeginWithName: @"deletePost"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) dealloc
{
[mService release_stub];
[mMethodMap release_stub];
[super dealloc_stub];
}

@end

@interface getPostById_args : NSObject <TBase, NSCoding> {
int32_t __id;

BOOL __id_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=id, setter=setId:) int32_t id;
#endif

- (id) init;
- (id) initWithId: (int32_t) id;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (int32_t) id;
- (void) setId: (int32_t) id;
#endif
- (BOOL) idIsSet;

@end

@implementation getPostById_args

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithId: (int32_t) id
{
self = [super init];
__id = id;
__id_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"id"])
{
__id = [decoder decodeInt32ForKey: @"id"];
__id_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__id_isset)
{
[encoder encodeInt32: __id forKey: @"id"];
}
}

- (void) dealloc
{
[super dealloc_stub];
}

- (int32_t) id {
return __id;
}

- (void) setId: (int32_t) id {
__id = id;
__id_isset = YES;
}

- (BOOL) idIsSet {
return __id_isset;
}

- (void) unsetId {
__id_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 1:
if (fieldType == TType_I32) {
int32_t fieldValue = [inProtocol readI32];
[self setId: fieldValue];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"getPostById_args"];
if (__id_isset) {
[outProtocol writeFieldBeginWithName: @"id" type: TType_I32 fieldID: 1];
[outProtocol writeI32: __id];
[outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"getPostById_args("];
[ms appendString: @"id:"];
[ms appendFormat: @"%i", __id];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@interface GetPostById_result : NSObject <TBase, NSCoding> {
TPost * __success;

BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) TPost * success;
#endif

- (id) init;
- (id) initWithSuccess: (TPost *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (TPost *) success;
- (void) setSuccess: (TPost *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation GetPostById_result

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithSuccess: (TPost *) success
{
self = [super init];
__success = [success retain_stub];
__success_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"success"])
{
__success = [[decoder decodeObjectForKey: @"success"] retain_stub];
__success_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__success_isset)
{
[encoder encodeObject: __success forKey: @"success"];
}
}

- (void) dealloc
{
[__success release_stub];
[super dealloc_stub];
}

- (TPost *) success {
return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (TPost *) success {
[success retain_stub];
[__success release_stub];
__success = success;
__success_isset = YES;
}

- (BOOL) successIsSet {
return __success_isset;
}

- (void) unsetSuccess {
[__success release_stub];
__success = nil;
__success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 0:
if (fieldType == TType_STRUCT) {
TPost *fieldValue = [[TPost alloc] init];
[fieldValue read: inProtocol];
[self setSuccess: fieldValue];
[fieldValue release_stub];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"GetPostById_result"];

if (__success_isset) {
if (__success != nil) {
[outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
[__success write: outProtocol];
[outProtocol writeFieldEnd];
}
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"GetPostById_result("];
[ms appendString: @"success:"];
[ms appendFormat: @"%@", __success];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@implementation ISocialServiceGetPostByIdClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
self = [super init];
inProtocol = [anInProtocol retain_stub];
outProtocol = [anOutProtocol retain_stub];
return self;
}

- (void) dealloc
{
[inProtocol release_stub];
[outProtocol release_stub];
[super dealloc_stub];
}

- (void) send_getPostById: (int32_t) id
{
[outProtocol writeMessageBeginWithName: @"getPostById" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"getPostById_args"];
[outProtocol writeFieldBeginWithName: @"id" type: TType_I32 fieldID: 1];
[outProtocol writeI32: id];
[outProtocol writeFieldEnd];
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
}

- (TPost *) recv_getPostById
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
GetPostById_result * result = [[[GetPostById_result alloc] init] autorelease_stub];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"getPostById failed: unknown result"];
}

- (TPost *) getPostById: (int32_t) id
{
[self send_getPostById : id];
return [self recv_getPostById];
}

@end

@implementation ISocialServiceGetPostByIdProcessor

- (id) initWithISocialServiceGetPostById: (id <ISocialServiceGetPostById>) service
{
self = [super init];
if (!self) {
  return nil;
}
mService = [service retain_stub];
mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
{
SEL s = @selector(process_getPostById_withSequenceID:inProtocol:outProtocol:);
NSMethodSignature * sig = [self methodSignatureForSelector: s];
NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
[invocation setSelector: s];
[invocation retainArguments];
[mMethodMap setValue: invocation forKey: @"getPostById"];
}
return self;
}

- (id<ISocialServiceGetPostById>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_getPostById_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
getPostById_args * args = [[getPostById_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
GetPostById_result * result = [[GetPostById_result alloc] init];
[result setSuccess: [mService getPostById: [args id]]];
[outProtocol writeMessageBeginWithName: @"getPostById"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) dealloc
{
[mService release_stub];
[mMethodMap release_stub];
[super dealloc_stub];
}

@end

@interface getPostByUser_args : NSObject <TBase, NSCoding> {
int64_t __userId;
int32_t __currentPage;
int32_t __pageSize;

BOOL __userId_isset;
BOOL __currentPage_isset;
BOOL __pageSize_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=userId, setter=setUserId:) int64_t userId;
@property (nonatomic, getter=currentPage, setter=setCurrentPage:) int32_t currentPage;
@property (nonatomic, getter=pageSize, setter=setPageSize:) int32_t pageSize;
#endif

- (id) init;
- (id) initWithUserId: (int64_t) userId currentPage: (int32_t) currentPage pageSize: (int32_t) pageSize;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (int64_t) userId;
- (void) setUserId: (int64_t) userId;
#endif
- (BOOL) userIdIsSet;

#if !__has_feature(objc_arc)
- (int32_t) currentPage;
- (void) setCurrentPage: (int32_t) currentPage;
#endif
- (BOOL) currentPageIsSet;

#if !__has_feature(objc_arc)
- (int32_t) pageSize;
- (void) setPageSize: (int32_t) pageSize;
#endif
- (BOOL) pageSizeIsSet;

@end

@implementation getPostByUser_args

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithUserId: (int64_t) userId currentPage: (int32_t) currentPage pageSize: (int32_t) pageSize
{
self = [super init];
__userId = userId;
__userId_isset = YES;
__currentPage = currentPage;
__currentPage_isset = YES;
__pageSize = pageSize;
__pageSize_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"userId"])
{
__userId = [decoder decodeInt64ForKey: @"userId"];
__userId_isset = YES;
}
if ([decoder containsValueForKey: @"currentPage"])
{
__currentPage = [decoder decodeInt32ForKey: @"currentPage"];
__currentPage_isset = YES;
}
if ([decoder containsValueForKey: @"pageSize"])
{
__pageSize = [decoder decodeInt32ForKey: @"pageSize"];
__pageSize_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__userId_isset)
{
[encoder encodeInt64: __userId forKey: @"userId"];
}
if (__currentPage_isset)
{
[encoder encodeInt32: __currentPage forKey: @"currentPage"];
}
if (__pageSize_isset)
{
[encoder encodeInt32: __pageSize forKey: @"pageSize"];
}
}

- (void) dealloc
{
[super dealloc_stub];
}

- (int64_t) userId {
return __userId;
}

- (void) setUserId: (int64_t) userId {
__userId = userId;
__userId_isset = YES;
}

- (BOOL) userIdIsSet {
return __userId_isset;
}

- (void) unsetUserId {
__userId_isset = NO;
}

- (int32_t) currentPage {
return __currentPage;
}

- (void) setCurrentPage: (int32_t) currentPage {
__currentPage = currentPage;
__currentPage_isset = YES;
}

- (BOOL) currentPageIsSet {
return __currentPage_isset;
}

- (void) unsetCurrentPage {
__currentPage_isset = NO;
}

- (int32_t) pageSize {
return __pageSize;
}

- (void) setPageSize: (int32_t) pageSize {
__pageSize = pageSize;
__pageSize_isset = YES;
}

- (BOOL) pageSizeIsSet {
return __pageSize_isset;
}

- (void) unsetPageSize {
__pageSize_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 1:
if (fieldType == TType_I64) {
int64_t fieldValue = [inProtocol readI64];
[self setUserId: fieldValue];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
case 2:
if (fieldType == TType_I32) {
int32_t fieldValue = [inProtocol readI32];
[self setCurrentPage: fieldValue];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
case 3:
if (fieldType == TType_I32) {
int32_t fieldValue = [inProtocol readI32];
[self setPageSize: fieldValue];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"getPostByUser_args"];
if (__userId_isset) {
[outProtocol writeFieldBeginWithName: @"userId" type: TType_I64 fieldID: 1];
[outProtocol writeI64: __userId];
[outProtocol writeFieldEnd];
}
if (__currentPage_isset) {
[outProtocol writeFieldBeginWithName: @"currentPage" type: TType_I32 fieldID: 2];
[outProtocol writeI32: __currentPage];
[outProtocol writeFieldEnd];
}
if (__pageSize_isset) {
[outProtocol writeFieldBeginWithName: @"pageSize" type: TType_I32 fieldID: 3];
[outProtocol writeI32: __pageSize];
[outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"getPostByUser_args("];
[ms appendString: @"userId:"];
[ms appendFormat: @"%qi", __userId];
[ms appendString: @",currentPage:"];
[ms appendFormat: @"%i", __currentPage];
[ms appendString: @",pageSize:"];
[ms appendFormat: @"%i", __pageSize];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@interface GetPostByUser_result : NSObject <TBase, NSCoding> {
NSMutableArray * __success;

BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSMutableArray * success;
#endif

- (id) init;
- (id) initWithSuccess: (NSMutableArray *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSMutableArray *) success;
- (void) setSuccess: (NSMutableArray *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation GetPostByUser_result

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithSuccess: (NSMutableArray *) success
{
self = [super init];
__success = [success retain_stub];
__success_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"success"])
{
__success = [[decoder decodeObjectForKey: @"success"] retain_stub];
__success_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__success_isset)
{
[encoder encodeObject: __success forKey: @"success"];
}
}

- (void) dealloc
{
[__success release_stub];
[super dealloc_stub];
}

- (NSMutableArray *) success {
return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSMutableArray *) success {
[success retain_stub];
[__success release_stub];
__success = success;
__success_isset = YES;
}

- (BOOL) successIsSet {
return __success_isset;
}

- (void) unsetSuccess {
[__success release_stub];
__success = nil;
__success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 0:
if (fieldType == TType_LIST) {
int _size10;
[inProtocol readListBeginReturningElementType: NULL size: &_size10];
NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size10];
int _i11;
for (_i11 = 0; _i11 < _size10; ++_i11)
{
TPost *_elem12 = [[TPost alloc] init];
[_elem12 read: inProtocol];
[fieldValue addObject: _elem12];
[_elem12 release_stub];
}
[inProtocol readListEnd];
[self setSuccess: fieldValue];
[fieldValue release_stub];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"GetPostByUser_result"];

if (__success_isset) {
if (__success != nil) {
[outProtocol writeFieldBeginWithName: @"success" type: TType_LIST fieldID: 0];
{
[outProtocol writeListBeginWithElementType: TType_STRUCT size: [__success count]];
int idx14;
for (idx14 = 0; idx14 < [__success count]; idx14++)
{
[[__success objectAtIndex: idx14] write: outProtocol];
}
[outProtocol writeListEnd];
}
[outProtocol writeFieldEnd];
}
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"GetPostByUser_result("];
[ms appendString: @"success:"];
[ms appendFormat: @"%@", __success];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@implementation ISocialServiceGetPostByUserClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
self = [super init];
inProtocol = [anInProtocol retain_stub];
outProtocol = [anOutProtocol retain_stub];
return self;
}

- (void) dealloc
{
[inProtocol release_stub];
[outProtocol release_stub];
[super dealloc_stub];
}

- (void) send_getPostByUser: (int64_t) userId currentPage: (int32_t) currentPage pageSize: (int32_t) pageSize
{
[outProtocol writeMessageBeginWithName: @"getPostByUser" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"getPostByUser_args"];
[outProtocol writeFieldBeginWithName: @"userId" type: TType_I64 fieldID: 1];
[outProtocol writeI64: userId];
[outProtocol writeFieldEnd];
[outProtocol writeFieldBeginWithName: @"currentPage" type: TType_I32 fieldID: 2];
[outProtocol writeI32: currentPage];
[outProtocol writeFieldEnd];
[outProtocol writeFieldBeginWithName: @"pageSize" type: TType_I32 fieldID: 3];
[outProtocol writeI32: pageSize];
[outProtocol writeFieldEnd];
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
}

- (NSMutableArray *) recv_getPostByUser
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
GetPostByUser_result * result = [[[GetPostByUser_result alloc] init] autorelease_stub];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"getPostByUser failed: unknown result"];
}

- (NSMutableArray *) getPostByUser: (int64_t) userId currentPage: (int32_t) currentPage pageSize: (int32_t) pageSize
{
[self send_getPostByUser : userId currentPage: currentPage pageSize: pageSize];
return [self recv_getPostByUser];
}

@end

@implementation ISocialServiceGetPostByUserProcessor

- (id) initWithISocialServiceGetPostByUser: (id <ISocialServiceGetPostByUser>) service
{
self = [super init];
if (!self) {
  return nil;
}
mService = [service retain_stub];
mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
{
SEL s = @selector(process_getPostByUser_withSequenceID:inProtocol:outProtocol:);
NSMethodSignature * sig = [self methodSignatureForSelector: s];
NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
[invocation setSelector: s];
[invocation retainArguments];
[mMethodMap setValue: invocation forKey: @"getPostByUser"];
}
return self;
}

- (id<ISocialServiceGetPostByUser>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_getPostByUser_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
getPostByUser_args * args = [[getPostByUser_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
GetPostByUser_result * result = [[GetPostByUser_result alloc] init];
[result setSuccess: [mService getPostByUser: [args userId] currentPage: [args currentPage] pageSize: [args pageSize]]];
[outProtocol writeMessageBeginWithName: @"getPostByUser"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) dealloc
{
[mService release_stub];
[mMethodMap release_stub];
[super dealloc_stub];
}

@end

@interface getNewMsgCount_args : NSObject <TBase, NSCoding> {
}

- (id) init;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

@end

@implementation getNewMsgCount_args

- (id) init
{
self = [super init];
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"getNewMsgCount_args"];
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"getNewMsgCount_args("];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@interface GetNewMsgCount_result : NSObject <TBase, NSCoding> {
int32_t __success;

BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) int32_t success;
#endif

- (id) init;
- (id) initWithSuccess: (int32_t) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (int32_t) success;
- (void) setSuccess: (int32_t) success;
#endif
- (BOOL) successIsSet;

@end

@implementation GetNewMsgCount_result

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithSuccess: (int32_t) success
{
self = [super init];
__success = success;
__success_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"success"])
{
__success = [decoder decodeInt32ForKey: @"success"];
__success_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__success_isset)
{
[encoder encodeInt32: __success forKey: @"success"];
}
}

- (void) dealloc
{
[super dealloc_stub];
}

- (int32_t) success {
return __success;
}

- (void) setSuccess: (int32_t) success {
__success = success;
__success_isset = YES;
}

- (BOOL) successIsSet {
return __success_isset;
}

- (void) unsetSuccess {
__success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 0:
if (fieldType == TType_I32) {
int32_t fieldValue = [inProtocol readI32];
[self setSuccess: fieldValue];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"GetNewMsgCount_result"];

if (__success_isset) {
[outProtocol writeFieldBeginWithName: @"success" type: TType_I32 fieldID: 0];
[outProtocol writeI32: __success];
[outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"GetNewMsgCount_result("];
[ms appendString: @"success:"];
[ms appendFormat: @"%i", __success];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@implementation ISocialServiceGetNewMsgCountClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
self = [super init];
inProtocol = [anInProtocol retain_stub];
outProtocol = [anOutProtocol retain_stub];
return self;
}

- (void) dealloc
{
[inProtocol release_stub];
[outProtocol release_stub];
[super dealloc_stub];
}

- (void) send_getNewMsgCount
{
[outProtocol writeMessageBeginWithName: @"getNewMsgCount" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"getNewMsgCount_args"];
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
}

- (int32_t) recv_getNewMsgCount
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
GetNewMsgCount_result * result = [[[GetNewMsgCount_result alloc] init] autorelease_stub];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"getNewMsgCount failed: unknown result"];
}

- (int32_t) getNewMsgCount
{
[self send_getNewMsgCount];
return [self recv_getNewMsgCount];
}

@end

@implementation ISocialServiceGetNewMsgCountProcessor

- (id) initWithISocialServiceGetNewMsgCount: (id <ISocialServiceGetNewMsgCount>) service
{
self = [super init];
if (!self) {
  return nil;
}
mService = [service retain_stub];
mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
{
SEL s = @selector(process_getNewMsgCount_withSequenceID:inProtocol:outProtocol:);
NSMethodSignature * sig = [self methodSignatureForSelector: s];
NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
[invocation setSelector: s];
[invocation retainArguments];
[mMethodMap setValue: invocation forKey: @"getNewMsgCount"];
}
return self;
}

- (id<ISocialServiceGetNewMsgCount>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_getNewMsgCount_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
getNewMsgCount_args * args = [[getNewMsgCount_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
GetNewMsgCount_result * result = [[GetNewMsgCount_result alloc] init];
[result setSuccess: [mService getNewMsgCount]];
[outProtocol writeMessageBeginWithName: @"getNewMsgCount"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) dealloc
{
[mService release_stub];
[mMethodMap release_stub];
[super dealloc_stub];
}

@end

@interface getMessageList_args : NSObject <TBase, NSCoding> {
}

- (id) init;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

@end

@implementation getMessageList_args

- (id) init
{
self = [super init];
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"getMessageList_args"];
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"getMessageList_args("];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@interface GetMessageList_result : NSObject <TBase, NSCoding> {
NSMutableArray * __success;

BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSMutableArray * success;
#endif

- (id) init;
- (id) initWithSuccess: (NSMutableArray *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSMutableArray *) success;
- (void) setSuccess: (NSMutableArray *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation GetMessageList_result

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithSuccess: (NSMutableArray *) success
{
self = [super init];
__success = [success retain_stub];
__success_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"success"])
{
__success = [[decoder decodeObjectForKey: @"success"] retain_stub];
__success_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__success_isset)
{
[encoder encodeObject: __success forKey: @"success"];
}
}

- (void) dealloc
{
[__success release_stub];
[super dealloc_stub];
}

- (NSMutableArray *) success {
return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSMutableArray *) success {
[success retain_stub];
[__success release_stub];
__success = success;
__success_isset = YES;
}

- (BOOL) successIsSet {
return __success_isset;
}

- (void) unsetSuccess {
[__success release_stub];
__success = nil;
__success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 0:
if (fieldType == TType_LIST) {
int _size15;
[inProtocol readListBeginReturningElementType: NULL size: &_size15];
NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size15];
int _i16;
for (_i16 = 0; _i16 < _size15; ++_i16)
{
TMessageBox *_elem17 = [[TMessageBox alloc] init];
[_elem17 read: inProtocol];
[fieldValue addObject: _elem17];
[_elem17 release_stub];
}
[inProtocol readListEnd];
[self setSuccess: fieldValue];
[fieldValue release_stub];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"GetMessageList_result"];

if (__success_isset) {
if (__success != nil) {
[outProtocol writeFieldBeginWithName: @"success" type: TType_LIST fieldID: 0];
{
[outProtocol writeListBeginWithElementType: TType_STRUCT size: [__success count]];
int idx19;
for (idx19 = 0; idx19 < [__success count]; idx19++)
{
[[__success objectAtIndex: idx19] write: outProtocol];
}
[outProtocol writeListEnd];
}
[outProtocol writeFieldEnd];
}
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"GetMessageList_result("];
[ms appendString: @"success:"];
[ms appendFormat: @"%@", __success];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@implementation ISocialServiceGetMessageListClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
self = [super init];
inProtocol = [anInProtocol retain_stub];
outProtocol = [anOutProtocol retain_stub];
return self;
}

- (void) dealloc
{
[inProtocol release_stub];
[outProtocol release_stub];
[super dealloc_stub];
}

- (void) send_getMessageList
{
[outProtocol writeMessageBeginWithName: @"getMessageList" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"getMessageList_args"];
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
}

- (NSMutableArray *) recv_getMessageList
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
GetMessageList_result * result = [[[GetMessageList_result alloc] init] autorelease_stub];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"getMessageList failed: unknown result"];
}

- (NSMutableArray *) getMessageList
{
[self send_getMessageList];
return [self recv_getMessageList];
}

@end

@implementation ISocialServiceGetMessageListProcessor

- (id) initWithISocialServiceGetMessageList: (id <ISocialServiceGetMessageList>) service
{
self = [super init];
if (!self) {
  return nil;
}
mService = [service retain_stub];
mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
{
SEL s = @selector(process_getMessageList_withSequenceID:inProtocol:outProtocol:);
NSMethodSignature * sig = [self methodSignatureForSelector: s];
NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
[invocation setSelector: s];
[invocation retainArguments];
[mMethodMap setValue: invocation forKey: @"getMessageList"];
}
return self;
}

- (id<ISocialServiceGetMessageList>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_getMessageList_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
getMessageList_args * args = [[getMessageList_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
GetMessageList_result * result = [[GetMessageList_result alloc] init];
[result setSuccess: [mService getMessageList]];
[outProtocol writeMessageBeginWithName: @"getMessageList"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) dealloc
{
[mService release_stub];
[mMethodMap release_stub];
[super dealloc_stub];
}

@end

@interface addComment_args : NSObject <TBase, NSCoding> {
TComment * __comm;

BOOL __comm_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=comm, setter=setComm:) TComment * comm;
#endif

- (id) init;
- (id) initWithComm: (TComment *) comm;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (TComment *) comm;
- (void) setComm: (TComment *) comm;
#endif
- (BOOL) commIsSet;

@end

@implementation addComment_args

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithComm: (TComment *) comm
{
self = [super init];
__comm = [comm retain_stub];
__comm_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"comm"])
{
__comm = [[decoder decodeObjectForKey: @"comm"] retain_stub];
__comm_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__comm_isset)
{
[encoder encodeObject: __comm forKey: @"comm"];
}
}

- (void) dealloc
{
[__comm release_stub];
[super dealloc_stub];
}

- (TComment *) comm {
return [[__comm retain_stub] autorelease_stub];
}

- (void) setComm: (TComment *) comm {
[comm retain_stub];
[__comm release_stub];
__comm = comm;
__comm_isset = YES;
}

- (BOOL) commIsSet {
return __comm_isset;
}

- (void) unsetComm {
[__comm release_stub];
__comm = nil;
__comm_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 1:
if (fieldType == TType_STRUCT) {
TComment *fieldValue = [[TComment alloc] init];
[fieldValue read: inProtocol];
[self setComm: fieldValue];
[fieldValue release_stub];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"addComment_args"];
if (__comm_isset) {
if (__comm != nil) {
[outProtocol writeFieldBeginWithName: @"comm" type: TType_STRUCT fieldID: 1];
[__comm write: outProtocol];
[outProtocol writeFieldEnd];
}
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"addComment_args("];
[ms appendString: @"comm:"];
[ms appendFormat: @"%@", __comm];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@interface AddComment_result : NSObject <TBase, NSCoding> {
int32_t __success;

BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) int32_t success;
#endif

- (id) init;
- (id) initWithSuccess: (int32_t) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (int32_t) success;
- (void) setSuccess: (int32_t) success;
#endif
- (BOOL) successIsSet;

@end

@implementation AddComment_result

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithSuccess: (int32_t) success
{
self = [super init];
__success = success;
__success_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"success"])
{
__success = [decoder decodeInt32ForKey: @"success"];
__success_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__success_isset)
{
[encoder encodeInt32: __success forKey: @"success"];
}
}

- (void) dealloc
{
[super dealloc_stub];
}

- (int32_t) success {
return __success;
}

- (void) setSuccess: (int32_t) success {
__success = success;
__success_isset = YES;
}

- (BOOL) successIsSet {
return __success_isset;
}

- (void) unsetSuccess {
__success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 0:
if (fieldType == TType_I32) {
int32_t fieldValue = [inProtocol readI32];
[self setSuccess: fieldValue];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"AddComment_result"];

if (__success_isset) {
[outProtocol writeFieldBeginWithName: @"success" type: TType_I32 fieldID: 0];
[outProtocol writeI32: __success];
[outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"AddComment_result("];
[ms appendString: @"success:"];
[ms appendFormat: @"%i", __success];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@implementation ISocialServiceAddCommentClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
self = [super init];
inProtocol = [anInProtocol retain_stub];
outProtocol = [anOutProtocol retain_stub];
return self;
}

- (void) dealloc
{
[inProtocol release_stub];
[outProtocol release_stub];
[super dealloc_stub];
}

- (void) send_addComment: (TComment *) comm
{
[outProtocol writeMessageBeginWithName: @"addComment" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"addComment_args"];
if (comm != nil){
[outProtocol writeFieldBeginWithName: @"comm" type: TType_STRUCT fieldID: 1];
[comm write: outProtocol];
[outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
}

- (int32_t) recv_addComment
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
AddComment_result * result = [[[AddComment_result alloc] init] autorelease_stub];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"addComment failed: unknown result"];
}

- (int32_t) addComment: (TComment *) comm
{
[self send_addComment : comm];
return [self recv_addComment];
}

@end

@implementation ISocialServiceAddCommentProcessor

- (id) initWithISocialServiceAddComment: (id <ISocialServiceAddComment>) service
{
self = [super init];
if (!self) {
  return nil;
}
mService = [service retain_stub];
mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
{
SEL s = @selector(process_addComment_withSequenceID:inProtocol:outProtocol:);
NSMethodSignature * sig = [self methodSignatureForSelector: s];
NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
[invocation setSelector: s];
[invocation retainArguments];
[mMethodMap setValue: invocation forKey: @"addComment"];
}
return self;
}

- (id<ISocialServiceAddComment>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_addComment_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
addComment_args * args = [[addComment_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
AddComment_result * result = [[AddComment_result alloc] init];
[result setSuccess: [mService addComment: [args comm]]];
[outProtocol writeMessageBeginWithName: @"addComment"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) dealloc
{
[mService release_stub];
[mMethodMap release_stub];
[super dealloc_stub];
}

@end

@interface deleteComment_args : NSObject <TBase, NSCoding> {
int32_t __id;

BOOL __id_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=id, setter=setId:) int32_t id;
#endif

- (id) init;
- (id) initWithId: (int32_t) id;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (int32_t) id;
- (void) setId: (int32_t) id;
#endif
- (BOOL) idIsSet;

@end

@implementation deleteComment_args

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithId: (int32_t) id
{
self = [super init];
__id = id;
__id_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"id"])
{
__id = [decoder decodeInt32ForKey: @"id"];
__id_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__id_isset)
{
[encoder encodeInt32: __id forKey: @"id"];
}
}

- (void) dealloc
{
[super dealloc_stub];
}

- (int32_t) id {
return __id;
}

- (void) setId: (int32_t) id {
__id = id;
__id_isset = YES;
}

- (BOOL) idIsSet {
return __id_isset;
}

- (void) unsetId {
__id_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 1:
if (fieldType == TType_I32) {
int32_t fieldValue = [inProtocol readI32];
[self setId: fieldValue];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"deleteComment_args"];
if (__id_isset) {
[outProtocol writeFieldBeginWithName: @"id" type: TType_I32 fieldID: 1];
[outProtocol writeI32: __id];
[outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"deleteComment_args("];
[ms appendString: @"id:"];
[ms appendFormat: @"%i", __id];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@interface DeleteComment_result : NSObject <TBase, NSCoding> {
BOOL __success;

BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) init;
- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BOOL) success;
- (void) setSuccess: (BOOL) success;
#endif
- (BOOL) successIsSet;

@end

@implementation DeleteComment_result

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithSuccess: (BOOL) success
{
self = [super init];
__success = success;
__success_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"success"])
{
__success = [decoder decodeBoolForKey: @"success"];
__success_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__success_isset)
{
[encoder encodeBool: __success forKey: @"success"];
}
}

- (void) dealloc
{
[super dealloc_stub];
}

- (BOOL) success {
return __success;
}

- (void) setSuccess: (BOOL) success {
__success = success;
__success_isset = YES;
}

- (BOOL) successIsSet {
return __success_isset;
}

- (void) unsetSuccess {
__success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 0:
if (fieldType == TType_BOOL) {
BOOL fieldValue = [inProtocol readBool];
[self setSuccess: fieldValue];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"DeleteComment_result"];

if (__success_isset) {
[outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
[outProtocol writeBool: __success];
[outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"DeleteComment_result("];
[ms appendString: @"success:"];
[ms appendFormat: @"%i", __success];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@implementation ISocialServiceDeleteCommentClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
self = [super init];
inProtocol = [anInProtocol retain_stub];
outProtocol = [anOutProtocol retain_stub];
return self;
}

- (void) dealloc
{
[inProtocol release_stub];
[outProtocol release_stub];
[super dealloc_stub];
}

- (void) send_deleteComment: (int32_t) id
{
[outProtocol writeMessageBeginWithName: @"deleteComment" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"deleteComment_args"];
[outProtocol writeFieldBeginWithName: @"id" type: TType_I32 fieldID: 1];
[outProtocol writeI32: id];
[outProtocol writeFieldEnd];
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
}

- (BOOL) recv_deleteComment
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
DeleteComment_result * result = [[[DeleteComment_result alloc] init] autorelease_stub];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"deleteComment failed: unknown result"];
}

- (BOOL) deleteComment: (int32_t) id
{
[self send_deleteComment : id];
return [self recv_deleteComment];
}

@end

@implementation ISocialServiceDeleteCommentProcessor

- (id) initWithISocialServiceDeleteComment: (id <ISocialServiceDeleteComment>) service
{
self = [super init];
if (!self) {
  return nil;
}
mService = [service retain_stub];
mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
{
SEL s = @selector(process_deleteComment_withSequenceID:inProtocol:outProtocol:);
NSMethodSignature * sig = [self methodSignatureForSelector: s];
NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
[invocation setSelector: s];
[invocation retainArguments];
[mMethodMap setValue: invocation forKey: @"deleteComment"];
}
return self;
}

- (id<ISocialServiceDeleteComment>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_deleteComment_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
deleteComment_args * args = [[deleteComment_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
DeleteComment_result * result = [[DeleteComment_result alloc] init];
[result setSuccess: [mService deleteComment: [args id]]];
[outProtocol writeMessageBeginWithName: @"deleteComment"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) dealloc
{
[mService release_stub];
[mMethodMap release_stub];
[super dealloc_stub];
}

@end

@interface getCommentList_args : NSObject <TBase, NSCoding> {
int32_t __postId;
int32_t __currentPage;
int32_t __pageSize;

BOOL __postId_isset;
BOOL __currentPage_isset;
BOOL __pageSize_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=postId, setter=setPostId:) int32_t postId;
@property (nonatomic, getter=currentPage, setter=setCurrentPage:) int32_t currentPage;
@property (nonatomic, getter=pageSize, setter=setPageSize:) int32_t pageSize;
#endif

- (id) init;
- (id) initWithPostId: (int32_t) postId currentPage: (int32_t) currentPage pageSize: (int32_t) pageSize;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (int32_t) postId;
- (void) setPostId: (int32_t) postId;
#endif
- (BOOL) postIdIsSet;

#if !__has_feature(objc_arc)
- (int32_t) currentPage;
- (void) setCurrentPage: (int32_t) currentPage;
#endif
- (BOOL) currentPageIsSet;

#if !__has_feature(objc_arc)
- (int32_t) pageSize;
- (void) setPageSize: (int32_t) pageSize;
#endif
- (BOOL) pageSizeIsSet;

@end

@implementation getCommentList_args

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithPostId: (int32_t) postId currentPage: (int32_t) currentPage pageSize: (int32_t) pageSize
{
self = [super init];
__postId = postId;
__postId_isset = YES;
__currentPage = currentPage;
__currentPage_isset = YES;
__pageSize = pageSize;
__pageSize_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"postId"])
{
__postId = [decoder decodeInt32ForKey: @"postId"];
__postId_isset = YES;
}
if ([decoder containsValueForKey: @"currentPage"])
{
__currentPage = [decoder decodeInt32ForKey: @"currentPage"];
__currentPage_isset = YES;
}
if ([decoder containsValueForKey: @"pageSize"])
{
__pageSize = [decoder decodeInt32ForKey: @"pageSize"];
__pageSize_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__postId_isset)
{
[encoder encodeInt32: __postId forKey: @"postId"];
}
if (__currentPage_isset)
{
[encoder encodeInt32: __currentPage forKey: @"currentPage"];
}
if (__pageSize_isset)
{
[encoder encodeInt32: __pageSize forKey: @"pageSize"];
}
}

- (void) dealloc
{
[super dealloc_stub];
}

- (int32_t) postId {
return __postId;
}

- (void) setPostId: (int32_t) postId {
__postId = postId;
__postId_isset = YES;
}

- (BOOL) postIdIsSet {
return __postId_isset;
}

- (void) unsetPostId {
__postId_isset = NO;
}

- (int32_t) currentPage {
return __currentPage;
}

- (void) setCurrentPage: (int32_t) currentPage {
__currentPage = currentPage;
__currentPage_isset = YES;
}

- (BOOL) currentPageIsSet {
return __currentPage_isset;
}

- (void) unsetCurrentPage {
__currentPage_isset = NO;
}

- (int32_t) pageSize {
return __pageSize;
}

- (void) setPageSize: (int32_t) pageSize {
__pageSize = pageSize;
__pageSize_isset = YES;
}

- (BOOL) pageSizeIsSet {
return __pageSize_isset;
}

- (void) unsetPageSize {
__pageSize_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 1:
if (fieldType == TType_I32) {
int32_t fieldValue = [inProtocol readI32];
[self setPostId: fieldValue];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
case 2:
if (fieldType == TType_I32) {
int32_t fieldValue = [inProtocol readI32];
[self setCurrentPage: fieldValue];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
case 3:
if (fieldType == TType_I32) {
int32_t fieldValue = [inProtocol readI32];
[self setPageSize: fieldValue];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"getCommentList_args"];
if (__postId_isset) {
[outProtocol writeFieldBeginWithName: @"postId" type: TType_I32 fieldID: 1];
[outProtocol writeI32: __postId];
[outProtocol writeFieldEnd];
}
if (__currentPage_isset) {
[outProtocol writeFieldBeginWithName: @"currentPage" type: TType_I32 fieldID: 2];
[outProtocol writeI32: __currentPage];
[outProtocol writeFieldEnd];
}
if (__pageSize_isset) {
[outProtocol writeFieldBeginWithName: @"pageSize" type: TType_I32 fieldID: 3];
[outProtocol writeI32: __pageSize];
[outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"getCommentList_args("];
[ms appendString: @"postId:"];
[ms appendFormat: @"%i", __postId];
[ms appendString: @",currentPage:"];
[ms appendFormat: @"%i", __currentPage];
[ms appendString: @",pageSize:"];
[ms appendFormat: @"%i", __pageSize];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@interface GetCommentList_result : NSObject <TBase, NSCoding> {
NSMutableArray * __success;

BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSMutableArray * success;
#endif

- (id) init;
- (id) initWithSuccess: (NSMutableArray *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSMutableArray *) success;
- (void) setSuccess: (NSMutableArray *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation GetCommentList_result

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithSuccess: (NSMutableArray *) success
{
self = [super init];
__success = [success retain_stub];
__success_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"success"])
{
__success = [[decoder decodeObjectForKey: @"success"] retain_stub];
__success_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__success_isset)
{
[encoder encodeObject: __success forKey: @"success"];
}
}

- (void) dealloc
{
[__success release_stub];
[super dealloc_stub];
}

- (NSMutableArray *) success {
return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSMutableArray *) success {
[success retain_stub];
[__success release_stub];
__success = success;
__success_isset = YES;
}

- (BOOL) successIsSet {
return __success_isset;
}

- (void) unsetSuccess {
[__success release_stub];
__success = nil;
__success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 0:
if (fieldType == TType_LIST) {
int _size20;
[inProtocol readListBeginReturningElementType: NULL size: &_size20];
NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size20];
int _i21;
for (_i21 = 0; _i21 < _size20; ++_i21)
{
TComment *_elem22 = [[TComment alloc] init];
[_elem22 read: inProtocol];
[fieldValue addObject: _elem22];
[_elem22 release_stub];
}
[inProtocol readListEnd];
[self setSuccess: fieldValue];
[fieldValue release_stub];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"GetCommentList_result"];

if (__success_isset) {
if (__success != nil) {
[outProtocol writeFieldBeginWithName: @"success" type: TType_LIST fieldID: 0];
{
[outProtocol writeListBeginWithElementType: TType_STRUCT size: [__success count]];
int idx24;
for (idx24 = 0; idx24 < [__success count]; idx24++)
{
[[__success objectAtIndex: idx24] write: outProtocol];
}
[outProtocol writeListEnd];
}
[outProtocol writeFieldEnd];
}
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"GetCommentList_result("];
[ms appendString: @"success:"];
[ms appendFormat: @"%@", __success];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@implementation ISocialServiceGetCommentListClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
self = [super init];
inProtocol = [anInProtocol retain_stub];
outProtocol = [anOutProtocol retain_stub];
return self;
}

- (void) dealloc
{
[inProtocol release_stub];
[outProtocol release_stub];
[super dealloc_stub];
}

- (void) send_getCommentList: (int32_t) postId currentPage: (int32_t) currentPage pageSize: (int32_t) pageSize
{
[outProtocol writeMessageBeginWithName: @"getCommentList" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"getCommentList_args"];
[outProtocol writeFieldBeginWithName: @"postId" type: TType_I32 fieldID: 1];
[outProtocol writeI32: postId];
[outProtocol writeFieldEnd];
[outProtocol writeFieldBeginWithName: @"currentPage" type: TType_I32 fieldID: 2];
[outProtocol writeI32: currentPage];
[outProtocol writeFieldEnd];
[outProtocol writeFieldBeginWithName: @"pageSize" type: TType_I32 fieldID: 3];
[outProtocol writeI32: pageSize];
[outProtocol writeFieldEnd];
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
}

- (NSMutableArray *) recv_getCommentList
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
GetCommentList_result * result = [[[GetCommentList_result alloc] init] autorelease_stub];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"getCommentList failed: unknown result"];
}

- (NSMutableArray *) getCommentList: (int32_t) postId currentPage: (int32_t) currentPage pageSize: (int32_t) pageSize
{
[self send_getCommentList : postId currentPage: currentPage pageSize: pageSize];
return [self recv_getCommentList];
}

@end

@implementation ISocialServiceGetCommentListProcessor

- (id) initWithISocialServiceGetCommentList: (id <ISocialServiceGetCommentList>) service
{
self = [super init];
if (!self) {
  return nil;
}
mService = [service retain_stub];
mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
{
SEL s = @selector(process_getCommentList_withSequenceID:inProtocol:outProtocol:);
NSMethodSignature * sig = [self methodSignatureForSelector: s];
NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
[invocation setSelector: s];
[invocation retainArguments];
[mMethodMap setValue: invocation forKey: @"getCommentList"];
}
return self;
}

- (id<ISocialServiceGetCommentList>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_getCommentList_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
getCommentList_args * args = [[getCommentList_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
GetCommentList_result * result = [[GetCommentList_result alloc] init];
[result setSuccess: [mService getCommentList: [args postId] currentPage: [args currentPage] pageSize: [args pageSize]]];
[outProtocol writeMessageBeginWithName: @"getCommentList"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) dealloc
{
[mService release_stub];
[mMethodMap release_stub];
[super dealloc_stub];
}

@end

@interface addPostInform_args : NSObject <TBase, NSCoding> {
int32_t __postId;
NSString * __content;

BOOL __postId_isset;
BOOL __content_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=postId, setter=setPostId:) int32_t postId;
@property (nonatomic, retain, getter=content, setter=setContent:) NSString * content;
#endif

- (id) init;
- (id) initWithPostId: (int32_t) postId content: (NSString *) content;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (int32_t) postId;
- (void) setPostId: (int32_t) postId;
#endif
- (BOOL) postIdIsSet;

#if !__has_feature(objc_arc)
- (NSString *) content;
- (void) setContent: (NSString *) content;
#endif
- (BOOL) contentIsSet;

@end

@implementation addPostInform_args

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithPostId: (int32_t) postId content: (NSString *) content
{
self = [super init];
__postId = postId;
__postId_isset = YES;
__content = [content retain_stub];
__content_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"postId"])
{
__postId = [decoder decodeInt32ForKey: @"postId"];
__postId_isset = YES;
}
if ([decoder containsValueForKey: @"content"])
{
__content = [[decoder decodeObjectForKey: @"content"] retain_stub];
__content_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__postId_isset)
{
[encoder encodeInt32: __postId forKey: @"postId"];
}
if (__content_isset)
{
[encoder encodeObject: __content forKey: @"content"];
}
}

- (void) dealloc
{
[__content release_stub];
[super dealloc_stub];
}

- (int32_t) postId {
return __postId;
}

- (void) setPostId: (int32_t) postId {
__postId = postId;
__postId_isset = YES;
}

- (BOOL) postIdIsSet {
return __postId_isset;
}

- (void) unsetPostId {
__postId_isset = NO;
}

- (NSString *) content {
return [[__content retain_stub] autorelease_stub];
}

- (void) setContent: (NSString *) content {
[content retain_stub];
[__content release_stub];
__content = content;
__content_isset = YES;
}

- (BOOL) contentIsSet {
return __content_isset;
}

- (void) unsetContent {
[__content release_stub];
__content = nil;
__content_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 1:
if (fieldType == TType_I32) {
int32_t fieldValue = [inProtocol readI32];
[self setPostId: fieldValue];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
case 2:
if (fieldType == TType_STRING) {
NSString * fieldValue = [inProtocol readString];
[self setContent: fieldValue];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"addPostInform_args"];
if (__postId_isset) {
[outProtocol writeFieldBeginWithName: @"postId" type: TType_I32 fieldID: 1];
[outProtocol writeI32: __postId];
[outProtocol writeFieldEnd];
}
if (__content_isset) {
if (__content != nil) {
[outProtocol writeFieldBeginWithName: @"content" type: TType_STRING fieldID: 2];
[outProtocol writeString: __content];
[outProtocol writeFieldEnd];
}
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"addPostInform_args("];
[ms appendString: @"postId:"];
[ms appendFormat: @"%i", __postId];
[ms appendString: @",content:"];
[ms appendFormat: @"\"%@\"", __content];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@interface AddPostInform_result : NSObject <TBase, NSCoding> {
BOOL __success;

BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) init;
- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BOOL) success;
- (void) setSuccess: (BOOL) success;
#endif
- (BOOL) successIsSet;

@end

@implementation AddPostInform_result

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithSuccess: (BOOL) success
{
self = [super init];
__success = success;
__success_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"success"])
{
__success = [decoder decodeBoolForKey: @"success"];
__success_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__success_isset)
{
[encoder encodeBool: __success forKey: @"success"];
}
}

- (void) dealloc
{
[super dealloc_stub];
}

- (BOOL) success {
return __success;
}

- (void) setSuccess: (BOOL) success {
__success = success;
__success_isset = YES;
}

- (BOOL) successIsSet {
return __success_isset;
}

- (void) unsetSuccess {
__success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 0:
if (fieldType == TType_BOOL) {
BOOL fieldValue = [inProtocol readBool];
[self setSuccess: fieldValue];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"AddPostInform_result"];

if (__success_isset) {
[outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
[outProtocol writeBool: __success];
[outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"AddPostInform_result("];
[ms appendString: @"success:"];
[ms appendFormat: @"%i", __success];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@implementation ISocialServiceAddPostInformClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
self = [super init];
inProtocol = [anInProtocol retain_stub];
outProtocol = [anOutProtocol retain_stub];
return self;
}

- (void) dealloc
{
[inProtocol release_stub];
[outProtocol release_stub];
[super dealloc_stub];
}

- (void) send_addPostInform: (int32_t) postId content: (NSString *) content
{
[outProtocol writeMessageBeginWithName: @"addPostInform" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"addPostInform_args"];
[outProtocol writeFieldBeginWithName: @"postId" type: TType_I32 fieldID: 1];
[outProtocol writeI32: postId];
[outProtocol writeFieldEnd];
if (content != nil){
[outProtocol writeFieldBeginWithName: @"content" type: TType_STRING fieldID: 2];
[outProtocol writeString: content];
[outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
}

- (BOOL) recv_addPostInform
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
AddPostInform_result * result = [[[AddPostInform_result alloc] init] autorelease_stub];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"addPostInform failed: unknown result"];
}

- (BOOL) addPostInform: (int32_t) postId content: (NSString *) content
{
[self send_addPostInform : postId content: content];
return [self recv_addPostInform];
}

@end

@implementation ISocialServiceAddPostInformProcessor

- (id) initWithISocialServiceAddPostInform: (id <ISocialServiceAddPostInform>) service
{
self = [super init];
if (!self) {
  return nil;
}
mService = [service retain_stub];
mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
{
SEL s = @selector(process_addPostInform_withSequenceID:inProtocol:outProtocol:);
NSMethodSignature * sig = [self methodSignatureForSelector: s];
NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
[invocation setSelector: s];
[invocation retainArguments];
[mMethodMap setValue: invocation forKey: @"addPostInform"];
}
return self;
}

- (id<ISocialServiceAddPostInform>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_addPostInform_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
addPostInform_args * args = [[addPostInform_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
AddPostInform_result * result = [[AddPostInform_result alloc] init];
[result setSuccess: [mService addPostInform: [args postId] content: [args content]]];
[outProtocol writeMessageBeginWithName: @"addPostInform"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) dealloc
{
[mService release_stub];
[mMethodMap release_stub];
[super dealloc_stub];
}

@end

@interface addPraise_args : NSObject <TBase, NSCoding> {
int32_t __postId;
int64_t __postUserId;

BOOL __postId_isset;
BOOL __postUserId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=postId, setter=setPostId:) int32_t postId;
@property (nonatomic, getter=postUserId, setter=setPostUserId:) int64_t postUserId;
#endif

- (id) init;
- (id) initWithPostId: (int32_t) postId postUserId: (int64_t) postUserId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (int32_t) postId;
- (void) setPostId: (int32_t) postId;
#endif
- (BOOL) postIdIsSet;

#if !__has_feature(objc_arc)
- (int64_t) postUserId;
- (void) setPostUserId: (int64_t) postUserId;
#endif
- (BOOL) postUserIdIsSet;

@end

@implementation addPraise_args

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithPostId: (int32_t) postId postUserId: (int64_t) postUserId
{
self = [super init];
__postId = postId;
__postId_isset = YES;
__postUserId = postUserId;
__postUserId_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"postId"])
{
__postId = [decoder decodeInt32ForKey: @"postId"];
__postId_isset = YES;
}
if ([decoder containsValueForKey: @"postUserId"])
{
__postUserId = [decoder decodeInt64ForKey: @"postUserId"];
__postUserId_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__postId_isset)
{
[encoder encodeInt32: __postId forKey: @"postId"];
}
if (__postUserId_isset)
{
[encoder encodeInt64: __postUserId forKey: @"postUserId"];
}
}

- (void) dealloc
{
[super dealloc_stub];
}

- (int32_t) postId {
return __postId;
}

- (void) setPostId: (int32_t) postId {
__postId = postId;
__postId_isset = YES;
}

- (BOOL) postIdIsSet {
return __postId_isset;
}

- (void) unsetPostId {
__postId_isset = NO;
}

- (int64_t) postUserId {
return __postUserId;
}

- (void) setPostUserId: (int64_t) postUserId {
__postUserId = postUserId;
__postUserId_isset = YES;
}

- (BOOL) postUserIdIsSet {
return __postUserId_isset;
}

- (void) unsetPostUserId {
__postUserId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 1:
if (fieldType == TType_I32) {
int32_t fieldValue = [inProtocol readI32];
[self setPostId: fieldValue];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
case 2:
if (fieldType == TType_I64) {
int64_t fieldValue = [inProtocol readI64];
[self setPostUserId: fieldValue];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"addPraise_args"];
if (__postId_isset) {
[outProtocol writeFieldBeginWithName: @"postId" type: TType_I32 fieldID: 1];
[outProtocol writeI32: __postId];
[outProtocol writeFieldEnd];
}
if (__postUserId_isset) {
[outProtocol writeFieldBeginWithName: @"postUserId" type: TType_I64 fieldID: 2];
[outProtocol writeI64: __postUserId];
[outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"addPraise_args("];
[ms appendString: @"postId:"];
[ms appendFormat: @"%i", __postId];
[ms appendString: @",postUserId:"];
[ms appendFormat: @"%qi", __postUserId];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@interface AddPraise_result : NSObject <TBase, NSCoding> {
BOOL __success;

BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) init;
- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BOOL) success;
- (void) setSuccess: (BOOL) success;
#endif
- (BOOL) successIsSet;

@end

@implementation AddPraise_result

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithSuccess: (BOOL) success
{
self = [super init];
__success = success;
__success_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"success"])
{
__success = [decoder decodeBoolForKey: @"success"];
__success_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__success_isset)
{
[encoder encodeBool: __success forKey: @"success"];
}
}

- (void) dealloc
{
[super dealloc_stub];
}

- (BOOL) success {
return __success;
}

- (void) setSuccess: (BOOL) success {
__success = success;
__success_isset = YES;
}

- (BOOL) successIsSet {
return __success_isset;
}

- (void) unsetSuccess {
__success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 0:
if (fieldType == TType_BOOL) {
BOOL fieldValue = [inProtocol readBool];
[self setSuccess: fieldValue];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"AddPraise_result"];

if (__success_isset) {
[outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
[outProtocol writeBool: __success];
[outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"AddPraise_result("];
[ms appendString: @"success:"];
[ms appendFormat: @"%i", __success];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@implementation ISocialServiceAddPraiseClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
self = [super init];
inProtocol = [anInProtocol retain_stub];
outProtocol = [anOutProtocol retain_stub];
return self;
}

- (void) dealloc
{
[inProtocol release_stub];
[outProtocol release_stub];
[super dealloc_stub];
}

- (void) send_addPraise: (int32_t) postId postUserId: (int64_t) postUserId
{
[outProtocol writeMessageBeginWithName: @"addPraise" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"addPraise_args"];
[outProtocol writeFieldBeginWithName: @"postId" type: TType_I32 fieldID: 1];
[outProtocol writeI32: postId];
[outProtocol writeFieldEnd];
[outProtocol writeFieldBeginWithName: @"postUserId" type: TType_I64 fieldID: 2];
[outProtocol writeI64: postUserId];
[outProtocol writeFieldEnd];
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
}

- (BOOL) recv_addPraise
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
AddPraise_result * result = [[[AddPraise_result alloc] init] autorelease_stub];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"addPraise failed: unknown result"];
}

- (BOOL) addPraise: (int32_t) postId postUserId: (int64_t) postUserId
{
[self send_addPraise : postId postUserId: postUserId];
return [self recv_addPraise];
}

@end

@implementation ISocialServiceAddPraiseProcessor

- (id) initWithISocialServiceAddPraise: (id <ISocialServiceAddPraise>) service
{
self = [super init];
if (!self) {
  return nil;
}
mService = [service retain_stub];
mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
{
SEL s = @selector(process_addPraise_withSequenceID:inProtocol:outProtocol:);
NSMethodSignature * sig = [self methodSignatureForSelector: s];
NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
[invocation setSelector: s];
[invocation retainArguments];
[mMethodMap setValue: invocation forKey: @"addPraise"];
}
return self;
}

- (id<ISocialServiceAddPraise>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_addPraise_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
addPraise_args * args = [[addPraise_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
AddPraise_result * result = [[AddPraise_result alloc] init];
[result setSuccess: [mService addPraise: [args postId] postUserId: [args postUserId]]];
[outProtocol writeMessageBeginWithName: @"addPraise"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) dealloc
{
[mService release_stub];
[mMethodMap release_stub];
[super dealloc_stub];
}

@end

@interface cancelPraise_args : NSObject <TBase, NSCoding> {
int32_t __postId;

BOOL __postId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=postId, setter=setPostId:) int32_t postId;
#endif

- (id) init;
- (id) initWithPostId: (int32_t) postId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (int32_t) postId;
- (void) setPostId: (int32_t) postId;
#endif
- (BOOL) postIdIsSet;

@end

@implementation cancelPraise_args

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithPostId: (int32_t) postId
{
self = [super init];
__postId = postId;
__postId_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"postId"])
{
__postId = [decoder decodeInt32ForKey: @"postId"];
__postId_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__postId_isset)
{
[encoder encodeInt32: __postId forKey: @"postId"];
}
}

- (void) dealloc
{
[super dealloc_stub];
}

- (int32_t) postId {
return __postId;
}

- (void) setPostId: (int32_t) postId {
__postId = postId;
__postId_isset = YES;
}

- (BOOL) postIdIsSet {
return __postId_isset;
}

- (void) unsetPostId {
__postId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 1:
if (fieldType == TType_I32) {
int32_t fieldValue = [inProtocol readI32];
[self setPostId: fieldValue];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"cancelPraise_args"];
if (__postId_isset) {
[outProtocol writeFieldBeginWithName: @"postId" type: TType_I32 fieldID: 1];
[outProtocol writeI32: __postId];
[outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"cancelPraise_args("];
[ms appendString: @"postId:"];
[ms appendFormat: @"%i", __postId];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@interface CancelPraise_result : NSObject <TBase, NSCoding> {
BOOL __success;

BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) init;
- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BOOL) success;
- (void) setSuccess: (BOOL) success;
#endif
- (BOOL) successIsSet;

@end

@implementation CancelPraise_result

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithSuccess: (BOOL) success
{
self = [super init];
__success = success;
__success_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"success"])
{
__success = [decoder decodeBoolForKey: @"success"];
__success_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__success_isset)
{
[encoder encodeBool: __success forKey: @"success"];
}
}

- (void) dealloc
{
[super dealloc_stub];
}

- (BOOL) success {
return __success;
}

- (void) setSuccess: (BOOL) success {
__success = success;
__success_isset = YES;
}

- (BOOL) successIsSet {
return __success_isset;
}

- (void) unsetSuccess {
__success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 0:
if (fieldType == TType_BOOL) {
BOOL fieldValue = [inProtocol readBool];
[self setSuccess: fieldValue];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"CancelPraise_result"];

if (__success_isset) {
[outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
[outProtocol writeBool: __success];
[outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"CancelPraise_result("];
[ms appendString: @"success:"];
[ms appendFormat: @"%i", __success];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@implementation ISocialServiceCancelPraiseClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
self = [super init];
inProtocol = [anInProtocol retain_stub];
outProtocol = [anOutProtocol retain_stub];
return self;
}

- (void) dealloc
{
[inProtocol release_stub];
[outProtocol release_stub];
[super dealloc_stub];
}

- (void) send_cancelPraise: (int32_t) postId
{
[outProtocol writeMessageBeginWithName: @"cancelPraise" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"cancelPraise_args"];
[outProtocol writeFieldBeginWithName: @"postId" type: TType_I32 fieldID: 1];
[outProtocol writeI32: postId];
[outProtocol writeFieldEnd];
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
}

- (BOOL) recv_cancelPraise
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
CancelPraise_result * result = [[[CancelPraise_result alloc] init] autorelease_stub];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"cancelPraise failed: unknown result"];
}

- (BOOL) cancelPraise: (int32_t) postId
{
[self send_cancelPraise : postId];
return [self recv_cancelPraise];
}

@end

@implementation ISocialServiceCancelPraiseProcessor

- (id) initWithISocialServiceCancelPraise: (id <ISocialServiceCancelPraise>) service
{
self = [super init];
if (!self) {
  return nil;
}
mService = [service retain_stub];
mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
{
SEL s = @selector(process_cancelPraise_withSequenceID:inProtocol:outProtocol:);
NSMethodSignature * sig = [self methodSignatureForSelector: s];
NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
[invocation setSelector: s];
[invocation retainArguments];
[mMethodMap setValue: invocation forKey: @"cancelPraise"];
}
return self;
}

- (id<ISocialServiceCancelPraise>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_cancelPraise_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
cancelPraise_args * args = [[cancelPraise_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
CancelPraise_result * result = [[CancelPraise_result alloc] init];
[result setSuccess: [mService cancelPraise: [args postId]]];
[outProtocol writeMessageBeginWithName: @"cancelPraise"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) dealloc
{
[mService release_stub];
[mMethodMap release_stub];
[super dealloc_stub];
}

@end

@interface getPraiseList_args : NSObject <TBase, NSCoding> {
int32_t __postId;
int32_t __currentPage;
int32_t __pageSize;

BOOL __postId_isset;
BOOL __currentPage_isset;
BOOL __pageSize_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=postId, setter=setPostId:) int32_t postId;
@property (nonatomic, getter=currentPage, setter=setCurrentPage:) int32_t currentPage;
@property (nonatomic, getter=pageSize, setter=setPageSize:) int32_t pageSize;
#endif

- (id) init;
- (id) initWithPostId: (int32_t) postId currentPage: (int32_t) currentPage pageSize: (int32_t) pageSize;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (int32_t) postId;
- (void) setPostId: (int32_t) postId;
#endif
- (BOOL) postIdIsSet;

#if !__has_feature(objc_arc)
- (int32_t) currentPage;
- (void) setCurrentPage: (int32_t) currentPage;
#endif
- (BOOL) currentPageIsSet;

#if !__has_feature(objc_arc)
- (int32_t) pageSize;
- (void) setPageSize: (int32_t) pageSize;
#endif
- (BOOL) pageSizeIsSet;

@end

@implementation getPraiseList_args

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithPostId: (int32_t) postId currentPage: (int32_t) currentPage pageSize: (int32_t) pageSize
{
self = [super init];
__postId = postId;
__postId_isset = YES;
__currentPage = currentPage;
__currentPage_isset = YES;
__pageSize = pageSize;
__pageSize_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"postId"])
{
__postId = [decoder decodeInt32ForKey: @"postId"];
__postId_isset = YES;
}
if ([decoder containsValueForKey: @"currentPage"])
{
__currentPage = [decoder decodeInt32ForKey: @"currentPage"];
__currentPage_isset = YES;
}
if ([decoder containsValueForKey: @"pageSize"])
{
__pageSize = [decoder decodeInt32ForKey: @"pageSize"];
__pageSize_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__postId_isset)
{
[encoder encodeInt32: __postId forKey: @"postId"];
}
if (__currentPage_isset)
{
[encoder encodeInt32: __currentPage forKey: @"currentPage"];
}
if (__pageSize_isset)
{
[encoder encodeInt32: __pageSize forKey: @"pageSize"];
}
}

- (void) dealloc
{
[super dealloc_stub];
}

- (int32_t) postId {
return __postId;
}

- (void) setPostId: (int32_t) postId {
__postId = postId;
__postId_isset = YES;
}

- (BOOL) postIdIsSet {
return __postId_isset;
}

- (void) unsetPostId {
__postId_isset = NO;
}

- (int32_t) currentPage {
return __currentPage;
}

- (void) setCurrentPage: (int32_t) currentPage {
__currentPage = currentPage;
__currentPage_isset = YES;
}

- (BOOL) currentPageIsSet {
return __currentPage_isset;
}

- (void) unsetCurrentPage {
__currentPage_isset = NO;
}

- (int32_t) pageSize {
return __pageSize;
}

- (void) setPageSize: (int32_t) pageSize {
__pageSize = pageSize;
__pageSize_isset = YES;
}

- (BOOL) pageSizeIsSet {
return __pageSize_isset;
}

- (void) unsetPageSize {
__pageSize_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 1:
if (fieldType == TType_I32) {
int32_t fieldValue = [inProtocol readI32];
[self setPostId: fieldValue];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
case 2:
if (fieldType == TType_I32) {
int32_t fieldValue = [inProtocol readI32];
[self setCurrentPage: fieldValue];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
case 3:
if (fieldType == TType_I32) {
int32_t fieldValue = [inProtocol readI32];
[self setPageSize: fieldValue];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"getPraiseList_args"];
if (__postId_isset) {
[outProtocol writeFieldBeginWithName: @"postId" type: TType_I32 fieldID: 1];
[outProtocol writeI32: __postId];
[outProtocol writeFieldEnd];
}
if (__currentPage_isset) {
[outProtocol writeFieldBeginWithName: @"currentPage" type: TType_I32 fieldID: 2];
[outProtocol writeI32: __currentPage];
[outProtocol writeFieldEnd];
}
if (__pageSize_isset) {
[outProtocol writeFieldBeginWithName: @"pageSize" type: TType_I32 fieldID: 3];
[outProtocol writeI32: __pageSize];
[outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"getPraiseList_args("];
[ms appendString: @"postId:"];
[ms appendFormat: @"%i", __postId];
[ms appendString: @",currentPage:"];
[ms appendFormat: @"%i", __currentPage];
[ms appendString: @",pageSize:"];
[ms appendFormat: @"%i", __pageSize];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@interface GetPraiseList_result : NSObject <TBase, NSCoding> {
NSMutableArray * __success;

BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSMutableArray * success;
#endif

- (id) init;
- (id) initWithSuccess: (NSMutableArray *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSMutableArray *) success;
- (void) setSuccess: (NSMutableArray *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation GetPraiseList_result

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithSuccess: (NSMutableArray *) success
{
self = [super init];
__success = [success retain_stub];
__success_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"success"])
{
__success = [[decoder decodeObjectForKey: @"success"] retain_stub];
__success_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__success_isset)
{
[encoder encodeObject: __success forKey: @"success"];
}
}

- (void) dealloc
{
[__success release_stub];
[super dealloc_stub];
}

- (NSMutableArray *) success {
return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSMutableArray *) success {
[success retain_stub];
[__success release_stub];
__success = success;
__success_isset = YES;
}

- (BOOL) successIsSet {
return __success_isset;
}

- (void) unsetSuccess {
[__success release_stub];
__success = nil;
__success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 0:
if (fieldType == TType_LIST) {
int _size25;
[inProtocol readListBeginReturningElementType: NULL size: &_size25];
NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size25];
int _i26;
for (_i26 = 0; _i26 < _size25; ++_i26)
{
TPraise *_elem27 = [[TPraise alloc] init];
[_elem27 read: inProtocol];
[fieldValue addObject: _elem27];
[_elem27 release_stub];
}
[inProtocol readListEnd];
[self setSuccess: fieldValue];
[fieldValue release_stub];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"GetPraiseList_result"];

if (__success_isset) {
if (__success != nil) {
[outProtocol writeFieldBeginWithName: @"success" type: TType_LIST fieldID: 0];
{
[outProtocol writeListBeginWithElementType: TType_STRUCT size: [__success count]];
int idx29;
for (idx29 = 0; idx29 < [__success count]; idx29++)
{
[[__success objectAtIndex: idx29] write: outProtocol];
}
[outProtocol writeListEnd];
}
[outProtocol writeFieldEnd];
}
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"GetPraiseList_result("];
[ms appendString: @"success:"];
[ms appendFormat: @"%@", __success];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@implementation ISocialServiceGetPraiseListClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
self = [super init];
inProtocol = [anInProtocol retain_stub];
outProtocol = [anOutProtocol retain_stub];
return self;
}

- (void) dealloc
{
[inProtocol release_stub];
[outProtocol release_stub];
[super dealloc_stub];
}

- (void) send_getPraiseList: (int32_t) postId currentPage: (int32_t) currentPage pageSize: (int32_t) pageSize
{
[outProtocol writeMessageBeginWithName: @"getPraiseList" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"getPraiseList_args"];
[outProtocol writeFieldBeginWithName: @"postId" type: TType_I32 fieldID: 1];
[outProtocol writeI32: postId];
[outProtocol writeFieldEnd];
[outProtocol writeFieldBeginWithName: @"currentPage" type: TType_I32 fieldID: 2];
[outProtocol writeI32: currentPage];
[outProtocol writeFieldEnd];
[outProtocol writeFieldBeginWithName: @"pageSize" type: TType_I32 fieldID: 3];
[outProtocol writeI32: pageSize];
[outProtocol writeFieldEnd];
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
}

- (NSMutableArray *) recv_getPraiseList
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
GetPraiseList_result * result = [[[GetPraiseList_result alloc] init] autorelease_stub];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"getPraiseList failed: unknown result"];
}

- (NSMutableArray *) getPraiseList: (int32_t) postId currentPage: (int32_t) currentPage pageSize: (int32_t) pageSize
{
[self send_getPraiseList : postId currentPage: currentPage pageSize: pageSize];
return [self recv_getPraiseList];
}

@end

@implementation ISocialServiceGetPraiseListProcessor

- (id) initWithISocialServiceGetPraiseList: (id <ISocialServiceGetPraiseList>) service
{
self = [super init];
if (!self) {
  return nil;
}
mService = [service retain_stub];
mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
{
SEL s = @selector(process_getPraiseList_withSequenceID:inProtocol:outProtocol:);
NSMethodSignature * sig = [self methodSignatureForSelector: s];
NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
[invocation setSelector: s];
[invocation retainArguments];
[mMethodMap setValue: invocation forKey: @"getPraiseList"];
}
return self;
}

- (id<ISocialServiceGetPraiseList>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_getPraiseList_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
getPraiseList_args * args = [[getPraiseList_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
GetPraiseList_result * result = [[GetPraiseList_result alloc] init];
[result setSuccess: [mService getPraiseList: [args postId] currentPage: [args currentPage] pageSize: [args pageSize]]];
[outProtocol writeMessageBeginWithName: @"getPraiseList"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) dealloc
{
[mService release_stub];
[mMethodMap release_stub];
[super dealloc_stub];
}

@end

@interface addActivityApply_args : NSObject <TBase, NSCoding> {
int32_t __postId;

BOOL __postId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=postId, setter=setPostId:) int32_t postId;
#endif

- (id) init;
- (id) initWithPostId: (int32_t) postId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (int32_t) postId;
- (void) setPostId: (int32_t) postId;
#endif
- (BOOL) postIdIsSet;

@end

@implementation addActivityApply_args

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithPostId: (int32_t) postId
{
self = [super init];
__postId = postId;
__postId_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"postId"])
{
__postId = [decoder decodeInt32ForKey: @"postId"];
__postId_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__postId_isset)
{
[encoder encodeInt32: __postId forKey: @"postId"];
}
}

- (void) dealloc
{
[super dealloc_stub];
}

- (int32_t) postId {
return __postId;
}

- (void) setPostId: (int32_t) postId {
__postId = postId;
__postId_isset = YES;
}

- (BOOL) postIdIsSet {
return __postId_isset;
}

- (void) unsetPostId {
__postId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 1:
if (fieldType == TType_I32) {
int32_t fieldValue = [inProtocol readI32];
[self setPostId: fieldValue];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"addActivityApply_args"];
if (__postId_isset) {
[outProtocol writeFieldBeginWithName: @"postId" type: TType_I32 fieldID: 1];
[outProtocol writeI32: __postId];
[outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"addActivityApply_args("];
[ms appendString: @"postId:"];
[ms appendFormat: @"%i", __postId];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@interface AddActivityApply_result : NSObject <TBase, NSCoding> {
BOOL __success;

BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) init;
- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BOOL) success;
- (void) setSuccess: (BOOL) success;
#endif
- (BOOL) successIsSet;

@end

@implementation AddActivityApply_result

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithSuccess: (BOOL) success
{
self = [super init];
__success = success;
__success_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"success"])
{
__success = [decoder decodeBoolForKey: @"success"];
__success_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__success_isset)
{
[encoder encodeBool: __success forKey: @"success"];
}
}

- (void) dealloc
{
[super dealloc_stub];
}

- (BOOL) success {
return __success;
}

- (void) setSuccess: (BOOL) success {
__success = success;
__success_isset = YES;
}

- (BOOL) successIsSet {
return __success_isset;
}

- (void) unsetSuccess {
__success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 0:
if (fieldType == TType_BOOL) {
BOOL fieldValue = [inProtocol readBool];
[self setSuccess: fieldValue];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"AddActivityApply_result"];

if (__success_isset) {
[outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
[outProtocol writeBool: __success];
[outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"AddActivityApply_result("];
[ms appendString: @"success:"];
[ms appendFormat: @"%i", __success];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@implementation ISocialServiceAddActivityApplyClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
self = [super init];
inProtocol = [anInProtocol retain_stub];
outProtocol = [anOutProtocol retain_stub];
return self;
}

- (void) dealloc
{
[inProtocol release_stub];
[outProtocol release_stub];
[super dealloc_stub];
}

- (void) send_addActivityApply: (int32_t) postId
{
[outProtocol writeMessageBeginWithName: @"addActivityApply" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"addActivityApply_args"];
[outProtocol writeFieldBeginWithName: @"postId" type: TType_I32 fieldID: 1];
[outProtocol writeI32: postId];
[outProtocol writeFieldEnd];
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
}

- (BOOL) recv_addActivityApply
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
AddActivityApply_result * result = [[[AddActivityApply_result alloc] init] autorelease_stub];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"addActivityApply failed: unknown result"];
}

- (BOOL) addActivityApply: (int32_t) postId
{
[self send_addActivityApply : postId];
return [self recv_addActivityApply];
}

@end

@implementation ISocialServiceAddActivityApplyProcessor

- (id) initWithISocialServiceAddActivityApply: (id <ISocialServiceAddActivityApply>) service
{
self = [super init];
if (!self) {
  return nil;
}
mService = [service retain_stub];
mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
{
SEL s = @selector(process_addActivityApply_withSequenceID:inProtocol:outProtocol:);
NSMethodSignature * sig = [self methodSignatureForSelector: s];
NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
[invocation setSelector: s];
[invocation retainArguments];
[mMethodMap setValue: invocation forKey: @"addActivityApply"];
}
return self;
}

- (id<ISocialServiceAddActivityApply>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_addActivityApply_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
addActivityApply_args * args = [[addActivityApply_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
AddActivityApply_result * result = [[AddActivityApply_result alloc] init];
[result setSuccess: [mService addActivityApply: [args postId]]];
[outProtocol writeMessageBeginWithName: @"addActivityApply"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) dealloc
{
[mService release_stub];
[mMethodMap release_stub];
[super dealloc_stub];
}

@end

@interface cancelActivityApply_args : NSObject <TBase, NSCoding> {
int32_t __postId;

BOOL __postId_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=postId, setter=setPostId:) int32_t postId;
#endif

- (id) init;
- (id) initWithPostId: (int32_t) postId;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (int32_t) postId;
- (void) setPostId: (int32_t) postId;
#endif
- (BOOL) postIdIsSet;

@end

@implementation cancelActivityApply_args

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithPostId: (int32_t) postId
{
self = [super init];
__postId = postId;
__postId_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"postId"])
{
__postId = [decoder decodeInt32ForKey: @"postId"];
__postId_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__postId_isset)
{
[encoder encodeInt32: __postId forKey: @"postId"];
}
}

- (void) dealloc
{
[super dealloc_stub];
}

- (int32_t) postId {
return __postId;
}

- (void) setPostId: (int32_t) postId {
__postId = postId;
__postId_isset = YES;
}

- (BOOL) postIdIsSet {
return __postId_isset;
}

- (void) unsetPostId {
__postId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 1:
if (fieldType == TType_I32) {
int32_t fieldValue = [inProtocol readI32];
[self setPostId: fieldValue];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"cancelActivityApply_args"];
if (__postId_isset) {
[outProtocol writeFieldBeginWithName: @"postId" type: TType_I32 fieldID: 1];
[outProtocol writeI32: __postId];
[outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"cancelActivityApply_args("];
[ms appendString: @"postId:"];
[ms appendFormat: @"%i", __postId];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@interface CancelActivityApply_result : NSObject <TBase, NSCoding> {
BOOL __success;

BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) init;
- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (BOOL) success;
- (void) setSuccess: (BOOL) success;
#endif
- (BOOL) successIsSet;

@end

@implementation CancelActivityApply_result

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithSuccess: (BOOL) success
{
self = [super init];
__success = success;
__success_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"success"])
{
__success = [decoder decodeBoolForKey: @"success"];
__success_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__success_isset)
{
[encoder encodeBool: __success forKey: @"success"];
}
}

- (void) dealloc
{
[super dealloc_stub];
}

- (BOOL) success {
return __success;
}

- (void) setSuccess: (BOOL) success {
__success = success;
__success_isset = YES;
}

- (BOOL) successIsSet {
return __success_isset;
}

- (void) unsetSuccess {
__success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 0:
if (fieldType == TType_BOOL) {
BOOL fieldValue = [inProtocol readBool];
[self setSuccess: fieldValue];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"CancelActivityApply_result"];

if (__success_isset) {
[outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
[outProtocol writeBool: __success];
[outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"CancelActivityApply_result("];
[ms appendString: @"success:"];
[ms appendFormat: @"%i", __success];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@implementation ISocialServiceCancelActivityApplyClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
self = [super init];
inProtocol = [anInProtocol retain_stub];
outProtocol = [anOutProtocol retain_stub];
return self;
}

- (void) dealloc
{
[inProtocol release_stub];
[outProtocol release_stub];
[super dealloc_stub];
}

- (void) send_cancelActivityApply: (int32_t) postId
{
[outProtocol writeMessageBeginWithName: @"cancelActivityApply" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"cancelActivityApply_args"];
[outProtocol writeFieldBeginWithName: @"postId" type: TType_I32 fieldID: 1];
[outProtocol writeI32: postId];
[outProtocol writeFieldEnd];
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
}

- (BOOL) recv_cancelActivityApply
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
CancelActivityApply_result * result = [[[CancelActivityApply_result alloc] init] autorelease_stub];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"cancelActivityApply failed: unknown result"];
}

- (BOOL) cancelActivityApply: (int32_t) postId
{
[self send_cancelActivityApply : postId];
return [self recv_cancelActivityApply];
}

@end

@implementation ISocialServiceCancelActivityApplyProcessor

- (id) initWithISocialServiceCancelActivityApply: (id <ISocialServiceCancelActivityApply>) service
{
self = [super init];
if (!self) {
  return nil;
}
mService = [service retain_stub];
mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
{
SEL s = @selector(process_cancelActivityApply_withSequenceID:inProtocol:outProtocol:);
NSMethodSignature * sig = [self methodSignatureForSelector: s];
NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
[invocation setSelector: s];
[invocation retainArguments];
[mMethodMap setValue: invocation forKey: @"cancelActivityApply"];
}
return self;
}

- (id<ISocialServiceCancelActivityApply>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_cancelActivityApply_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
cancelActivityApply_args * args = [[cancelActivityApply_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
CancelActivityApply_result * result = [[CancelActivityApply_result alloc] init];
[result setSuccess: [mService cancelActivityApply: [args postId]]];
[outProtocol writeMessageBeginWithName: @"cancelActivityApply"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) dealloc
{
[mService release_stub];
[mMethodMap release_stub];
[super dealloc_stub];
}

@end

@interface getReasonList_args : NSObject <TBase, NSCoding> {
}

- (id) init;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

@end

@implementation getReasonList_args

- (id) init
{
self = [super init];
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"getReasonList_args"];
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"getReasonList_args("];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@interface GetReasonList_result : NSObject <TBase, NSCoding> {
NSMutableArray * __success;

BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSMutableArray * success;
#endif

- (id) init;
- (id) initWithSuccess: (NSMutableArray *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSMutableArray *) success;
- (void) setSuccess: (NSMutableArray *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation GetReasonList_result

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithSuccess: (NSMutableArray *) success
{
self = [super init];
__success = [success retain_stub];
__success_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"success"])
{
__success = [[decoder decodeObjectForKey: @"success"] retain_stub];
__success_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__success_isset)
{
[encoder encodeObject: __success forKey: @"success"];
}
}

- (void) dealloc
{
[__success release_stub];
[super dealloc_stub];
}

- (NSMutableArray *) success {
return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSMutableArray *) success {
[success retain_stub];
[__success release_stub];
__success = success;
__success_isset = YES;
}

- (BOOL) successIsSet {
return __success_isset;
}

- (void) unsetSuccess {
[__success release_stub];
__success = nil;
__success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 0:
if (fieldType == TType_LIST) {
int _size30;
[inProtocol readListBeginReturningElementType: NULL size: &_size30];
NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size30];
int _i31;
for (_i31 = 0; _i31 < _size30; ++_i31)
{
TReason *_elem32 = [[TReason alloc] init];
[_elem32 read: inProtocol];
[fieldValue addObject: _elem32];
[_elem32 release_stub];
}
[inProtocol readListEnd];
[self setSuccess: fieldValue];
[fieldValue release_stub];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"GetReasonList_result"];

if (__success_isset) {
if (__success != nil) {
[outProtocol writeFieldBeginWithName: @"success" type: TType_LIST fieldID: 0];
{
[outProtocol writeListBeginWithElementType: TType_STRUCT size: [__success count]];
int idx34;
for (idx34 = 0; idx34 < [__success count]; idx34++)
{
[[__success objectAtIndex: idx34] write: outProtocol];
}
[outProtocol writeListEnd];
}
[outProtocol writeFieldEnd];
}
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"GetReasonList_result("];
[ms appendString: @"success:"];
[ms appendFormat: @"%@", __success];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@implementation ISocialServiceGetReasonListClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
self = [super init];
inProtocol = [anInProtocol retain_stub];
outProtocol = [anOutProtocol retain_stub];
return self;
}

- (void) dealloc
{
[inProtocol release_stub];
[outProtocol release_stub];
[super dealloc_stub];
}

- (void) send_getReasonList
{
[outProtocol writeMessageBeginWithName: @"getReasonList" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"getReasonList_args"];
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
}

- (NSMutableArray *) recv_getReasonList
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
GetReasonList_result * result = [[[GetReasonList_result alloc] init] autorelease_stub];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"getReasonList failed: unknown result"];
}

- (NSMutableArray *) getReasonList
{
[self send_getReasonList];
return [self recv_getReasonList];
}

@end

@implementation ISocialServiceGetReasonListProcessor

- (id) initWithISocialServiceGetReasonList: (id <ISocialServiceGetReasonList>) service
{
self = [super init];
if (!self) {
  return nil;
}
mService = [service retain_stub];
mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
{
SEL s = @selector(process_getReasonList_withSequenceID:inProtocol:outProtocol:);
NSMethodSignature * sig = [self methodSignatureForSelector: s];
NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
[invocation setSelector: s];
[invocation retainArguments];
[mMethodMap setValue: invocation forKey: @"getReasonList"];
}
return self;
}

- (id<ISocialServiceGetReasonList>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_getReasonList_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
getReasonList_args * args = [[getReasonList_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
GetReasonList_result * result = [[GetReasonList_result alloc] init];
[result setSuccess: [mService getReasonList]];
[outProtocol writeMessageBeginWithName: @"getReasonList"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) dealloc
{
[mService release_stub];
[mMethodMap release_stub];
[super dealloc_stub];
}

@end

@interface getActivityApplyList_args : NSObject <TBase, NSCoding> {
int32_t __postId;
int32_t __currentPage;
int32_t __pageSize;

BOOL __postId_isset;
BOOL __currentPage_isset;
BOOL __pageSize_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=postId, setter=setPostId:) int32_t postId;
@property (nonatomic, getter=currentPage, setter=setCurrentPage:) int32_t currentPage;
@property (nonatomic, getter=pageSize, setter=setPageSize:) int32_t pageSize;
#endif

- (id) init;
- (id) initWithPostId: (int32_t) postId currentPage: (int32_t) currentPage pageSize: (int32_t) pageSize;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (int32_t) postId;
- (void) setPostId: (int32_t) postId;
#endif
- (BOOL) postIdIsSet;

#if !__has_feature(objc_arc)
- (int32_t) currentPage;
- (void) setCurrentPage: (int32_t) currentPage;
#endif
- (BOOL) currentPageIsSet;

#if !__has_feature(objc_arc)
- (int32_t) pageSize;
- (void) setPageSize: (int32_t) pageSize;
#endif
- (BOOL) pageSizeIsSet;

@end

@implementation getActivityApplyList_args

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithPostId: (int32_t) postId currentPage: (int32_t) currentPage pageSize: (int32_t) pageSize
{
self = [super init];
__postId = postId;
__postId_isset = YES;
__currentPage = currentPage;
__currentPage_isset = YES;
__pageSize = pageSize;
__pageSize_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"postId"])
{
__postId = [decoder decodeInt32ForKey: @"postId"];
__postId_isset = YES;
}
if ([decoder containsValueForKey: @"currentPage"])
{
__currentPage = [decoder decodeInt32ForKey: @"currentPage"];
__currentPage_isset = YES;
}
if ([decoder containsValueForKey: @"pageSize"])
{
__pageSize = [decoder decodeInt32ForKey: @"pageSize"];
__pageSize_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__postId_isset)
{
[encoder encodeInt32: __postId forKey: @"postId"];
}
if (__currentPage_isset)
{
[encoder encodeInt32: __currentPage forKey: @"currentPage"];
}
if (__pageSize_isset)
{
[encoder encodeInt32: __pageSize forKey: @"pageSize"];
}
}

- (void) dealloc
{
[super dealloc_stub];
}

- (int32_t) postId {
return __postId;
}

- (void) setPostId: (int32_t) postId {
__postId = postId;
__postId_isset = YES;
}

- (BOOL) postIdIsSet {
return __postId_isset;
}

- (void) unsetPostId {
__postId_isset = NO;
}

- (int32_t) currentPage {
return __currentPage;
}

- (void) setCurrentPage: (int32_t) currentPage {
__currentPage = currentPage;
__currentPage_isset = YES;
}

- (BOOL) currentPageIsSet {
return __currentPage_isset;
}

- (void) unsetCurrentPage {
__currentPage_isset = NO;
}

- (int32_t) pageSize {
return __pageSize;
}

- (void) setPageSize: (int32_t) pageSize {
__pageSize = pageSize;
__pageSize_isset = YES;
}

- (BOOL) pageSizeIsSet {
return __pageSize_isset;
}

- (void) unsetPageSize {
__pageSize_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 1:
if (fieldType == TType_I32) {
int32_t fieldValue = [inProtocol readI32];
[self setPostId: fieldValue];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
case 2:
if (fieldType == TType_I32) {
int32_t fieldValue = [inProtocol readI32];
[self setCurrentPage: fieldValue];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
case 3:
if (fieldType == TType_I32) {
int32_t fieldValue = [inProtocol readI32];
[self setPageSize: fieldValue];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"getActivityApplyList_args"];
if (__postId_isset) {
[outProtocol writeFieldBeginWithName: @"postId" type: TType_I32 fieldID: 1];
[outProtocol writeI32: __postId];
[outProtocol writeFieldEnd];
}
if (__currentPage_isset) {
[outProtocol writeFieldBeginWithName: @"currentPage" type: TType_I32 fieldID: 2];
[outProtocol writeI32: __currentPage];
[outProtocol writeFieldEnd];
}
if (__pageSize_isset) {
[outProtocol writeFieldBeginWithName: @"pageSize" type: TType_I32 fieldID: 3];
[outProtocol writeI32: __pageSize];
[outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"getActivityApplyList_args("];
[ms appendString: @"postId:"];
[ms appendFormat: @"%i", __postId];
[ms appendString: @",currentPage:"];
[ms appendFormat: @"%i", __currentPage];
[ms appendString: @",pageSize:"];
[ms appendFormat: @"%i", __pageSize];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@interface GetActivityApplyList_result : NSObject <TBase, NSCoding> {
NSMutableArray * __success;

BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSMutableArray * success;
#endif

- (id) init;
- (id) initWithSuccess: (NSMutableArray *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSMutableArray *) success;
- (void) setSuccess: (NSMutableArray *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation GetActivityApplyList_result

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithSuccess: (NSMutableArray *) success
{
self = [super init];
__success = [success retain_stub];
__success_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"success"])
{
__success = [[decoder decodeObjectForKey: @"success"] retain_stub];
__success_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__success_isset)
{
[encoder encodeObject: __success forKey: @"success"];
}
}

- (void) dealloc
{
[__success release_stub];
[super dealloc_stub];
}

- (NSMutableArray *) success {
return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSMutableArray *) success {
[success retain_stub];
[__success release_stub];
__success = success;
__success_isset = YES;
}

- (BOOL) successIsSet {
return __success_isset;
}

- (void) unsetSuccess {
[__success release_stub];
__success = nil;
__success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 0:
if (fieldType == TType_LIST) {
int _size35;
[inProtocol readListBeginReturningElementType: NULL size: &_size35];
NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size35];
int _i36;
for (_i36 = 0; _i36 < _size35; ++_i36)
{
TActivityApply *_elem37 = [[TActivityApply alloc] init];
[_elem37 read: inProtocol];
[fieldValue addObject: _elem37];
[_elem37 release_stub];
}
[inProtocol readListEnd];
[self setSuccess: fieldValue];
[fieldValue release_stub];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"GetActivityApplyList_result"];

if (__success_isset) {
if (__success != nil) {
[outProtocol writeFieldBeginWithName: @"success" type: TType_LIST fieldID: 0];
{
[outProtocol writeListBeginWithElementType: TType_STRUCT size: [__success count]];
int idx39;
for (idx39 = 0; idx39 < [__success count]; idx39++)
{
[[__success objectAtIndex: idx39] write: outProtocol];
}
[outProtocol writeListEnd];
}
[outProtocol writeFieldEnd];
}
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"GetActivityApplyList_result("];
[ms appendString: @"success:"];
[ms appendFormat: @"%@", __success];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@implementation ISocialServiceGetActivityApplyListClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
self = [super init];
inProtocol = [anInProtocol retain_stub];
outProtocol = [anOutProtocol retain_stub];
return self;
}

- (void) dealloc
{
[inProtocol release_stub];
[outProtocol release_stub];
[super dealloc_stub];
}

- (void) send_getActivityApplyList: (int32_t) postId currentPage: (int32_t) currentPage pageSize: (int32_t) pageSize
{
[outProtocol writeMessageBeginWithName: @"getActivityApplyList" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"getActivityApplyList_args"];
[outProtocol writeFieldBeginWithName: @"postId" type: TType_I32 fieldID: 1];
[outProtocol writeI32: postId];
[outProtocol writeFieldEnd];
[outProtocol writeFieldBeginWithName: @"currentPage" type: TType_I32 fieldID: 2];
[outProtocol writeI32: currentPage];
[outProtocol writeFieldEnd];
[outProtocol writeFieldBeginWithName: @"pageSize" type: TType_I32 fieldID: 3];
[outProtocol writeI32: pageSize];
[outProtocol writeFieldEnd];
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
}

- (NSMutableArray *) recv_getActivityApplyList
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
GetActivityApplyList_result * result = [[[GetActivityApplyList_result alloc] init] autorelease_stub];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"getActivityApplyList failed: unknown result"];
}

- (NSMutableArray *) getActivityApplyList: (int32_t) postId currentPage: (int32_t) currentPage pageSize: (int32_t) pageSize
{
[self send_getActivityApplyList : postId currentPage: currentPage pageSize: pageSize];
return [self recv_getActivityApplyList];
}

@end

@implementation ISocialServiceGetActivityApplyListProcessor

- (id) initWithISocialServiceGetActivityApplyList: (id <ISocialServiceGetActivityApplyList>) service
{
self = [super init];
if (!self) {
  return nil;
}
mService = [service retain_stub];
mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
{
SEL s = @selector(process_getActivityApplyList_withSequenceID:inProtocol:outProtocol:);
NSMethodSignature * sig = [self methodSignatureForSelector: s];
NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
[invocation setSelector: s];
[invocation retainArguments];
[mMethodMap setValue: invocation forKey: @"getActivityApplyList"];
}
return self;
}

- (id<ISocialServiceGetActivityApplyList>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_getActivityApplyList_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
getActivityApplyList_args * args = [[getActivityApplyList_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
GetActivityApplyList_result * result = [[GetActivityApplyList_result alloc] init];
[result setSuccess: [mService getActivityApplyList: [args postId] currentPage: [args currentPage] pageSize: [args pageSize]]];
[outProtocol writeMessageBeginWithName: @"getActivityApplyList"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) dealloc
{
[mService release_stub];
[mMethodMap release_stub];
[super dealloc_stub];
}

@end

@interface getPostInfoList_args : NSObject <TBase, NSCoding> {
NSString * __params;

BOOL __params_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=params, setter=setParams:) NSString * params;
#endif

- (id) init;
- (id) initWithParams: (NSString *) params;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) params;
- (void) setParams: (NSString *) params;
#endif
- (BOOL) paramsIsSet;

@end

@implementation getPostInfoList_args

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithParams: (NSString *) params
{
self = [super init];
__params = [params retain_stub];
__params_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"params"])
{
__params = [[decoder decodeObjectForKey: @"params"] retain_stub];
__params_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__params_isset)
{
[encoder encodeObject: __params forKey: @"params"];
}
}

- (void) dealloc
{
[__params release_stub];
[super dealloc_stub];
}

- (NSString *) params {
return [[__params retain_stub] autorelease_stub];
}

- (void) setParams: (NSString *) params {
[params retain_stub];
[__params release_stub];
__params = params;
__params_isset = YES;
}

- (BOOL) paramsIsSet {
return __params_isset;
}

- (void) unsetParams {
[__params release_stub];
__params = nil;
__params_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 1:
if (fieldType == TType_STRING) {
NSString * fieldValue = [inProtocol readString];
[self setParams: fieldValue];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"getPostInfoList_args"];
if (__params_isset) {
if (__params != nil) {
[outProtocol writeFieldBeginWithName: @"params" type: TType_STRING fieldID: 1];
[outProtocol writeString: __params];
[outProtocol writeFieldEnd];
}
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"getPostInfoList_args("];
[ms appendString: @"params:"];
[ms appendFormat: @"\"%@\"", __params];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@interface GetPostInfoList_result : NSObject <TBase, NSCoding> {
NSString * __success;

BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSString * success;
#endif

- (id) init;
- (id) initWithSuccess: (NSString *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) success;
- (void) setSuccess: (NSString *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation GetPostInfoList_result

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithSuccess: (NSString *) success
{
self = [super init];
__success = [success retain_stub];
__success_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"success"])
{
__success = [[decoder decodeObjectForKey: @"success"] retain_stub];
__success_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__success_isset)
{
[encoder encodeObject: __success forKey: @"success"];
}
}

- (void) dealloc
{
[__success release_stub];
[super dealloc_stub];
}

- (NSString *) success {
return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSString *) success {
[success retain_stub];
[__success release_stub];
__success = success;
__success_isset = YES;
}

- (BOOL) successIsSet {
return __success_isset;
}

- (void) unsetSuccess {
[__success release_stub];
__success = nil;
__success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 0:
if (fieldType == TType_STRING) {
NSString * fieldValue = [inProtocol readString];
[self setSuccess: fieldValue];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"GetPostInfoList_result"];

if (__success_isset) {
if (__success != nil) {
[outProtocol writeFieldBeginWithName: @"success" type: TType_STRING fieldID: 0];
[outProtocol writeString: __success];
[outProtocol writeFieldEnd];
}
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"GetPostInfoList_result("];
[ms appendString: @"success:"];
[ms appendFormat: @"\"%@\"", __success];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@implementation ISocialServiceGetPostInfoListClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
self = [super init];
inProtocol = [anInProtocol retain_stub];
outProtocol = [anOutProtocol retain_stub];
return self;
}

- (void) dealloc
{
[inProtocol release_stub];
[outProtocol release_stub];
[super dealloc_stub];
}

- (void) send_getPostInfoList: (NSString *) params
{
[outProtocol writeMessageBeginWithName: @"getPostInfoList" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"getPostInfoList_args"];
if (params != nil){
[outProtocol writeFieldBeginWithName: @"params" type: TType_STRING fieldID: 1];
[outProtocol writeString: params];
[outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
}

- (NSString *) recv_getPostInfoList
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
GetPostInfoList_result * result = [[[GetPostInfoList_result alloc] init] autorelease_stub];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"getPostInfoList failed: unknown result"];
}

- (NSString *) getPostInfoList: (NSString *) params
{
[self send_getPostInfoList : params];
return [self recv_getPostInfoList];
}

@end

@implementation ISocialServiceGetPostInfoListProcessor

- (id) initWithISocialServiceGetPostInfoList: (id <ISocialServiceGetPostInfoList>) service
{
self = [super init];
if (!self) {
  return nil;
}
mService = [service retain_stub];
mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
{
SEL s = @selector(process_getPostInfoList_withSequenceID:inProtocol:outProtocol:);
NSMethodSignature * sig = [self methodSignatureForSelector: s];
NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
[invocation setSelector: s];
[invocation retainArguments];
[mMethodMap setValue: invocation forKey: @"getPostInfoList"];
}
return self;
}

- (id<ISocialServiceGetPostInfoList>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_getPostInfoList_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
getPostInfoList_args * args = [[getPostInfoList_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
GetPostInfoList_result * result = [[GetPostInfoList_result alloc] init];
[result setSuccess: [mService getPostInfoList: [args params]]];
[outProtocol writeMessageBeginWithName: @"getPostInfoList"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) dealloc
{
[mService release_stub];
[mMethodMap release_stub];
[super dealloc_stub];
}

@end

@interface getPostByUserId_args : NSObject <TBase, NSCoding> {
NSString * __params;

BOOL __params_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=params, setter=setParams:) NSString * params;
#endif

- (id) init;
- (id) initWithParams: (NSString *) params;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) params;
- (void) setParams: (NSString *) params;
#endif
- (BOOL) paramsIsSet;

@end

@implementation getPostByUserId_args

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithParams: (NSString *) params
{
self = [super init];
__params = [params retain_stub];
__params_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"params"])
{
__params = [[decoder decodeObjectForKey: @"params"] retain_stub];
__params_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__params_isset)
{
[encoder encodeObject: __params forKey: @"params"];
}
}

- (void) dealloc
{
[__params release_stub];
[super dealloc_stub];
}

- (NSString *) params {
return [[__params retain_stub] autorelease_stub];
}

- (void) setParams: (NSString *) params {
[params retain_stub];
[__params release_stub];
__params = params;
__params_isset = YES;
}

- (BOOL) paramsIsSet {
return __params_isset;
}

- (void) unsetParams {
[__params release_stub];
__params = nil;
__params_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 1:
if (fieldType == TType_STRING) {
NSString * fieldValue = [inProtocol readString];
[self setParams: fieldValue];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"getPostByUserId_args"];
if (__params_isset) {
if (__params != nil) {
[outProtocol writeFieldBeginWithName: @"params" type: TType_STRING fieldID: 1];
[outProtocol writeString: __params];
[outProtocol writeFieldEnd];
}
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"getPostByUserId_args("];
[ms appendString: @"params:"];
[ms appendFormat: @"\"%@\"", __params];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@interface GetPostByUserId_result : NSObject <TBase, NSCoding> {
NSString * __success;

BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSString * success;
#endif

- (id) init;
- (id) initWithSuccess: (NSString *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) success;
- (void) setSuccess: (NSString *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation GetPostByUserId_result

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithSuccess: (NSString *) success
{
self = [super init];
__success = [success retain_stub];
__success_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"success"])
{
__success = [[decoder decodeObjectForKey: @"success"] retain_stub];
__success_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__success_isset)
{
[encoder encodeObject: __success forKey: @"success"];
}
}

- (void) dealloc
{
[__success release_stub];
[super dealloc_stub];
}

- (NSString *) success {
return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSString *) success {
[success retain_stub];
[__success release_stub];
__success = success;
__success_isset = YES;
}

- (BOOL) successIsSet {
return __success_isset;
}

- (void) unsetSuccess {
[__success release_stub];
__success = nil;
__success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 0:
if (fieldType == TType_STRING) {
NSString * fieldValue = [inProtocol readString];
[self setSuccess: fieldValue];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"GetPostByUserId_result"];

if (__success_isset) {
if (__success != nil) {
[outProtocol writeFieldBeginWithName: @"success" type: TType_STRING fieldID: 0];
[outProtocol writeString: __success];
[outProtocol writeFieldEnd];
}
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"GetPostByUserId_result("];
[ms appendString: @"success:"];
[ms appendFormat: @"\"%@\"", __success];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@implementation ISocialServiceGetPostByUserIdClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
self = [super init];
inProtocol = [anInProtocol retain_stub];
outProtocol = [anOutProtocol retain_stub];
return self;
}

- (void) dealloc
{
[inProtocol release_stub];
[outProtocol release_stub];
[super dealloc_stub];
}

- (void) send_getPostByUserId: (NSString *) params
{
[outProtocol writeMessageBeginWithName: @"getPostByUserId" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"getPostByUserId_args"];
if (params != nil){
[outProtocol writeFieldBeginWithName: @"params" type: TType_STRING fieldID: 1];
[outProtocol writeString: params];
[outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
}

- (NSString *) recv_getPostByUserId
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
GetPostByUserId_result * result = [[[GetPostByUserId_result alloc] init] autorelease_stub];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"getPostByUserId failed: unknown result"];
}

- (NSString *) getPostByUserId: (NSString *) params
{
[self send_getPostByUserId : params];
return [self recv_getPostByUserId];
}

@end

@implementation ISocialServiceGetPostByUserIdProcessor

- (id) initWithISocialServiceGetPostByUserId: (id <ISocialServiceGetPostByUserId>) service
{
self = [super init];
if (!self) {
  return nil;
}
mService = [service retain_stub];
mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
{
SEL s = @selector(process_getPostByUserId_withSequenceID:inProtocol:outProtocol:);
NSMethodSignature * sig = [self methodSignatureForSelector: s];
NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
[invocation setSelector: s];
[invocation retainArguments];
[mMethodMap setValue: invocation forKey: @"getPostByUserId"];
}
return self;
}

- (id<ISocialServiceGetPostByUserId>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_getPostByUserId_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
getPostByUserId_args * args = [[getPostByUserId_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
GetPostByUserId_result * result = [[GetPostByUserId_result alloc] init];
[result setSuccess: [mService getPostByUserId: [args params]]];
[outProtocol writeMessageBeginWithName: @"getPostByUserId"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) dealloc
{
[mService release_stub];
[mMethodMap release_stub];
[super dealloc_stub];
}

@end

@interface getPostDetail_args : NSObject <TBase, NSCoding> {
NSString * __params;

BOOL __params_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=params, setter=setParams:) NSString * params;
#endif

- (id) init;
- (id) initWithParams: (NSString *) params;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) params;
- (void) setParams: (NSString *) params;
#endif
- (BOOL) paramsIsSet;

@end

@implementation getPostDetail_args

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithParams: (NSString *) params
{
self = [super init];
__params = [params retain_stub];
__params_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"params"])
{
__params = [[decoder decodeObjectForKey: @"params"] retain_stub];
__params_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__params_isset)
{
[encoder encodeObject: __params forKey: @"params"];
}
}

- (void) dealloc
{
[__params release_stub];
[super dealloc_stub];
}

- (NSString *) params {
return [[__params retain_stub] autorelease_stub];
}

- (void) setParams: (NSString *) params {
[params retain_stub];
[__params release_stub];
__params = params;
__params_isset = YES;
}

- (BOOL) paramsIsSet {
return __params_isset;
}

- (void) unsetParams {
[__params release_stub];
__params = nil;
__params_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 1:
if (fieldType == TType_STRING) {
NSString * fieldValue = [inProtocol readString];
[self setParams: fieldValue];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"getPostDetail_args"];
if (__params_isset) {
if (__params != nil) {
[outProtocol writeFieldBeginWithName: @"params" type: TType_STRING fieldID: 1];
[outProtocol writeString: __params];
[outProtocol writeFieldEnd];
}
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"getPostDetail_args("];
[ms appendString: @"params:"];
[ms appendFormat: @"\"%@\"", __params];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@interface GetPostDetail_result : NSObject <TBase, NSCoding> {
NSString * __success;

BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSString * success;
#endif

- (id) init;
- (id) initWithSuccess: (NSString *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) success;
- (void) setSuccess: (NSString *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation GetPostDetail_result

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithSuccess: (NSString *) success
{
self = [super init];
__success = [success retain_stub];
__success_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"success"])
{
__success = [[decoder decodeObjectForKey: @"success"] retain_stub];
__success_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__success_isset)
{
[encoder encodeObject: __success forKey: @"success"];
}
}

- (void) dealloc
{
[__success release_stub];
[super dealloc_stub];
}

- (NSString *) success {
return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSString *) success {
[success retain_stub];
[__success release_stub];
__success = success;
__success_isset = YES;
}

- (BOOL) successIsSet {
return __success_isset;
}

- (void) unsetSuccess {
[__success release_stub];
__success = nil;
__success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 0:
if (fieldType == TType_STRING) {
NSString * fieldValue = [inProtocol readString];
[self setSuccess: fieldValue];
} else { 
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
}
break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"GetPostDetail_result"];

if (__success_isset) {
if (__success != nil) {
[outProtocol writeFieldBeginWithName: @"success" type: TType_STRING fieldID: 0];
[outProtocol writeString: __success];
[outProtocol writeFieldEnd];
}
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"GetPostDetail_result("];
[ms appendString: @"success:"];
[ms appendFormat: @"\"%@\"", __success];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@implementation ISocialServiceGetPostDetailClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
self = [super init];
inProtocol = [anInProtocol retain_stub];
outProtocol = [anOutProtocol retain_stub];
return self;
}

- (void) dealloc
{
[inProtocol release_stub];
[outProtocol release_stub];
[super dealloc_stub];
}

- (void) send_getPostDetail: (NSString *) params
{
[outProtocol writeMessageBeginWithName: @"getPostDetail" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"getPostDetail_args"];
if (params != nil){
[outProtocol writeFieldBeginWithName: @"params" type: TType_STRING fieldID: 1];
[outProtocol writeString: params];
[outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
}

- (NSString *) recv_getPostDetail
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
GetPostDetail_result * result = [[[GetPostDetail_result alloc] init] autorelease_stub];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"getPostDetail failed: unknown result"];
}

- (NSString *) getPostDetail: (NSString *) params
{
[self send_getPostDetail : params];
return [self recv_getPostDetail];
}

@end

@implementation ISocialServiceGetPostDetailProcessor

- (id) initWithISocialServiceGetPostDetail: (id <ISocialServiceGetPostDetail>) service
{
self = [super init];
if (!self) {
  return nil;
}
mService = [service retain_stub];
mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
{
SEL s = @selector(process_getPostDetail_withSequenceID:inProtocol:outProtocol:);
NSMethodSignature * sig = [self methodSignatureForSelector: s];
NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
[invocation setSelector: s];
[invocation retainArguments];
[mMethodMap setValue: invocation forKey: @"getPostDetail"];
}
return self;
}

- (id<ISocialServiceGetPostDetail>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_getPostDetail_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
getPostDetail_args * args = [[getPostDetail_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
GetPostDetail_result * result = [[GetPostDetail_result alloc] init];
[result setSuccess: [mService getPostDetail: [args params]]];
[outProtocol writeMessageBeginWithName: @"getPostDetail"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) dealloc
{
[mService release_stub];
[mMethodMap release_stub];
[super dealloc_stub];
}

@end

