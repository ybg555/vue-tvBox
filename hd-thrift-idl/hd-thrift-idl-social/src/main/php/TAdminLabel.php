<?php
namespace ;

/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


/**
 * 标签
 * 
 * @since 0.0.1
 * @author bjf
 * @date 2015年9月24日 下午5:34:32
 * 
 */
class TAdminLabel {
  static $_TSPEC;

  /**
   * 主键id
   * 
   * @var int
   */
  public $id = null;
  /**
   * 标签名称
   * 
   * @var string
   */
  public $name = null;
  /**
   * 0-普通 1-活动
   * 
   * @var int
   */
  public $type = null;
  /**
   * 图片完整地址 如：http://image.evergrande.com/aa.jpg
   * 
   * @var string
   */
  public $iconUrl = null;
  /**
   * 1-启用 0-禁用 数据库默认是1
   * 
   * @var int
   */
  public $status = null;
  /**
   * 排序的序号(数字越小越靠前显示)
   * 
   * @var int
   */
  public $sortNum = null;
  /**
   * 创建时间
   * 
   * @var int
   */
  public $createTime = null;
  /**
   * 是否进行活动规则配置：0-否 1-是
   * 
   * @var int
   */
  public $hasRule = null;
  /**
   * 活动主题
   * 
   * @var string
   */
  public $activityTheme = null;
  /**
   * 活动开始时间
   * 
   * @var int
   */
  public $activityStartTime = null;
  /**
   * 活动结束时间
   * 
   * @var int
   */
  public $activityEndTime = null;
  /**
   * 活动介绍
   * 
   * @var string
   */
  public $activityDescription = null;
  /**
   * 活动奖品
   * 
   * @var string
   */
  public $activityPrize = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'iconUrl',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'sortNum',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'createTime',
          'type' => TType::I64,
          ),
        8 => array(
          'var' => 'hasRule',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'activityTheme',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'activityStartTime',
          'type' => TType::I64,
          ),
        11 => array(
          'var' => 'activityEndTime',
          'type' => TType::I64,
          ),
        12 => array(
          'var' => 'activityDescription',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'activityPrize',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
      if (isset($vals['iconUrl'])) {
        $this->iconUrl = $vals['iconUrl'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['sortNum'])) {
        $this->sortNum = $vals['sortNum'];
      }
      if (isset($vals['createTime'])) {
        $this->createTime = $vals['createTime'];
      }
      if (isset($vals['hasRule'])) {
        $this->hasRule = $vals['hasRule'];
      }
      if (isset($vals['activityTheme'])) {
        $this->activityTheme = $vals['activityTheme'];
      }
      if (isset($vals['activityStartTime'])) {
        $this->activityStartTime = $vals['activityStartTime'];
      }
      if (isset($vals['activityEndTime'])) {
        $this->activityEndTime = $vals['activityEndTime'];
      }
      if (isset($vals['activityDescription'])) {
        $this->activityDescription = $vals['activityDescription'];
      }
      if (isset($vals['activityPrize'])) {
        $this->activityPrize = $vals['activityPrize'];
      }
    }
  }

  public function getName() {
    return 'TAdminLabel';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->iconUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->sortNum);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->createTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->hasRule);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->activityTheme);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->activityStartTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->activityEndTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->activityDescription);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->activityPrize);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TAdminLabel');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 2);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 3);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->iconUrl !== null) {
      $xfer += $output->writeFieldBegin('iconUrl', TType::STRING, 4);
      $xfer += $output->writeString($this->iconUrl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 5);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sortNum !== null) {
      $xfer += $output->writeFieldBegin('sortNum', TType::I32, 6);
      $xfer += $output->writeI32($this->sortNum);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createTime !== null) {
      $xfer += $output->writeFieldBegin('createTime', TType::I64, 7);
      $xfer += $output->writeI64($this->createTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->hasRule !== null) {
      $xfer += $output->writeFieldBegin('hasRule', TType::I32, 8);
      $xfer += $output->writeI32($this->hasRule);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->activityTheme !== null) {
      $xfer += $output->writeFieldBegin('activityTheme', TType::STRING, 9);
      $xfer += $output->writeString($this->activityTheme);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->activityStartTime !== null) {
      $xfer += $output->writeFieldBegin('activityStartTime', TType::I64, 10);
      $xfer += $output->writeI64($this->activityStartTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->activityEndTime !== null) {
      $xfer += $output->writeFieldBegin('activityEndTime', TType::I64, 11);
      $xfer += $output->writeI64($this->activityEndTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->activityDescription !== null) {
      $xfer += $output->writeFieldBegin('activityDescription', TType::STRING, 12);
      $xfer += $output->writeString($this->activityDescription);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->activityPrize !== null) {
      $xfer += $output->writeFieldBegin('activityPrize', TType::STRING, 13);
      $xfer += $output->writeString($this->activityPrize);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


