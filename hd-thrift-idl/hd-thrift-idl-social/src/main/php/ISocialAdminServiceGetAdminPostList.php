<?php
namespace ;
/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


interface ISocialAdminServiceGetAdminPostListIf {
  /**
   * 
   * 查询帖子列表
   * 
   * @param content
   *          内容
   * @param mobile
   *          发布人手机号
   * @param nickName
   *            用户昵称
   * @param objType
   *          类型：1-标签 2-活动
   * @param objId
   *          相关类型的id
   * @param createTimeStart
   *          发布时间开始
   * @param createTimeEnd
   *          发布时间结束
   * @param cityId
   *          城市id
   * @param communityId
   *          小区id
   * @param inform
   *          是否被举报：1：是，0：否
   * @param currentPage
   *          当前页
   * @param pageSize
   *          显示多少条
   * @return
   * 
   * @author zhijian.li
   * 
   * @param string $content
   * @param string $mobile
   * @param string $nickName
   * @param int $objType
   * @param int $objId
   * @param int $createTimeStart
   * @param int $createTimeEnd
   * @param int $cityId
   * @param int $communityId
   * @param int $inform
   * @param int $currentPage
   * @param int $pageSize
   * @return \TAdminPostQueryData 帖子分页对象
   * 
   * @since 0.0.1
   * @author zhijian.li
   * @date 2015年11月27日下午3:45:11
   * 
   * 
   */
  public function getAdminPostList($content, $mobile, $nickName, $objType, $objId, $createTimeStart, $createTimeEnd, $cityId, $communityId, $inform, $currentPage, $pageSize);
}

class ISocialAdminServiceGetAdminPostListClient implements \ISocialAdminServiceGetAdminPostListIf {
  protected $input_ = null;
  protected $output_ = null;

  protected $seqid_ = 0;

  public function __construct($input, $output=null) {
    $this->input_ = $input;
    $this->output_ = $output ? $output : $input;
  }

  public function getAdminPostList($content, $mobile, $nickName, $objType, $objId, $createTimeStart, $createTimeEnd, $cityId, $communityId, $inform, $currentPage, $pageSize)
  {
    $this->send_getAdminPostList($content, $mobile, $nickName, $objType, $objId, $createTimeStart, $createTimeEnd, $cityId, $communityId, $inform, $currentPage, $pageSize);
    return $this->recv_getAdminPostList();
  }

  public function send_getAdminPostList($content, $mobile, $nickName, $objType, $objId, $createTimeStart, $createTimeEnd, $cityId, $communityId, $inform, $currentPage, $pageSize)
  {
    $args = new \ISocialAdminServiceGetAdminPostList_getAdminPostList_args();
    $args->content = $content;
    $args->mobile = $mobile;
    $args->nickName = $nickName;
    $args->objType = $objType;
    $args->objId = $objId;
    $args->createTimeStart = $createTimeStart;
    $args->createTimeEnd = $createTimeEnd;
    $args->cityId = $cityId;
    $args->communityId = $communityId;
    $args->inform = $inform;
    $args->currentPage = $currentPage;
    $args->pageSize = $pageSize;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getAdminPostList', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getAdminPostList', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getAdminPostList()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\ISocialAdminServiceGetAdminPostList_getAdminPostList_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \ISocialAdminServiceGetAdminPostList_getAdminPostList_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getAdminPostList failed: unknown result");
  }

}

// HELPER FUNCTIONS AND STRUCTURES

class ISocialAdminServiceGetAdminPostList_getAdminPostList_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $content = null;
  /**
   * @var string
   */
  public $mobile = null;
  /**
   * @var string
   */
  public $nickName = null;
  /**
   * @var int
   */
  public $objType = null;
  /**
   * @var int
   */
  public $objId = null;
  /**
   * @var int
   */
  public $createTimeStart = null;
  /**
   * @var int
   */
  public $createTimeEnd = null;
  /**
   * @var int
   */
  public $cityId = null;
  /**
   * @var int
   */
  public $communityId = null;
  /**
   * @var int
   */
  public $inform = null;
  /**
   * @var int
   */
  public $currentPage = null;
  /**
   * @var int
   */
  public $pageSize = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'content',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'mobile',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'nickName',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'objType',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'objId',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'createTimeStart',
          'type' => TType::I64,
          ),
        7 => array(
          'var' => 'createTimeEnd',
          'type' => TType::I64,
          ),
        8 => array(
          'var' => 'cityId',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'communityId',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'inform',
          'type' => TType::I32,
          ),
        11 => array(
          'var' => 'currentPage',
          'type' => TType::I32,
          ),
        12 => array(
          'var' => 'pageSize',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['content'])) {
        $this->content = $vals['content'];
      }
      if (isset($vals['mobile'])) {
        $this->mobile = $vals['mobile'];
      }
      if (isset($vals['nickName'])) {
        $this->nickName = $vals['nickName'];
      }
      if (isset($vals['objType'])) {
        $this->objType = $vals['objType'];
      }
      if (isset($vals['objId'])) {
        $this->objId = $vals['objId'];
      }
      if (isset($vals['createTimeStart'])) {
        $this->createTimeStart = $vals['createTimeStart'];
      }
      if (isset($vals['createTimeEnd'])) {
        $this->createTimeEnd = $vals['createTimeEnd'];
      }
      if (isset($vals['cityId'])) {
        $this->cityId = $vals['cityId'];
      }
      if (isset($vals['communityId'])) {
        $this->communityId = $vals['communityId'];
      }
      if (isset($vals['inform'])) {
        $this->inform = $vals['inform'];
      }
      if (isset($vals['currentPage'])) {
        $this->currentPage = $vals['currentPage'];
      }
      if (isset($vals['pageSize'])) {
        $this->pageSize = $vals['pageSize'];
      }
    }
  }

  public function getName() {
    return 'ISocialAdminServiceGetAdminPostList_getAdminPostList_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->content);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mobile);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nickName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->objType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->objId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->createTimeStart);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->createTimeEnd);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->cityId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->communityId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->inform);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->currentPage);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->pageSize);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ISocialAdminServiceGetAdminPostList_getAdminPostList_args');
    if ($this->content !== null) {
      $xfer += $output->writeFieldBegin('content', TType::STRING, 1);
      $xfer += $output->writeString($this->content);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mobile !== null) {
      $xfer += $output->writeFieldBegin('mobile', TType::STRING, 2);
      $xfer += $output->writeString($this->mobile);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nickName !== null) {
      $xfer += $output->writeFieldBegin('nickName', TType::STRING, 3);
      $xfer += $output->writeString($this->nickName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->objType !== null) {
      $xfer += $output->writeFieldBegin('objType', TType::I32, 4);
      $xfer += $output->writeI32($this->objType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->objId !== null) {
      $xfer += $output->writeFieldBegin('objId', TType::I32, 5);
      $xfer += $output->writeI32($this->objId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createTimeStart !== null) {
      $xfer += $output->writeFieldBegin('createTimeStart', TType::I64, 6);
      $xfer += $output->writeI64($this->createTimeStart);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createTimeEnd !== null) {
      $xfer += $output->writeFieldBegin('createTimeEnd', TType::I64, 7);
      $xfer += $output->writeI64($this->createTimeEnd);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cityId !== null) {
      $xfer += $output->writeFieldBegin('cityId', TType::I32, 8);
      $xfer += $output->writeI32($this->cityId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->communityId !== null) {
      $xfer += $output->writeFieldBegin('communityId', TType::I32, 9);
      $xfer += $output->writeI32($this->communityId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->inform !== null) {
      $xfer += $output->writeFieldBegin('inform', TType::I32, 10);
      $xfer += $output->writeI32($this->inform);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->currentPage !== null) {
      $xfer += $output->writeFieldBegin('currentPage', TType::I32, 11);
      $xfer += $output->writeI32($this->currentPage);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pageSize !== null) {
      $xfer += $output->writeFieldBegin('pageSize', TType::I32, 12);
      $xfer += $output->writeI32($this->pageSize);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class ISocialAdminServiceGetAdminPostList_getAdminPostList_result {
  static $_TSPEC;

  /**
   * @var \TAdminPostQueryData
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::STRUCT,
          'class' => '\TAdminPostQueryData',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'ISocialAdminServiceGetAdminPostList_getAdminPostList_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::STRUCT) {
            $this->success = new \TAdminPostQueryData();
            $xfer += $this->success->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('ISocialAdminServiceGetAdminPostList_getAdminPostList_result');
    if ($this->success !== null) {
      if (!is_object($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::STRUCT, 0);
      $xfer += $this->success->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


