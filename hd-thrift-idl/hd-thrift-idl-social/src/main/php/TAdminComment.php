<?php
namespace ;

/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


/**
 * 帖子评论
 * 
 * @since 0.0.1
 * @author zhijian.li
 * @date 2015年11月27日下午3:45:11
 * 
 */
class TAdminComment {
  static $_TSPEC;

  /**
   * 主键id
   * 
   * @var int
   */
  public $id = null;
  /**
   * 帖子id
   * 
   * @var int
   */
  public $postId = null;
  /**
   * 用户id
   * 
   * @var int
   */
  public $userId = null;
  /**
   * 用户昵称
   * 
   * @var string
   */
  public $nickName = null;
  /**
   * 用户头像
   * 
   * @var string
   */
  public $avatarUrl = null;
  /**
   * 父id
   * 
   * @var int
   */
  public $pid = null;
  /**
   * 状态 1-正常 0-删除
   * 
   * @var int
   */
  public $status = null;
  /**
   * 评论内容
   * 
   * @var string
   */
  public $content = null;
  /**
   * 创建时间
   * 
   * @var int
   */
  public $createTime = null;
  /**
   * 手机号
   * 
   * @var string
   */
  public $mobile = null;
  /**
   * 被回复人的用户名
   * 
   * @var string
   */
  public $toNickName = null;
  /**
   * 被回复人的手机号
   * 
   * @var string
   */
  public $toMobile = null;
  /**
   * 被回复人的用户id
   * 
   * @var int
   */
  public $toUserId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'postId',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'userId',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'nickName',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'avatarUrl',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'pid',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'content',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'createTime',
          'type' => TType::I64,
          ),
        10 => array(
          'var' => 'mobile',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'toNickName',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'toMobile',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'toUserId',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['postId'])) {
        $this->postId = $vals['postId'];
      }
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
      if (isset($vals['nickName'])) {
        $this->nickName = $vals['nickName'];
      }
      if (isset($vals['avatarUrl'])) {
        $this->avatarUrl = $vals['avatarUrl'];
      }
      if (isset($vals['pid'])) {
        $this->pid = $vals['pid'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['content'])) {
        $this->content = $vals['content'];
      }
      if (isset($vals['createTime'])) {
        $this->createTime = $vals['createTime'];
      }
      if (isset($vals['mobile'])) {
        $this->mobile = $vals['mobile'];
      }
      if (isset($vals['toNickName'])) {
        $this->toNickName = $vals['toNickName'];
      }
      if (isset($vals['toMobile'])) {
        $this->toMobile = $vals['toMobile'];
      }
      if (isset($vals['toUserId'])) {
        $this->toUserId = $vals['toUserId'];
      }
    }
  }

  public function getName() {
    return 'TAdminComment';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->postId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nickName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->avatarUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->pid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->content);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->createTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mobile);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->toNickName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->toMobile);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->toUserId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TAdminComment');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->postId !== null) {
      $xfer += $output->writeFieldBegin('postId', TType::I32, 2);
      $xfer += $output->writeI32($this->postId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I64, 3);
      $xfer += $output->writeI64($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nickName !== null) {
      $xfer += $output->writeFieldBegin('nickName', TType::STRING, 4);
      $xfer += $output->writeString($this->nickName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->avatarUrl !== null) {
      $xfer += $output->writeFieldBegin('avatarUrl', TType::STRING, 5);
      $xfer += $output->writeString($this->avatarUrl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pid !== null) {
      $xfer += $output->writeFieldBegin('pid', TType::I32, 6);
      $xfer += $output->writeI32($this->pid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 7);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->content !== null) {
      $xfer += $output->writeFieldBegin('content', TType::STRING, 8);
      $xfer += $output->writeString($this->content);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createTime !== null) {
      $xfer += $output->writeFieldBegin('createTime', TType::I64, 9);
      $xfer += $output->writeI64($this->createTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mobile !== null) {
      $xfer += $output->writeFieldBegin('mobile', TType::STRING, 10);
      $xfer += $output->writeString($this->mobile);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->toNickName !== null) {
      $xfer += $output->writeFieldBegin('toNickName', TType::STRING, 11);
      $xfer += $output->writeString($this->toNickName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->toMobile !== null) {
      $xfer += $output->writeFieldBegin('toMobile', TType::STRING, 12);
      $xfer += $output->writeString($this->toMobile);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->toUserId !== null) {
      $xfer += $output->writeFieldBegin('toUserId', TType::I64, 13);
      $xfer += $output->writeI64($this->toUserId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


