<?php
namespace ;
/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


/**
 * 活动服务(前端）
 * 
 * @since 1.1.0
 * @author zhijian.li
 * @date 2016年1月18日 下午3:54:36
 * 
 */
interface IActivityServiceGetActivityListIf {
  /**
   * 
   * 查询活动列表
   * 
   * @param communityId
   *          小区id
   * @param currentPage
   *          当前页
   * @param pageSize
   *          显示多少条
   * @return
   * 
   * @author zhijian.li
   * 
   * @param int $communityId
   * @param int $currentPage
   * @param int $pageSize
   * @return (array)[]
   */
  public function getActivityList($communityId, $currentPage, $pageSize);
}

class IActivityServiceGetActivityListClient implements \IActivityServiceGetActivityListIf {
  protected $input_ = null;
  protected $output_ = null;

  protected $seqid_ = 0;

  public function __construct($input, $output=null) {
    $this->input_ = $input;
    $this->output_ = $output ? $output : $input;
  }

  public function getActivityList($communityId, $currentPage, $pageSize)
  {
    $this->send_getActivityList($communityId, $currentPage, $pageSize);
    return $this->recv_getActivityList();
  }

  public function send_getActivityList($communityId, $currentPage, $pageSize)
  {
    $args = new \IActivityServiceGetActivityList_getActivityList_args();
    $args->communityId = $communityId;
    $args->currentPage = $currentPage;
    $args->pageSize = $pageSize;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getActivityList', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getActivityList', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getActivityList()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\IActivityServiceGetActivityList_getActivityList_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \IActivityServiceGetActivityList_getActivityList_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("getActivityList failed: unknown result");
  }

}

// HELPER FUNCTIONS AND STRUCTURES

class IActivityServiceGetActivityList_getActivityList_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $communityId = null;
  /**
   * @var int
   */
  public $currentPage = null;
  /**
   * @var int
   */
  public $pageSize = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'communityId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'currentPage',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'pageSize',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['communityId'])) {
        $this->communityId = $vals['communityId'];
      }
      if (isset($vals['currentPage'])) {
        $this->currentPage = $vals['currentPage'];
      }
      if (isset($vals['pageSize'])) {
        $this->pageSize = $vals['pageSize'];
      }
    }
  }

  public function getName() {
    return 'IActivityServiceGetActivityList_getActivityList_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->communityId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->currentPage);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->pageSize);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('IActivityServiceGetActivityList_getActivityList_args');
    if ($this->communityId !== null) {
      $xfer += $output->writeFieldBegin('communityId', TType::I32, 1);
      $xfer += $output->writeI32($this->communityId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->currentPage !== null) {
      $xfer += $output->writeFieldBegin('currentPage', TType::I32, 2);
      $xfer += $output->writeI32($this->currentPage);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pageSize !== null) {
      $xfer += $output->writeFieldBegin('pageSize', TType::I32, 3);
      $xfer += $output->writeI32($this->pageSize);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class IActivityServiceGetActivityList_getActivityList_result {
  static $_TSPEC;

  /**
   * @var (array)[]
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::MAP,
          'elem' => array(
            'type' => TType::MAP,
            'ktype' => TType::STRING,
            'vtype' => TType::STRING,
            'key' => array(
              'type' => TType::STRING,
            ),
            'val' => array(
              'type' => TType::STRING,
              ),
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'IActivityServiceGetActivityList_getActivityList_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $elem5 = array();
              $_size6 = 0;
              $_ktype7 = 0;
              $_vtype8 = 0;
              $xfer += $input->readMapBegin($_ktype7, $_vtype8, $_size6);
              for ($_i10 = 0; $_i10 < $_size6; ++$_i10)
              {
                $key11 = '';
                $val12 = '';
                $xfer += $input->readString($key11);
                $xfer += $input->readString($val12);
                $elem5[$key11] = $val12;
              }
              $xfer += $input->readMapEnd();
              $this->success []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('IActivityServiceGetActivityList_getActivityList_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::MAP, count($this->success));
        {
          foreach ($this->success as $iter13)
          {
            {
              $output->writeMapBegin(TType::STRING, TType::STRING, count($iter13));
              {
                foreach ($iter13 as $kiter14 => $viter15)
                {
                  $xfer += $output->writeString($kiter14);
                  $xfer += $output->writeString($viter15);
                }
              }
              $output->writeMapEnd();
            }
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


