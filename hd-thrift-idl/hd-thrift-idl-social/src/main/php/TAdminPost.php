<?php
namespace ;

/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


/**
 * 帖子信息
 * 
 * @since 0.0.1
 * @author zhijian.li
 * @date 2015年11月27日下午3:45:11
 * 
 */
class TAdminPost {
  static $_TSPEC;

  /**
   * 主键id
   * 
   * @var int
   */
  public $id = null;
  /**
   * 用户id
   * 
   * @var int
   */
  public $userId = null;
  /**
   * 用户昵称
   * 
   * @var string
   */
  public $nickName = null;
  /**
   * 用户头像
   * 
   * @var string
   */
  public $avatarUrl = null;
  /**
   * 是否管理员发布 0-不是 1-是
   * 
   * @var int
   */
  public $isAdmin = null;
  /**
   * 活动开始时间
   * 
   * @var int
   */
  public $activityStartTime = null;
  /**
   * 1-正常 0-屏蔽
   * 
   * @var int
   */
  public $status = null;
  /**
   * 标签id 默认-1
   * 
   * @var int
   */
  public $labelId = null;
  /**
   * 标签名称
   * 
   * @var string
   */
  public $labelName = null;
  /**
   * 浏览次数
   * 
   * @var int
   */
  public $browse = null;
  /**
   * 多个图片链接，用 #_# 分割
   * 
   * @var string
   */
  public $imageUrl = null;
  /**
   * 帖子内容
   * 
   * @var string
   */
  public $content = null;
  /**
   * 备注 可用来写删除帖子的原因
   * 
   * @var string
   */
  public $mark = null;
  /**
   * 被赞的次数
   * 
   * @var int
   */
  public $praiseCount = null;
  /**
   * 被评论的次数
   * 
   * @var int
   */
  public $commentCount = null;
  /**
   * 创建时间
   * 
   * @var int
   */
  public $createTime = null;
  /**
   * 标签类型0-普通 1-活动
   * 
   * @var int
   */
  public $labelType = null;
  /**
   * 用户手机号
   * 
   * @var string
   */
  public $mobile = null;
  /**
   * 城市+小区列表
   * 
   * @var string[]
   */
  public $cityCommunities = null;
  /**
   * 参加活动数
   * 
   * @var int
   */
  public $applyCount = null;
  /**
   * 是否被举报：1：是，0：否
   * 
   * @var int
   */
  public $inform = null;
  /**
   * 0-正常 1-用户删除 2-管理员删除
   * 
   * @var int
   */
  public $isDelete = null;
  /**
   * 0-正常 1-处理违规 2-处理不违规
   * 
   * @var int
   */
  public $informStatus = null;
  /**
   * 是否通知发帖人（仅当status为0时有效）： 1-通知 0-不通知
   * 
   * @var int
   */
  public $notify = null;
  /**
   * 是否符合活动规则： 0-不符合 1-符合
   * 
   * @var int
   */
  public $isConform = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'userId',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'nickName',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'avatarUrl',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'isAdmin',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'activityStartTime',
          'type' => TType::I64,
          ),
        7 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'labelId',
          'type' => TType::I32,
          ),
        9 => array(
          'var' => 'labelName',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'browse',
          'type' => TType::I32,
          ),
        11 => array(
          'var' => 'imageUrl',
          'type' => TType::STRING,
          ),
        12 => array(
          'var' => 'content',
          'type' => TType::STRING,
          ),
        13 => array(
          'var' => 'mark',
          'type' => TType::STRING,
          ),
        14 => array(
          'var' => 'praiseCount',
          'type' => TType::I32,
          ),
        15 => array(
          'var' => 'commentCount',
          'type' => TType::I32,
          ),
        16 => array(
          'var' => 'createTime',
          'type' => TType::I64,
          ),
        17 => array(
          'var' => 'labelType',
          'type' => TType::I32,
          ),
        18 => array(
          'var' => 'mobile',
          'type' => TType::STRING,
          ),
        19 => array(
          'var' => 'cityCommunities',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        20 => array(
          'var' => 'applyCount',
          'type' => TType::I32,
          ),
        21 => array(
          'var' => 'inform',
          'type' => TType::I32,
          ),
        22 => array(
          'var' => 'isDelete',
          'type' => TType::I32,
          ),
        23 => array(
          'var' => 'informStatus',
          'type' => TType::I32,
          ),
        24 => array(
          'var' => 'notify',
          'type' => TType::I32,
          ),
        25 => array(
          'var' => 'isConform',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
      if (isset($vals['nickName'])) {
        $this->nickName = $vals['nickName'];
      }
      if (isset($vals['avatarUrl'])) {
        $this->avatarUrl = $vals['avatarUrl'];
      }
      if (isset($vals['isAdmin'])) {
        $this->isAdmin = $vals['isAdmin'];
      }
      if (isset($vals['activityStartTime'])) {
        $this->activityStartTime = $vals['activityStartTime'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['labelId'])) {
        $this->labelId = $vals['labelId'];
      }
      if (isset($vals['labelName'])) {
        $this->labelName = $vals['labelName'];
      }
      if (isset($vals['browse'])) {
        $this->browse = $vals['browse'];
      }
      if (isset($vals['imageUrl'])) {
        $this->imageUrl = $vals['imageUrl'];
      }
      if (isset($vals['content'])) {
        $this->content = $vals['content'];
      }
      if (isset($vals['mark'])) {
        $this->mark = $vals['mark'];
      }
      if (isset($vals['praiseCount'])) {
        $this->praiseCount = $vals['praiseCount'];
      }
      if (isset($vals['commentCount'])) {
        $this->commentCount = $vals['commentCount'];
      }
      if (isset($vals['createTime'])) {
        $this->createTime = $vals['createTime'];
      }
      if (isset($vals['labelType'])) {
        $this->labelType = $vals['labelType'];
      }
      if (isset($vals['mobile'])) {
        $this->mobile = $vals['mobile'];
      }
      if (isset($vals['cityCommunities'])) {
        $this->cityCommunities = $vals['cityCommunities'];
      }
      if (isset($vals['applyCount'])) {
        $this->applyCount = $vals['applyCount'];
      }
      if (isset($vals['inform'])) {
        $this->inform = $vals['inform'];
      }
      if (isset($vals['isDelete'])) {
        $this->isDelete = $vals['isDelete'];
      }
      if (isset($vals['informStatus'])) {
        $this->informStatus = $vals['informStatus'];
      }
      if (isset($vals['notify'])) {
        $this->notify = $vals['notify'];
      }
      if (isset($vals['isConform'])) {
        $this->isConform = $vals['isConform'];
      }
    }
  }

  public function getName() {
    return 'TAdminPost';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->nickName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->avatarUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->isAdmin);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->activityStartTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->labelId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->labelName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->browse);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->imageUrl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->content);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 13:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mark);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 14:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->praiseCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 15:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->commentCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 16:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->createTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 17:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->labelType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 18:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->mobile);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 19:
          if ($ftype == TType::LST) {
            $this->cityCommunities = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $xfer += $input->readString($elem5);
              $this->cityCommunities []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 20:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->applyCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 21:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->inform);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 22:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->isDelete);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 23:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->informStatus);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 24:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->notify);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 25:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->isConform);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TAdminPost');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I64, 2);
      $xfer += $output->writeI64($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->nickName !== null) {
      $xfer += $output->writeFieldBegin('nickName', TType::STRING, 3);
      $xfer += $output->writeString($this->nickName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->avatarUrl !== null) {
      $xfer += $output->writeFieldBegin('avatarUrl', TType::STRING, 4);
      $xfer += $output->writeString($this->avatarUrl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isAdmin !== null) {
      $xfer += $output->writeFieldBegin('isAdmin', TType::I32, 5);
      $xfer += $output->writeI32($this->isAdmin);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->activityStartTime !== null) {
      $xfer += $output->writeFieldBegin('activityStartTime', TType::I64, 6);
      $xfer += $output->writeI64($this->activityStartTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 7);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->labelId !== null) {
      $xfer += $output->writeFieldBegin('labelId', TType::I32, 8);
      $xfer += $output->writeI32($this->labelId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->labelName !== null) {
      $xfer += $output->writeFieldBegin('labelName', TType::STRING, 9);
      $xfer += $output->writeString($this->labelName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->browse !== null) {
      $xfer += $output->writeFieldBegin('browse', TType::I32, 10);
      $xfer += $output->writeI32($this->browse);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->imageUrl !== null) {
      $xfer += $output->writeFieldBegin('imageUrl', TType::STRING, 11);
      $xfer += $output->writeString($this->imageUrl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->content !== null) {
      $xfer += $output->writeFieldBegin('content', TType::STRING, 12);
      $xfer += $output->writeString($this->content);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mark !== null) {
      $xfer += $output->writeFieldBegin('mark', TType::STRING, 13);
      $xfer += $output->writeString($this->mark);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->praiseCount !== null) {
      $xfer += $output->writeFieldBegin('praiseCount', TType::I32, 14);
      $xfer += $output->writeI32($this->praiseCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->commentCount !== null) {
      $xfer += $output->writeFieldBegin('commentCount', TType::I32, 15);
      $xfer += $output->writeI32($this->commentCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->createTime !== null) {
      $xfer += $output->writeFieldBegin('createTime', TType::I64, 16);
      $xfer += $output->writeI64($this->createTime);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->labelType !== null) {
      $xfer += $output->writeFieldBegin('labelType', TType::I32, 17);
      $xfer += $output->writeI32($this->labelType);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mobile !== null) {
      $xfer += $output->writeFieldBegin('mobile', TType::STRING, 18);
      $xfer += $output->writeString($this->mobile);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->cityCommunities !== null) {
      if (!is_array($this->cityCommunities)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('cityCommunities', TType::LST, 19);
      {
        $output->writeListBegin(TType::STRING, count($this->cityCommunities));
        {
          foreach ($this->cityCommunities as $iter6)
          {
            $xfer += $output->writeString($iter6);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->applyCount !== null) {
      $xfer += $output->writeFieldBegin('applyCount', TType::I32, 20);
      $xfer += $output->writeI32($this->applyCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->inform !== null) {
      $xfer += $output->writeFieldBegin('inform', TType::I32, 21);
      $xfer += $output->writeI32($this->inform);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isDelete !== null) {
      $xfer += $output->writeFieldBegin('isDelete', TType::I32, 22);
      $xfer += $output->writeI32($this->isDelete);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->informStatus !== null) {
      $xfer += $output->writeFieldBegin('informStatus', TType::I32, 23);
      $xfer += $output->writeI32($this->informStatus);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->notify !== null) {
      $xfer += $output->writeFieldBegin('notify', TType::I32, 24);
      $xfer += $output->writeI32($this->notify);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isConform !== null) {
      $xfer += $output->writeFieldBegin('isConform', TType::I32, 25);
      $xfer += $output->writeI32($this->isConform);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


