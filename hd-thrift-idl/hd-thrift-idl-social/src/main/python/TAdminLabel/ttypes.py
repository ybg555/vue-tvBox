#coding=utf-8

#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class TAdminLabel:
  """
  标签

  @since 0.0.1
  @author bjf
  @date 2015年9月24日 下午5:34:32


  Attributes:
   - id: 主键id
   - name: 标签名称
   - type: 0-普通 1-活动
   - iconUrl: 图片完整地址 如：http://image.evergrande.com/aa.jpg
   - status: 1-启用 0-禁用 数据库默认是1
   - sortNum: 排序的序号(数字越小越靠前显示)
   - createTime: 创建时间
   - hasRule: 是否进行活动规则配置：0-否 1-是
   - activityTheme: 活动主题
   - activityStartTime: 活动开始时间
   - activityEndTime: 活动结束时间
   - activityDescription: 活动介绍
   - activityPrize: 活动奖品
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'id', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.I32, 'type', None, None, ), # 3
    (4, TType.STRING, 'iconUrl', None, None, ), # 4
    (5, TType.I32, 'status', None, None, ), # 5
    (6, TType.I32, 'sortNum', None, None, ), # 6
    (7, TType.I64, 'createTime', None, None, ), # 7
    (8, TType.I32, 'hasRule', None, None, ), # 8
    (9, TType.STRING, 'activityTheme', None, None, ), # 9
    (10, TType.I64, 'activityStartTime', None, None, ), # 10
    (11, TType.I64, 'activityEndTime', None, None, ), # 11
    (12, TType.STRING, 'activityDescription', None, None, ), # 12
    (13, TType.STRING, 'activityPrize', None, None, ), # 13
  )

  def __init__(self, id=None, name=None, type=None, iconUrl=None, status=None, sortNum=None, createTime=None, hasRule=None, activityTheme=None, activityStartTime=None, activityEndTime=None, activityDescription=None, activityPrize=None,):
    self.id = id
    self.name = name
    self.type = type
    self.iconUrl = iconUrl
    self.status = status
    self.sortNum = sortNum
    self.createTime = createTime
    self.hasRule = hasRule
    self.activityTheme = activityTheme
    self.activityStartTime = activityStartTime
    self.activityEndTime = activityEndTime
    self.activityDescription = activityDescription
    self.activityPrize = activityPrize

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.iconUrl = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.status = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.sortNum = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I64:
          self.createTime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.hasRule = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.activityTheme = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I64:
          self.activityStartTime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I64:
          self.activityEndTime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.activityDescription = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          self.activityPrize = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TAdminLabel')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 3)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    if self.iconUrl is not None:
      oprot.writeFieldBegin('iconUrl', TType.STRING, 4)
      oprot.writeString(self.iconUrl)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 5)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    if self.sortNum is not None:
      oprot.writeFieldBegin('sortNum', TType.I32, 6)
      oprot.writeI32(self.sortNum)
      oprot.writeFieldEnd()
    if self.createTime is not None:
      oprot.writeFieldBegin('createTime', TType.I64, 7)
      oprot.writeI64(self.createTime)
      oprot.writeFieldEnd()
    if self.hasRule is not None:
      oprot.writeFieldBegin('hasRule', TType.I32, 8)
      oprot.writeI32(self.hasRule)
      oprot.writeFieldEnd()
    if self.activityTheme is not None:
      oprot.writeFieldBegin('activityTheme', TType.STRING, 9)
      oprot.writeString(self.activityTheme)
      oprot.writeFieldEnd()
    if self.activityStartTime is not None:
      oprot.writeFieldBegin('activityStartTime', TType.I64, 10)
      oprot.writeI64(self.activityStartTime)
      oprot.writeFieldEnd()
    if self.activityEndTime is not None:
      oprot.writeFieldBegin('activityEndTime', TType.I64, 11)
      oprot.writeI64(self.activityEndTime)
      oprot.writeFieldEnd()
    if self.activityDescription is not None:
      oprot.writeFieldBegin('activityDescription', TType.STRING, 12)
      oprot.writeString(self.activityDescription)
      oprot.writeFieldEnd()
    if self.activityPrize is not None:
      oprot.writeFieldBegin('activityPrize', TType.STRING, 13)
      oprot.writeString(self.activityPrize)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.type)
    value = (value * 31) ^ hash(self.iconUrl)
    value = (value * 31) ^ hash(self.status)
    value = (value * 31) ^ hash(self.sortNum)
    value = (value * 31) ^ hash(self.createTime)
    value = (value * 31) ^ hash(self.hasRule)
    value = (value * 31) ^ hash(self.activityTheme)
    value = (value * 31) ^ hash(self.activityStartTime)
    value = (value * 31) ^ hash(self.activityEndTime)
    value = (value * 31) ^ hash(self.activityDescription)
    value = (value * 31) ^ hash(self.activityPrize)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
