#coding=utf-8

#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
from ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Iface:
  def getAdminPostList(self, content, mobile, nickName, objType, objId, createTimeStart, createTimeEnd, cityId, communityId, inform, currentPage, pageSize):
    """

    查询帖子列表

    @param content
             内容
    @param mobile
             发布人手机号
    @param nickName
               用户昵称
    @param objType
             类型：1-标签 2-活动
    @param objId
             相关类型的id
    @param createTimeStart
             发布时间开始
    @param createTimeEnd
             发布时间结束
    @param cityId
             城市id
    @param communityId
             小区id
    @param inform
             是否被举报：1：是，0：否
    @param currentPage
             当前页
    @param pageSize
             显示多少条
    @return

    @author zhijian.li

    Parameters:
     - content
     - mobile
     - nickName
     - objType
     - objId
     - createTimeStart
     - createTimeEnd
     - cityId
     - communityId
     - inform
     - currentPage
     - pageSize
    """
    pass


class Client(Iface):
  def __init__(self, iprot, oprot=None):
    self._iprot = self._oprot = iprot
    if oprot is not None:
      self._oprot = oprot
    self._seqid = 0

  def getAdminPostList(self, content, mobile, nickName, objType, objId, createTimeStart, createTimeEnd, cityId, communityId, inform, currentPage, pageSize):
    """

    查询帖子列表

    @param content
             内容
    @param mobile
             发布人手机号
    @param nickName
               用户昵称
    @param objType
             类型：1-标签 2-活动
    @param objId
             相关类型的id
    @param createTimeStart
             发布时间开始
    @param createTimeEnd
             发布时间结束
    @param cityId
             城市id
    @param communityId
             小区id
    @param inform
             是否被举报：1：是，0：否
    @param currentPage
             当前页
    @param pageSize
             显示多少条
    @return

    @author zhijian.li

    Parameters:
     - content
     - mobile
     - nickName
     - objType
     - objId
     - createTimeStart
     - createTimeEnd
     - cityId
     - communityId
     - inform
     - currentPage
     - pageSize
    """
    self.send_getAdminPostList(content, mobile, nickName, objType, objId, createTimeStart, createTimeEnd, cityId, communityId, inform, currentPage, pageSize)
    return self.recv_getAdminPostList()

  def send_getAdminPostList(self, content, mobile, nickName, objType, objId, createTimeStart, createTimeEnd, cityId, communityId, inform, currentPage, pageSize):
    self._oprot.writeMessageBegin('getAdminPostList', TMessageType.CALL, self._seqid)
    args = getAdminPostList_args()
    args.content = content
    args.mobile = mobile
    args.nickName = nickName
    args.objType = objType
    args.objId = objId
    args.createTimeStart = createTimeStart
    args.createTimeEnd = createTimeEnd
    args.cityId = cityId
    args.communityId = communityId
    args.inform = inform
    args.currentPage = currentPage
    args.pageSize = pageSize
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getAdminPostList(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getAdminPostList_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getAdminPostList failed: unknown result");


class Processor(Iface, TProcessor):
  def __init__(self, handler):
    self._handler = handler
    self._processMap = {}
    self._processMap["getAdminPostList"] = Processor.process_getAdminPostList

  def process(self, iprot, oprot):
    (name, type, seqid) = iprot.readMessageBegin()
    if name not in self._processMap:
      iprot.skip(TType.STRUCT)
      iprot.readMessageEnd()
      x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
      oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
      x.write(oprot)
      oprot.writeMessageEnd()
      oprot.trans.flush()
      return
    else:
      self._processMap[name](self, seqid, iprot, oprot)
    return True

  def process_getAdminPostList(self, seqid, iprot, oprot):
    args = getAdminPostList_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getAdminPostList_result()
    result.success = self._handler.getAdminPostList(args.content, args.mobile, args.nickName, args.objType, args.objId, args.createTimeStart, args.createTimeEnd, args.cityId, args.communityId, args.inform, args.currentPage, args.pageSize)
    oprot.writeMessageBegin("getAdminPostList", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()


# HELPER FUNCTIONS AND STRUCTURES

class getAdminPostList_args:
  """
  Attributes:
   - content
   - mobile
   - nickName
   - objType
   - objId
   - createTimeStart
   - createTimeEnd
   - cityId
   - communityId
   - inform
   - currentPage
   - pageSize
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'content', None, None, ), # 1
    (2, TType.STRING, 'mobile', None, None, ), # 2
    (3, TType.STRING, 'nickName', None, None, ), # 3
    (4, TType.I32, 'objType', None, None, ), # 4
    (5, TType.I32, 'objId', None, None, ), # 5
    (6, TType.I64, 'createTimeStart', None, None, ), # 6
    (7, TType.I64, 'createTimeEnd', None, None, ), # 7
    (8, TType.I32, 'cityId', None, None, ), # 8
    (9, TType.I32, 'communityId', None, None, ), # 9
    (10, TType.I32, 'inform', None, None, ), # 10
    (11, TType.I32, 'currentPage', None, None, ), # 11
    (12, TType.I32, 'pageSize', None, None, ), # 12
  )

  def __init__(self, content=None, mobile=None, nickName=None, objType=None, objId=None, createTimeStart=None, createTimeEnd=None, cityId=None, communityId=None, inform=None, currentPage=None, pageSize=None,):
    self.content = content
    self.mobile = mobile
    self.nickName = nickName
    self.objType = objType
    self.objId = objId
    self.createTimeStart = createTimeStart
    self.createTimeEnd = createTimeEnd
    self.cityId = cityId
    self.communityId = communityId
    self.inform = inform
    self.currentPage = currentPage
    self.pageSize = pageSize

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.content = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.mobile = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.nickName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.objType = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.objId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.createTimeStart = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I64:
          self.createTimeEnd = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.cityId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.communityId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.inform = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.currentPage = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I32:
          self.pageSize = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getAdminPostList_args')
    if self.content is not None:
      oprot.writeFieldBegin('content', TType.STRING, 1)
      oprot.writeString(self.content)
      oprot.writeFieldEnd()
    if self.mobile is not None:
      oprot.writeFieldBegin('mobile', TType.STRING, 2)
      oprot.writeString(self.mobile)
      oprot.writeFieldEnd()
    if self.nickName is not None:
      oprot.writeFieldBegin('nickName', TType.STRING, 3)
      oprot.writeString(self.nickName)
      oprot.writeFieldEnd()
    if self.objType is not None:
      oprot.writeFieldBegin('objType', TType.I32, 4)
      oprot.writeI32(self.objType)
      oprot.writeFieldEnd()
    if self.objId is not None:
      oprot.writeFieldBegin('objId', TType.I32, 5)
      oprot.writeI32(self.objId)
      oprot.writeFieldEnd()
    if self.createTimeStart is not None:
      oprot.writeFieldBegin('createTimeStart', TType.I64, 6)
      oprot.writeI64(self.createTimeStart)
      oprot.writeFieldEnd()
    if self.createTimeEnd is not None:
      oprot.writeFieldBegin('createTimeEnd', TType.I64, 7)
      oprot.writeI64(self.createTimeEnd)
      oprot.writeFieldEnd()
    if self.cityId is not None:
      oprot.writeFieldBegin('cityId', TType.I32, 8)
      oprot.writeI32(self.cityId)
      oprot.writeFieldEnd()
    if self.communityId is not None:
      oprot.writeFieldBegin('communityId', TType.I32, 9)
      oprot.writeI32(self.communityId)
      oprot.writeFieldEnd()
    if self.inform is not None:
      oprot.writeFieldBegin('inform', TType.I32, 10)
      oprot.writeI32(self.inform)
      oprot.writeFieldEnd()
    if self.currentPage is not None:
      oprot.writeFieldBegin('currentPage', TType.I32, 11)
      oprot.writeI32(self.currentPage)
      oprot.writeFieldEnd()
    if self.pageSize is not None:
      oprot.writeFieldBegin('pageSize', TType.I32, 12)
      oprot.writeI32(self.pageSize)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.content)
    value = (value * 31) ^ hash(self.mobile)
    value = (value * 31) ^ hash(self.nickName)
    value = (value * 31) ^ hash(self.objType)
    value = (value * 31) ^ hash(self.objId)
    value = (value * 31) ^ hash(self.createTimeStart)
    value = (value * 31) ^ hash(self.createTimeEnd)
    value = (value * 31) ^ hash(self.cityId)
    value = (value * 31) ^ hash(self.communityId)
    value = (value * 31) ^ hash(self.inform)
    value = (value * 31) ^ hash(self.currentPage)
    value = (value * 31) ^ hash(self.pageSize)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getAdminPostList_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (TAdminPostQueryData.ttypes.TAdminPostQueryData, TAdminPostQueryData.ttypes.TAdminPostQueryData.thrift_spec), None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = TAdminPostQueryData.ttypes.TAdminPostQueryData()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getAdminPostList_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
