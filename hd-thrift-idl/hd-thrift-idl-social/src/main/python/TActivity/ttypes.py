#coding=utf-8

#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class TActivity:
  """
  活动对象

  @since 1.1.0
  @author zhijian.li
  @date 2016年1月14日 上午9:09:15


  Attributes:
   - activityBase: 活动数据结构
   - activityCommunities: 指定小区
  """

  thrift_spec = (
    None, # 0
    (1, TType.MAP, 'activityBase', (TType.STRING,None,TType.STRING,None), None, ), # 1
    (2, TType.LIST, 'activityCommunities', (TType.MAP,(TType.STRING,None,TType.I32,None)), None, ), # 2
  )

  def __init__(self, activityBase=None, activityCommunities=None,):
    self.activityBase = activityBase
    self.activityCommunities = activityCommunities

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.MAP:
          self.activityBase = {}
          (_ktype1, _vtype2, _size0 ) = iprot.readMapBegin()
          for _i4 in xrange(_size0):
            _key5 = iprot.readString();
            _val6 = iprot.readString();
            self.activityBase[_key5] = _val6
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.activityCommunities = []
          (_etype10, _size7) = iprot.readListBegin()
          for _i11 in xrange(_size7):
            _elem12 = {}
            (_ktype14, _vtype15, _size13 ) = iprot.readMapBegin()
            for _i17 in xrange(_size13):
              _key18 = iprot.readString();
              _val19 = iprot.readI32();
              _elem12[_key18] = _val19
            iprot.readMapEnd()
            self.activityCommunities.append(_elem12)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TActivity')
    if self.activityBase is not None:
      oprot.writeFieldBegin('activityBase', TType.MAP, 1)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.activityBase))
      for kiter20,viter21 in self.activityBase.items():
        oprot.writeString(kiter20)
        oprot.writeString(viter21)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.activityCommunities is not None:
      oprot.writeFieldBegin('activityCommunities', TType.LIST, 2)
      oprot.writeListBegin(TType.MAP, len(self.activityCommunities))
      for iter22 in self.activityCommunities:
        oprot.writeMapBegin(TType.STRING, TType.I32, len(iter22))
        for kiter23,viter24 in iter22.items():
          oprot.writeString(kiter23)
          oprot.writeI32(viter24)
        oprot.writeMapEnd()
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.activityBase)
    value = (value * 31) ^ hash(self.activityCommunities)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
