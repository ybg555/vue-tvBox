#coding=utf-8

#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class TPost:
  """
  帖子信息

  @since 0.0.1
  @author zhijian.li
  @date 2015年11月27日下午3:45:11


  Attributes:
   - id: 主键id
   - userId: 用户id
   - nickName: 用户昵称
   - avatarUrl: 用户头像
   - isAdmin: 是否管理员发布 0-不是 1-是
   - activityStartTime: 活动开始时间
   - status: 1-正常 0-删除 2-屏蔽
   - labelId: 标签id 默认-1
   - labelName: 标签名称
   - labelType: 标签类型
   - browse: 浏览次数
   - imageUrl: 多个图片链接，用 #_# 分割
   - content: 帖子内容
   - mark: 备注 可用来写删除帖子的原因
   - praiseCount: 被赞的次数
   - commentCount: 被评论的次数
   - activityCount: 参加活动计数
   - createTime: 创建时间
   - serverTime: 服务器时间
   - myPraise: 帖子是否被登录用户赞过
   - myActivity: 登录用户是否参加了活动
   - communityId: 小区id
   - topType: 0-普通 1-置顶
   - hasRule: 是否进行活动规则配置：0-否 1-是
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'id', None, None, ), # 1
    (2, TType.I64, 'userId', None, None, ), # 2
    (3, TType.STRING, 'nickName', None, None, ), # 3
    (4, TType.STRING, 'avatarUrl', None, None, ), # 4
    (5, TType.I32, 'isAdmin', None, None, ), # 5
    (6, TType.I64, 'activityStartTime', None, None, ), # 6
    (7, TType.I32, 'status', None, None, ), # 7
    (8, TType.I32, 'labelId', None, None, ), # 8
    (9, TType.STRING, 'labelName', None, None, ), # 9
    (10, TType.I32, 'labelType', None, None, ), # 10
    (11, TType.I32, 'browse', None, None, ), # 11
    (12, TType.STRING, 'imageUrl', None, None, ), # 12
    (13, TType.STRING, 'content', None, None, ), # 13
    (14, TType.STRING, 'mark', None, None, ), # 14
    (15, TType.I32, 'praiseCount', None, None, ), # 15
    (16, TType.I32, 'commentCount', None, None, ), # 16
    (17, TType.I32, 'activityCount', None, None, ), # 17
    (18, TType.I64, 'createTime', None, None, ), # 18
    (19, TType.I64, 'serverTime', None, None, ), # 19
    (20, TType.BOOL, 'myPraise', None, None, ), # 20
    (21, TType.BOOL, 'myActivity', None, None, ), # 21
    (22, TType.I32, 'communityId', None, None, ), # 22
    (23, TType.I32, 'topType', None, None, ), # 23
    (24, TType.I32, 'hasRule', None, None, ), # 24
  )

  def __init__(self, id=None, userId=None, nickName=None, avatarUrl=None, isAdmin=None, activityStartTime=None, status=None, labelId=None, labelName=None, labelType=None, browse=None, imageUrl=None, content=None, mark=None, praiseCount=None, commentCount=None, activityCount=None, createTime=None, serverTime=None, myPraise=None, myActivity=None, communityId=None, topType=None, hasRule=None,):
    self.id = id
    self.userId = userId
    self.nickName = nickName
    self.avatarUrl = avatarUrl
    self.isAdmin = isAdmin
    self.activityStartTime = activityStartTime
    self.status = status
    self.labelId = labelId
    self.labelName = labelName
    self.labelType = labelType
    self.browse = browse
    self.imageUrl = imageUrl
    self.content = content
    self.mark = mark
    self.praiseCount = praiseCount
    self.commentCount = commentCount
    self.activityCount = activityCount
    self.createTime = createTime
    self.serverTime = serverTime
    self.myPraise = myPraise
    self.myActivity = myActivity
    self.communityId = communityId
    self.topType = topType
    self.hasRule = hasRule

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.userId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.nickName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.avatarUrl = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.isAdmin = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.activityStartTime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.status = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.labelId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.labelName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.labelType = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.browse = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.imageUrl = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          self.content = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.STRING:
          self.mark = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.I32:
          self.praiseCount = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.I32:
          self.commentCount = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.I32:
          self.activityCount = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.I64:
          self.createTime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.I64:
          self.serverTime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.BOOL:
          self.myPraise = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.BOOL:
          self.myActivity = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.I32:
          self.communityId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 23:
        if ftype == TType.I32:
          self.topType = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 24:
        if ftype == TType.I32:
          self.hasRule = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TPost')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.userId is not None:
      oprot.writeFieldBegin('userId', TType.I64, 2)
      oprot.writeI64(self.userId)
      oprot.writeFieldEnd()
    if self.nickName is not None:
      oprot.writeFieldBegin('nickName', TType.STRING, 3)
      oprot.writeString(self.nickName)
      oprot.writeFieldEnd()
    if self.avatarUrl is not None:
      oprot.writeFieldBegin('avatarUrl', TType.STRING, 4)
      oprot.writeString(self.avatarUrl)
      oprot.writeFieldEnd()
    if self.isAdmin is not None:
      oprot.writeFieldBegin('isAdmin', TType.I32, 5)
      oprot.writeI32(self.isAdmin)
      oprot.writeFieldEnd()
    if self.activityStartTime is not None:
      oprot.writeFieldBegin('activityStartTime', TType.I64, 6)
      oprot.writeI64(self.activityStartTime)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 7)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    if self.labelId is not None:
      oprot.writeFieldBegin('labelId', TType.I32, 8)
      oprot.writeI32(self.labelId)
      oprot.writeFieldEnd()
    if self.labelName is not None:
      oprot.writeFieldBegin('labelName', TType.STRING, 9)
      oprot.writeString(self.labelName)
      oprot.writeFieldEnd()
    if self.labelType is not None:
      oprot.writeFieldBegin('labelType', TType.I32, 10)
      oprot.writeI32(self.labelType)
      oprot.writeFieldEnd()
    if self.browse is not None:
      oprot.writeFieldBegin('browse', TType.I32, 11)
      oprot.writeI32(self.browse)
      oprot.writeFieldEnd()
    if self.imageUrl is not None:
      oprot.writeFieldBegin('imageUrl', TType.STRING, 12)
      oprot.writeString(self.imageUrl)
      oprot.writeFieldEnd()
    if self.content is not None:
      oprot.writeFieldBegin('content', TType.STRING, 13)
      oprot.writeString(self.content)
      oprot.writeFieldEnd()
    if self.mark is not None:
      oprot.writeFieldBegin('mark', TType.STRING, 14)
      oprot.writeString(self.mark)
      oprot.writeFieldEnd()
    if self.praiseCount is not None:
      oprot.writeFieldBegin('praiseCount', TType.I32, 15)
      oprot.writeI32(self.praiseCount)
      oprot.writeFieldEnd()
    if self.commentCount is not None:
      oprot.writeFieldBegin('commentCount', TType.I32, 16)
      oprot.writeI32(self.commentCount)
      oprot.writeFieldEnd()
    if self.activityCount is not None:
      oprot.writeFieldBegin('activityCount', TType.I32, 17)
      oprot.writeI32(self.activityCount)
      oprot.writeFieldEnd()
    if self.createTime is not None:
      oprot.writeFieldBegin('createTime', TType.I64, 18)
      oprot.writeI64(self.createTime)
      oprot.writeFieldEnd()
    if self.serverTime is not None:
      oprot.writeFieldBegin('serverTime', TType.I64, 19)
      oprot.writeI64(self.serverTime)
      oprot.writeFieldEnd()
    if self.myPraise is not None:
      oprot.writeFieldBegin('myPraise', TType.BOOL, 20)
      oprot.writeBool(self.myPraise)
      oprot.writeFieldEnd()
    if self.myActivity is not None:
      oprot.writeFieldBegin('myActivity', TType.BOOL, 21)
      oprot.writeBool(self.myActivity)
      oprot.writeFieldEnd()
    if self.communityId is not None:
      oprot.writeFieldBegin('communityId', TType.I32, 22)
      oprot.writeI32(self.communityId)
      oprot.writeFieldEnd()
    if self.topType is not None:
      oprot.writeFieldBegin('topType', TType.I32, 23)
      oprot.writeI32(self.topType)
      oprot.writeFieldEnd()
    if self.hasRule is not None:
      oprot.writeFieldBegin('hasRule', TType.I32, 24)
      oprot.writeI32(self.hasRule)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.userId)
    value = (value * 31) ^ hash(self.nickName)
    value = (value * 31) ^ hash(self.avatarUrl)
    value = (value * 31) ^ hash(self.isAdmin)
    value = (value * 31) ^ hash(self.activityStartTime)
    value = (value * 31) ^ hash(self.status)
    value = (value * 31) ^ hash(self.labelId)
    value = (value * 31) ^ hash(self.labelName)
    value = (value * 31) ^ hash(self.labelType)
    value = (value * 31) ^ hash(self.browse)
    value = (value * 31) ^ hash(self.imageUrl)
    value = (value * 31) ^ hash(self.content)
    value = (value * 31) ^ hash(self.mark)
    value = (value * 31) ^ hash(self.praiseCount)
    value = (value * 31) ^ hash(self.commentCount)
    value = (value * 31) ^ hash(self.activityCount)
    value = (value * 31) ^ hash(self.createTime)
    value = (value * 31) ^ hash(self.serverTime)
    value = (value * 31) ^ hash(self.myPraise)
    value = (value * 31) ^ hash(self.myActivity)
    value = (value * 31) ^ hash(self.communityId)
    value = (value * 31) ^ hash(self.topType)
    value = (value * 31) ^ hash(self.hasRule)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
