#coding=utf-8

#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class TMessageBox:
  """
  消息

  @since 0.0.1
  @author zhijian.li
  @date 2015年11月27日下午3:45:11


  Attributes:
   - id: 主键
   - type: 1-赞 2-评论
   - postId: 帖子id
   - postImageUrl: 多个图片链接，用 #_# 分割
   - postContent: 帖子内容
   - userId: 用户id
   - nickName: 用户昵称
   - avatarUrl: 用户头像
   - toUserId: 被回复用户的userid
   - status: 状态 1-已读 0-未读 数据库默认0
   - createTime: 创建时间
   - content: 评论内容
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'id', None, None, ), # 1
    (2, TType.I32, 'type', None, None, ), # 2
    (3, TType.I32, 'postId', None, None, ), # 3
    (4, TType.STRING, 'postImageUrl', None, None, ), # 4
    (5, TType.STRING, 'postContent', None, None, ), # 5
    (6, TType.I64, 'userId', None, None, ), # 6
    (7, TType.STRING, 'nickName', None, None, ), # 7
    (8, TType.STRING, 'avatarUrl', None, None, ), # 8
    (9, TType.I64, 'toUserId', None, None, ), # 9
    (10, TType.I32, 'status', None, None, ), # 10
    (11, TType.I64, 'createTime', None, None, ), # 11
    (12, TType.STRING, 'content', None, None, ), # 12
  )

  def __init__(self, id=None, type=None, postId=None, postImageUrl=None, postContent=None, userId=None, nickName=None, avatarUrl=None, toUserId=None, status=None, createTime=None, content=None,):
    self.id = id
    self.type = type
    self.postId = postId
    self.postImageUrl = postImageUrl
    self.postContent = postContent
    self.userId = userId
    self.nickName = nickName
    self.avatarUrl = avatarUrl
    self.toUserId = toUserId
    self.status = status
    self.createTime = createTime
    self.content = content

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.postId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.postImageUrl = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.postContent = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.userId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.nickName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.avatarUrl = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I64:
          self.toUserId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.status = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I64:
          self.createTime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.content = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TMessageBox')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I32, 1)
      oprot.writeI32(self.id)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 2)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    if self.postId is not None:
      oprot.writeFieldBegin('postId', TType.I32, 3)
      oprot.writeI32(self.postId)
      oprot.writeFieldEnd()
    if self.postImageUrl is not None:
      oprot.writeFieldBegin('postImageUrl', TType.STRING, 4)
      oprot.writeString(self.postImageUrl)
      oprot.writeFieldEnd()
    if self.postContent is not None:
      oprot.writeFieldBegin('postContent', TType.STRING, 5)
      oprot.writeString(self.postContent)
      oprot.writeFieldEnd()
    if self.userId is not None:
      oprot.writeFieldBegin('userId', TType.I64, 6)
      oprot.writeI64(self.userId)
      oprot.writeFieldEnd()
    if self.nickName is not None:
      oprot.writeFieldBegin('nickName', TType.STRING, 7)
      oprot.writeString(self.nickName)
      oprot.writeFieldEnd()
    if self.avatarUrl is not None:
      oprot.writeFieldBegin('avatarUrl', TType.STRING, 8)
      oprot.writeString(self.avatarUrl)
      oprot.writeFieldEnd()
    if self.toUserId is not None:
      oprot.writeFieldBegin('toUserId', TType.I64, 9)
      oprot.writeI64(self.toUserId)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 10)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    if self.createTime is not None:
      oprot.writeFieldBegin('createTime', TType.I64, 11)
      oprot.writeI64(self.createTime)
      oprot.writeFieldEnd()
    if self.content is not None:
      oprot.writeFieldBegin('content', TType.STRING, 12)
      oprot.writeString(self.content)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.type)
    value = (value * 31) ^ hash(self.postId)
    value = (value * 31) ^ hash(self.postImageUrl)
    value = (value * 31) ^ hash(self.postContent)
    value = (value * 31) ^ hash(self.userId)
    value = (value * 31) ^ hash(self.nickName)
    value = (value * 31) ^ hash(self.avatarUrl)
    value = (value * 31) ^ hash(self.toUserId)
    value = (value * 31) ^ hash(self.status)
    value = (value * 31) ^ hash(self.createTime)
    value = (value * 31) ^ hash(self.content)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
