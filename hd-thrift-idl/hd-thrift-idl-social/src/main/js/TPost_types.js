//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


TPost = function(args) {
  this.id = null;
  this.userId = null;
  this.nickName = null;
  this.avatarUrl = null;
  this.isAdmin = null;
  this.activityStartTime = null;
  this.status = null;
  this.labelId = null;
  this.labelName = null;
  this.labelType = null;
  this.browse = null;
  this.imageUrl = null;
  this.content = null;
  this.mark = null;
  this.praiseCount = null;
  this.commentCount = null;
  this.activityCount = null;
  this.createTime = null;
  this.serverTime = null;
  this.myPraise = null;
  this.myActivity = null;
  this.communityId = null;
  this.topType = null;
  this.hasRule = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.userId !== undefined) {
      this.userId = args.userId;
    }
    if (args.nickName !== undefined) {
      this.nickName = args.nickName;
    }
    if (args.avatarUrl !== undefined) {
      this.avatarUrl = args.avatarUrl;
    }
    if (args.isAdmin !== undefined) {
      this.isAdmin = args.isAdmin;
    }
    if (args.activityStartTime !== undefined) {
      this.activityStartTime = args.activityStartTime;
    }
    if (args.status !== undefined) {
      this.status = args.status;
    }
    if (args.labelId !== undefined) {
      this.labelId = args.labelId;
    }
    if (args.labelName !== undefined) {
      this.labelName = args.labelName;
    }
    if (args.labelType !== undefined) {
      this.labelType = args.labelType;
    }
    if (args.browse !== undefined) {
      this.browse = args.browse;
    }
    if (args.imageUrl !== undefined) {
      this.imageUrl = args.imageUrl;
    }
    if (args.content !== undefined) {
      this.content = args.content;
    }
    if (args.mark !== undefined) {
      this.mark = args.mark;
    }
    if (args.praiseCount !== undefined) {
      this.praiseCount = args.praiseCount;
    }
    if (args.commentCount !== undefined) {
      this.commentCount = args.commentCount;
    }
    if (args.activityCount !== undefined) {
      this.activityCount = args.activityCount;
    }
    if (args.createTime !== undefined) {
      this.createTime = args.createTime;
    }
    if (args.serverTime !== undefined) {
      this.serverTime = args.serverTime;
    }
    if (args.myPraise !== undefined) {
      this.myPraise = args.myPraise;
    }
    if (args.myActivity !== undefined) {
      this.myActivity = args.myActivity;
    }
    if (args.communityId !== undefined) {
      this.communityId = args.communityId;
    }
    if (args.topType !== undefined) {
      this.topType = args.topType;
    }
    if (args.hasRule !== undefined) {
      this.hasRule = args.hasRule;
    }
  }
};
TPost.prototype = {};
TPost.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.userId = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.nickName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.avatarUrl = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.isAdmin = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.activityStartTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.labelId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.labelName = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.labelType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I32) {
        this.browse = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.imageUrl = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRING) {
        this.content = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRING) {
        this.mark = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.I32) {
        this.praiseCount = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.I32) {
        this.commentCount = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.I32) {
        this.activityCount = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.I64) {
        this.createTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.I64) {
        this.serverTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.BOOL) {
        this.myPraise = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.BOOL) {
        this.myActivity = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.I32) {
        this.communityId = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 23:
      if (ftype == Thrift.Type.I32) {
        this.topType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 24:
      if (ftype == Thrift.Type.I32) {
        this.hasRule = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TPost.prototype.write = function(output) {
  output.writeStructBegin('TPost');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.I64, 2);
    output.writeI64(this.userId);
    output.writeFieldEnd();
  }
  if (this.nickName !== null && this.nickName !== undefined) {
    output.writeFieldBegin('nickName', Thrift.Type.STRING, 3);
    output.writeString(this.nickName);
    output.writeFieldEnd();
  }
  if (this.avatarUrl !== null && this.avatarUrl !== undefined) {
    output.writeFieldBegin('avatarUrl', Thrift.Type.STRING, 4);
    output.writeString(this.avatarUrl);
    output.writeFieldEnd();
  }
  if (this.isAdmin !== null && this.isAdmin !== undefined) {
    output.writeFieldBegin('isAdmin', Thrift.Type.I32, 5);
    output.writeI32(this.isAdmin);
    output.writeFieldEnd();
  }
  if (this.activityStartTime !== null && this.activityStartTime !== undefined) {
    output.writeFieldBegin('activityStartTime', Thrift.Type.I64, 6);
    output.writeI64(this.activityStartTime);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 7);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.labelId !== null && this.labelId !== undefined) {
    output.writeFieldBegin('labelId', Thrift.Type.I32, 8);
    output.writeI32(this.labelId);
    output.writeFieldEnd();
  }
  if (this.labelName !== null && this.labelName !== undefined) {
    output.writeFieldBegin('labelName', Thrift.Type.STRING, 9);
    output.writeString(this.labelName);
    output.writeFieldEnd();
  }
  if (this.labelType !== null && this.labelType !== undefined) {
    output.writeFieldBegin('labelType', Thrift.Type.I32, 10);
    output.writeI32(this.labelType);
    output.writeFieldEnd();
  }
  if (this.browse !== null && this.browse !== undefined) {
    output.writeFieldBegin('browse', Thrift.Type.I32, 11);
    output.writeI32(this.browse);
    output.writeFieldEnd();
  }
  if (this.imageUrl !== null && this.imageUrl !== undefined) {
    output.writeFieldBegin('imageUrl', Thrift.Type.STRING, 12);
    output.writeString(this.imageUrl);
    output.writeFieldEnd();
  }
  if (this.content !== null && this.content !== undefined) {
    output.writeFieldBegin('content', Thrift.Type.STRING, 13);
    output.writeString(this.content);
    output.writeFieldEnd();
  }
  if (this.mark !== null && this.mark !== undefined) {
    output.writeFieldBegin('mark', Thrift.Type.STRING, 14);
    output.writeString(this.mark);
    output.writeFieldEnd();
  }
  if (this.praiseCount !== null && this.praiseCount !== undefined) {
    output.writeFieldBegin('praiseCount', Thrift.Type.I32, 15);
    output.writeI32(this.praiseCount);
    output.writeFieldEnd();
  }
  if (this.commentCount !== null && this.commentCount !== undefined) {
    output.writeFieldBegin('commentCount', Thrift.Type.I32, 16);
    output.writeI32(this.commentCount);
    output.writeFieldEnd();
  }
  if (this.activityCount !== null && this.activityCount !== undefined) {
    output.writeFieldBegin('activityCount', Thrift.Type.I32, 17);
    output.writeI32(this.activityCount);
    output.writeFieldEnd();
  }
  if (this.createTime !== null && this.createTime !== undefined) {
    output.writeFieldBegin('createTime', Thrift.Type.I64, 18);
    output.writeI64(this.createTime);
    output.writeFieldEnd();
  }
  if (this.serverTime !== null && this.serverTime !== undefined) {
    output.writeFieldBegin('serverTime', Thrift.Type.I64, 19);
    output.writeI64(this.serverTime);
    output.writeFieldEnd();
  }
  if (this.myPraise !== null && this.myPraise !== undefined) {
    output.writeFieldBegin('myPraise', Thrift.Type.BOOL, 20);
    output.writeBool(this.myPraise);
    output.writeFieldEnd();
  }
  if (this.myActivity !== null && this.myActivity !== undefined) {
    output.writeFieldBegin('myActivity', Thrift.Type.BOOL, 21);
    output.writeBool(this.myActivity);
    output.writeFieldEnd();
  }
  if (this.communityId !== null && this.communityId !== undefined) {
    output.writeFieldBegin('communityId', Thrift.Type.I32, 22);
    output.writeI32(this.communityId);
    output.writeFieldEnd();
  }
  if (this.topType !== null && this.topType !== undefined) {
    output.writeFieldBegin('topType', Thrift.Type.I32, 23);
    output.writeI32(this.topType);
    output.writeFieldEnd();
  }
  if (this.hasRule !== null && this.hasRule !== undefined) {
    output.writeFieldBegin('hasRule', Thrift.Type.I32, 24);
    output.writeI32(this.hasRule);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

