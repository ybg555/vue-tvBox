//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = require('./ActivityService_types');
//HELPER FUNCTIONS AND STRUCTURES

IActivityServiceGetPostListByActivityId_getPostListByActivityId_args = function(args) {
  this.id = null;
  this.currentPage = null;
  this.pageSize = null;
  if (args) {
    if (args.id !== undefined) {
      this.id = args.id;
    }
    if (args.currentPage !== undefined) {
      this.currentPage = args.currentPage;
    }
    if (args.pageSize !== undefined) {
      this.pageSize = args.pageSize;
    }
  }
};
IActivityServiceGetPostListByActivityId_getPostListByActivityId_args.prototype = {};
IActivityServiceGetPostListByActivityId_getPostListByActivityId_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.currentPage = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.pageSize = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IActivityServiceGetPostListByActivityId_getPostListByActivityId_args.prototype.write = function(output) {
  output.writeStructBegin('IActivityServiceGetPostListByActivityId_getPostListByActivityId_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.currentPage !== null && this.currentPage !== undefined) {
    output.writeFieldBegin('currentPage', Thrift.Type.I32, 2);
    output.writeI32(this.currentPage);
    output.writeFieldEnd();
  }
  if (this.pageSize !== null && this.pageSize !== undefined) {
    output.writeFieldBegin('pageSize', Thrift.Type.I32, 3);
    output.writeI32(this.pageSize);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IActivityServiceGetPostListByActivityId_getPostListByActivityId_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
IActivityServiceGetPostListByActivityId_getPostListByActivityId_result.prototype = {};
IActivityServiceGetPostListByActivityId_getPostListByActivityId_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size28 = 0;
        var _rtmp332;
        this.success = [];
        var _etype31 = 0;
        _rtmp332 = input.readListBegin();
        _etype31 = _rtmp332.etype;
        _size28 = _rtmp332.size;
        for (var _i33 = 0; _i33 < _size28; ++_i33)
        {
          var elem34 = null;
          var _size35 = 0;
          var _rtmp339;
          elem34 = {};
          var _ktype36 = 0;
          var _vtype37 = 0;
          _rtmp339 = input.readMapBegin();
          _ktype36 = _rtmp339.ktype;
          _vtype37 = _rtmp339.vtype;
          _size35 = _rtmp339.size;
          for (var _i40 = 0; _i40 < _size35; ++_i40)
          {
            var key41 = null;
            var val42 = null;
            key41 = input.readString();
            val42 = input.readString();
            elem34[key41] = val42;
          }
          input.readMapEnd();
          this.success.push(elem34);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IActivityServiceGetPostListByActivityId_getPostListByActivityId_result.prototype.write = function(output) {
  output.writeStructBegin('IActivityServiceGetPostListByActivityId_getPostListByActivityId_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.MAP, this.success.length);
    for (var iter43 in this.success)
    {
      if (this.success.hasOwnProperty(iter43))
      {
        iter43 = this.success[iter43];
        output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(iter43));
        for (var kiter44 in iter43)
        {
          if (iter43.hasOwnProperty(kiter44))
          {
            var viter45 = iter43[kiter44];
            output.writeString(kiter44);
            output.writeString(viter45);
          }
        }
        output.writeMapEnd();
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IActivityServiceGetPostListByActivityIdClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
IActivityServiceGetPostListByActivityIdClient.prototype = {};
IActivityServiceGetPostListByActivityIdClient.prototype.seqid = function() { return this._seqid; }
IActivityServiceGetPostListByActivityIdClient.prototype.new_seqid = function() { return this._seqid += 1; }
IActivityServiceGetPostListByActivityIdClient.prototype.getPostListByActivityId = function(id, currentPage, pageSize, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getPostListByActivityId(id, currentPage, pageSize);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getPostListByActivityId(id, currentPage, pageSize);
  }
};

IActivityServiceGetPostListByActivityIdClient.prototype.send_getPostListByActivityId = function(id, currentPage, pageSize) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getPostListByActivityId', Thrift.MessageType.CALL, this.seqid());
  var args = new IActivityServiceGetPostListByActivityId_getPostListByActivityId_args();
  args.id = id;
  args.currentPage = currentPage;
  args.pageSize = pageSize;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

IActivityServiceGetPostListByActivityIdClient.prototype.recv_getPostListByActivityId = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new IActivityServiceGetPostListByActivityId_getPostListByActivityId_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getPostListByActivityId failed: unknown result');
};
IActivityServiceGetPostListByActivityIdProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
IActivityServiceGetPostListByActivityIdProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

IActivityServiceGetPostListByActivityIdProcessor.prototype.process_getPostListByActivityId = function(seqid, input, output) {
  var args = new IActivityServiceGetPostListByActivityId_getPostListByActivityId_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getPostListByActivityId.length === 3) {
    Q.fcall(this._handler.getPostListByActivityId, args.id, args.currentPage, args.pageSize)
      .then(function(result) {
        var result = new IActivityServiceGetPostListByActivityId_getPostListByActivityId_result({success: result});
        output.writeMessageBegin("getPostListByActivityId", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new IActivityServiceGetPostListByActivityId_getPostListByActivityId_result(err);
        output.writeMessageBegin("getPostListByActivityId", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getPostListByActivityId(args.id, args.currentPage, args.pageSize,  function (err, result) {
      var result = new IActivityServiceGetPostListByActivityId_getPostListByActivityId_result((err != null ? err : {success: result}));
      output.writeMessageBegin("getPostListByActivityId", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

