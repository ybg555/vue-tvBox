//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var TLabel_ttypes = require('./TLabel_types')
var TComment_ttypes = require('./TComment_types')
var TMessageBox_ttypes = require('./TMessageBox_types')
var TPost_ttypes = require('./TPost_types')
var TPraise_ttypes = require('./TPraise_types')
var TReason_ttypes = require('./TReason_types')
var TActivityApply_ttypes = require('./TActivityApply_types')


var ttypes = require('./SocialService_types');
//HELPER FUNCTIONS AND STRUCTURES

ISocialServiceAddPraise_addPraise_args = function(args) {
  this.postId = null;
  this.postUserId = null;
  if (args) {
    if (args.postId !== undefined) {
      this.postId = args.postId;
    }
    if (args.postUserId !== undefined) {
      this.postUserId = args.postUserId;
    }
  }
};
ISocialServiceAddPraise_addPraise_args.prototype = {};
ISocialServiceAddPraise_addPraise_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.postId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.postUserId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ISocialServiceAddPraise_addPraise_args.prototype.write = function(output) {
  output.writeStructBegin('ISocialServiceAddPraise_addPraise_args');
  if (this.postId !== null && this.postId !== undefined) {
    output.writeFieldBegin('postId', Thrift.Type.I32, 1);
    output.writeI32(this.postId);
    output.writeFieldEnd();
  }
  if (this.postUserId !== null && this.postUserId !== undefined) {
    output.writeFieldBegin('postUserId', Thrift.Type.I64, 2);
    output.writeI64(this.postUserId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ISocialServiceAddPraise_addPraise_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
ISocialServiceAddPraise_addPraise_result.prototype = {};
ISocialServiceAddPraise_addPraise_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ISocialServiceAddPraise_addPraise_result.prototype.write = function(output) {
  output.writeStructBegin('ISocialServiceAddPraise_addPraise_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ISocialServiceAddPraiseClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
ISocialServiceAddPraiseClient.prototype = {};
ISocialServiceAddPraiseClient.prototype.seqid = function() { return this._seqid; }
ISocialServiceAddPraiseClient.prototype.new_seqid = function() { return this._seqid += 1; }
ISocialServiceAddPraiseClient.prototype.addPraise = function(postId, postUserId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_addPraise(postId, postUserId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_addPraise(postId, postUserId);
  }
};

ISocialServiceAddPraiseClient.prototype.send_addPraise = function(postId, postUserId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('addPraise', Thrift.MessageType.CALL, this.seqid());
  var args = new ISocialServiceAddPraise_addPraise_args();
  args.postId = postId;
  args.postUserId = postUserId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ISocialServiceAddPraiseClient.prototype.recv_addPraise = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ISocialServiceAddPraise_addPraise_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('addPraise failed: unknown result');
};
ISocialServiceAddPraiseProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
ISocialServiceAddPraiseProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

ISocialServiceAddPraiseProcessor.prototype.process_addPraise = function(seqid, input, output) {
  var args = new ISocialServiceAddPraise_addPraise_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.addPraise.length === 2) {
    Q.fcall(this._handler.addPraise, args.postId, args.postUserId)
      .then(function(result) {
        var result = new ISocialServiceAddPraise_addPraise_result({success: result});
        output.writeMessageBegin("addPraise", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new ISocialServiceAddPraise_addPraise_result(err);
        output.writeMessageBegin("addPraise", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.addPraise(args.postId, args.postUserId,  function (err, result) {
      var result = new ISocialServiceAddPraise_addPraise_result((err != null ? err : {success: result}));
      output.writeMessageBegin("addPraise", Thrift.MessageType.REPLY, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

