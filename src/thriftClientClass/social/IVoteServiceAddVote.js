var Thrift = require('../../Thrift.js');var IVoteServiceAddVote_addVote_args ;var IVoteServiceAddVote_addVote_result ;var IVoteServiceAddVoteClient ;//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

IVoteServiceAddVote_addVote_args = function(args) {
  this.params = null;
  if (args) {
    if (args.params !== undefined) {
      this.params = args.params;
    }
  }
};
IVoteServiceAddVote_addVote_args.prototype = {};
IVoteServiceAddVote_addVote_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.params = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IVoteServiceAddVote_addVote_args.prototype.write = function(output) {
  output.writeStructBegin('IVoteServiceAddVote_addVote_args');
  if (this.params !== null && this.params !== undefined) {
    output.writeFieldBegin('params', Thrift.Type.STRING, 1);
    output.writeString(this.params);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IVoteServiceAddVote_addVote_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
IVoteServiceAddVote_addVote_result.prototype = {};
IVoteServiceAddVote_addVote_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

IVoteServiceAddVote_addVote_result.prototype.write = function(output) {
  output.writeStructBegin('IVoteServiceAddVote_addVote_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

IVoteServiceAddVoteClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
IVoteServiceAddVoteClient.prototype = {};
IVoteServiceAddVoteClient.prototype.addVote = function(params, callback) {
  this.send_addVote(params, callback); 
  if (!callback) {
    return this.recv_addVote();
  }
};

IVoteServiceAddVoteClient.prototype.send_addVote = function(params, callback) {
  this.output.writeMessageBegin('addVote', Thrift.MessageType.CALL, this.seqid);
  var args = new IVoteServiceAddVote_addVote_args();
  args.params = params;
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_addVote();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

IVoteServiceAddVoteClient.prototype.recv_addVote = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new IVoteServiceAddVote_addVote_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'addVote failed: unknown result';
};
;module.exports = { 'IVoteServiceAddVote_addVote_args' : IVoteServiceAddVote_addVote_args,'IVoteServiceAddVote_addVote_result' : IVoteServiceAddVote_addVote_result,'IVoteServiceAddVoteClient' : IVoteServiceAddVoteClient }